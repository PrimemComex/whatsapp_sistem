{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\Desktop\\\\whatsapp_sistem\\\\client\\\\src\\\\contexts\\\\WhatsAppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// client/src/contexts/WhatsAppContext.js\n// ====================================\n// 🔗 WHATSAPP CONTEXT - VERSÃO COMPLETA COM CORREÇÕES PONTUAIS\n// Mantém todas as funcionalidades + correções específicas no erro de token\n// ====================================\n\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WhatsAppContext = /*#__PURE__*/createContext();\n\n// ====================================\n// 🚀 WHATSAPP PROVIDER - VERSÃO COMPLETA CORRIGIDA\n// ====================================\nexport const WhatsAppProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    isLoggedIn,\n    user,\n    token\n  } = useAuth(); // ← INTEGRAÇÃO COM AUTH\n\n  const [state, setState] = useState({\n    // Estados que o ConnectionPage espera\n    status: 'disconnected',\n    // disconnected, connecting, qr, connected, error\n    qrCode: null,\n    isConnecting: false,\n    connectionInfo: null,\n    error: null,\n    // Estados adicionais completos\n    isConnected: false,\n    connectionStatus: 'disconnected',\n    conversations: [],\n    messages: {},\n    activeConversation: null,\n    socket: null,\n    clientInfo: null,\n    loading: false\n  });\n\n  // ====================================\n  // 🔍 DEBUG CONTÍNUO DE AUTENTICAÇÃO\n  // ====================================\n  useEffect(() => {\n    console.log('🔍 WhatsApp AUTH STATUS UPDATE:', {\n      isLoggedIn,\n      hasUser: !!user,\n      userEmail: user === null || user === void 0 ? void 0 : user.email,\n      userId: user === null || user === void 0 ? void 0 : user.id,\n      hasToken: !!token,\n      tokenLength: token === null || token === void 0 ? void 0 : token.length,\n      timestamp: new Date().toLocaleTimeString()\n    });\n  }, [isLoggedIn, user, token]);\n\n  // ====================================\n  // 🔌 CONFIGURAR SOCKET.IO - CORRIGIDO PARA EVITAR LOOPS\n  // ====================================\n  useEffect(() => {\n    var _state$socket;\n    console.log('🔌 Socket Effect Triggered:', {\n      isLoggedIn,\n      hasUser: !!user,\n      hasToken: !!token,\n      socketExists: !!state.socket,\n      socketConnected: (_state$socket = state.socket) === null || _state$socket === void 0 ? void 0 : _state$socket.connected\n    });\n\n    // ✅ VERIFICAÇÃO SIMPLIFICADA - APENAS isLoggedIn E user\n    if (!isLoggedIn || !user) {\n      console.log('⚠️ WhatsAppContext: Usuário não completamente autenticado');\n      console.log('📊 Auth Details:', {\n        isLoggedIn: isLoggedIn,\n        hasToken: !!token,\n        hasUser: !!user,\n        userDetails: user ? {\n          id: user.id,\n          email: user.email,\n          name: user.name\n        } : 'NO USER'\n      });\n\n      // Limpar socket se existir\n      if (state.socket) {\n        console.log('🔌 WhatsAppContext: Desconectando socket existente...');\n        state.socket.disconnect();\n        setState(prev => ({\n          ...prev,\n          socket: null,\n          status: 'disconnected',\n          isConnected: false,\n          connectionStatus: 'disconnected',\n          qrCode: null,\n          clientInfo: null,\n          connectionInfo: null,\n          conversations: [],\n          messages: {},\n          activeConversation: null,\n          loading: false,\n          isConnecting: false,\n          error: null\n        }));\n      }\n      return;\n    }\n\n    // ✅ VERIFICAR SE JÁ TEM SOCKET CONECTADO\n    if (state.socket && state.socket.connected) {\n      console.log('🔌 WhatsAppContext: Socket já conectado, reutilizando...');\n      return;\n    }\n    console.log('🔌 WhatsAppContext: Configurando Socket.IO para usuário autenticado...', {\n      user: user.email,\n      userId: user.id,\n      hasToken: !!token,\n      tokenPreview: token ? token.substring(0, 30) + '...' : 'NO TOKEN'\n    });\n\n    // ✅ USAR VARIÁVEIS DE AMBIENTE\n    const socketUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:3001';\n\n    // 🔧 CORREÇÃO CRÍTICA: CONFIGURAÇÃO SOCKET.IO APENAS COM POLLING\n    const socket = io(socketUrl, {\n      // 🎯 CORREÇÃO PRINCIPAL: Apenas polling, sem websocket\n      transports: ['polling'],\n      upgrade: false,\n      rememberUpgrade: false,\n      forceNew: true,\n      // 🔄 Configurações de reconexão\n      reconnectionAttempts: 10,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      maxReconnectionAttempts: 10,\n      timeout: 20000,\n      // ✅ ADICIONAR TOKEN DE AUTENTICAÇÃO (MAS NÃO OBRIGATÓRIO)\n      auth: {\n        token: token || `fallback_token_${Date.now()}`,\n        userId: user.id,\n        userEmail: user.email\n      },\n      // ✅ ADICIONAR QUERY PARAMS PARA AUTENTICAÇÃO\n      query: {\n        userId: user.id,\n        userRole: user.role || 'user'\n      }\n    });\n    setState(prev => ({\n      ...prev,\n      socket\n    }));\n\n    // ====================================\n    // 📡 EVENT LISTENERS COMPLETOS\n    // ====================================\n\n    socket.on('connect', () => {\n      console.log('✅ WhatsAppContext: Socket conectado para usuário:', user.email);\n      console.log('🔌 Socket ID:', socket.id);\n\n      // Limpar erros de conexão\n      setState(prev => {\n        var _prev$error;\n        return {\n          ...prev,\n          error: (_prev$error = prev.error) !== null && _prev$error !== void 0 && _prev$error.includes('conexão') ? null : prev.error\n        };\n      });\n    });\n    socket.on('disconnect', reason => {\n      console.log('❌ WhatsAppContext: Socket desconectado:', reason);\n      setState(prev => ({\n        ...prev,\n        status: 'disconnected',\n        isConnected: false,\n        connectionStatus: 'disconnected',\n        qrCode: null,\n        isConnecting: false,\n        connectionInfo: null,\n        clientInfo: null\n      }));\n    });\n\n    // ✅ EVENTOS WHATSAPP COMPLETOS - COMPATÍVEIS COM CÓDIGO ORIGINAL\n    socket.on('qr', qrCode => {\n      var _qrCode$substring;\n      console.log('📱 WhatsAppContext: QR Code recebido', {\n        type: typeof qrCode,\n        length: qrCode === null || qrCode === void 0 ? void 0 : qrCode.length,\n        preview: qrCode === null || qrCode === void 0 ? void 0 : (_qrCode$substring = qrCode.substring) === null || _qrCode$substring === void 0 ? void 0 : _qrCode$substring.call(qrCode, 0, 50)\n      });\n      setState(prev => ({\n        ...prev,\n        qrCode,\n        status: 'qr',\n        connectionStatus: 'qr',\n        isConnecting: false,\n        loading: false,\n        error: null\n      }));\n    });\n    socket.on('whatsapp:qr', data => {\n      console.log('📱 WhatsAppContext: QR Code recebido (whatsapp:qr)', {\n        hasQrCode: !!data.qrCode,\n        type: typeof data.qrCode,\n        dataKeys: Object.keys(data)\n      });\n      setState(prev => ({\n        ...prev,\n        qrCode: data.qrCode,\n        status: 'qr',\n        connectionStatus: 'qr',\n        isConnecting: false,\n        loading: false,\n        error: null\n      }));\n    });\n    socket.on('ready', clientInfo => {\n      console.log('✅ WhatsAppContext: WhatsApp conectado!', clientInfo);\n      setState(prev => ({\n        ...prev,\n        status: 'connected',\n        isConnected: true,\n        connectionStatus: 'connected',\n        isConnecting: false,\n        qrCode: null,\n        clientInfo,\n        connectionInfo: clientInfo,\n        loading: false,\n        error: null\n      }));\n    });\n    socket.on('whatsapp:ready', data => {\n      console.log('✅ WhatsAppContext: WhatsApp conectado (whatsapp:ready)!', data);\n      setState(prev => ({\n        ...prev,\n        status: 'connected',\n        isConnected: true,\n        connectionStatus: 'connected',\n        isConnecting: false,\n        qrCode: null,\n        clientInfo: data.info,\n        connectionInfo: data.info,\n        loading: false,\n        error: null\n      }));\n    });\n    socket.on('whatsapp:authenticated', data => {\n      console.log('🔐 WhatsAppContext: WhatsApp autenticado:', data);\n      setState(prev => ({\n        ...prev,\n        status: 'connected',\n        isConnected: true,\n        connectionStatus: 'connected',\n        isConnecting: false,\n        qrCode: null,\n        clientInfo: data,\n        connectionInfo: data,\n        loading: false,\n        error: null\n      }));\n    });\n    socket.on('message', message => {\n      console.log('💬 WhatsAppContext: Nova mensagem:', message);\n      setState(prev => ({\n        ...prev,\n        messages: {\n          ...prev.messages,\n          [message.from]: [...(prev.messages[message.from] || []), {\n            ...message,\n            type: 'received'\n          }]\n        }\n      }));\n    });\n    socket.on('whatsapp:message_received', message => {\n      console.log('💬 WhatsAppContext: Nova mensagem recebida:', {\n        from: message.from,\n        hasBody: !!message.body,\n        hasMedia: !!message.hasMedia\n      });\n      setState(prev => ({\n        ...prev,\n        messages: {\n          ...prev.messages,\n          [message.from]: [...(prev.messages[message.from] || []), {\n            ...message,\n            type: 'received'\n          }]\n        }\n      }));\n    });\n    socket.on('whatsapp:message_sent', message => {\n      console.log('📤 WhatsAppContext: Mensagem enviada confirmada:', {\n        to: message.to,\n        hasBody: !!message.body\n      });\n      setState(prev => ({\n        ...prev,\n        messages: {\n          ...prev.messages,\n          [message.to]: [...(prev.messages[message.to] || []), {\n            ...message,\n            type: 'sent'\n          }]\n        }\n      }));\n    });\n    socket.on('disconnected', () => {\n      console.log('❌ WhatsAppContext: WhatsApp desconectado');\n      setState(prev => ({\n        ...prev,\n        status: 'disconnected',\n        isConnected: false,\n        connectionStatus: 'disconnected',\n        isConnecting: false,\n        qrCode: null,\n        clientInfo: null,\n        connectionInfo: null\n      }));\n    });\n    socket.on('whatsapp:disconnected', data => {\n      console.log('❌ WhatsAppContext: WhatsApp desconectado (whatsapp:disconnected):', data);\n      setState(prev => ({\n        ...prev,\n        status: 'disconnected',\n        isConnected: false,\n        connectionStatus: 'disconnected',\n        isConnecting: false,\n        qrCode: null,\n        clientInfo: null,\n        connectionInfo: null\n      }));\n    });\n    socket.on('error', error => {\n      console.error('❌ WhatsAppContext: Erro WhatsApp:', error);\n      setState(prev => ({\n        ...prev,\n        status: 'error',\n        connectionStatus: 'error',\n        isConnecting: false,\n        loading: false,\n        error: error.message || error || 'Erro desconhecido'\n      }));\n    });\n    socket.on('whatsapp:error', error => {\n      console.error('❌ WhatsAppContext: Erro WhatsApp (whatsapp:error):', error);\n      setState(prev => ({\n        ...prev,\n        status: 'error',\n        connectionStatus: 'error',\n        isConnecting: false,\n        loading: false,\n        error: error.message || error || 'Erro desconhecido'\n      }));\n    });\n\n    // ✅ EVENTOS DE AUTORIZAÇÃO\n    socket.on('connect_error', error => {\n      console.error('❌ WhatsAppContext: Erro de conexão:', error);\n      setState(prev => ({\n        ...prev,\n        status: 'error',\n        connectionStatus: 'error',\n        isConnecting: false,\n        loading: false,\n        error: 'Erro de conexão com servidor: ' + error.message\n      }));\n    });\n    socket.on('unauthorized', error => {\n      console.error('🔒 WhatsAppContext: Não autorizado:', error);\n      setState(prev => ({\n        ...prev,\n        status: 'error',\n        connectionStatus: 'error',\n        isConnecting: false,\n        loading: false,\n        error: 'Usuário não autorizado: ' + (error.message || error)\n      }));\n    });\n    socket.on('conversationUpdate', data => {\n      console.log('📋 WhatsAppContext: Conversas atualizadas');\n      if (data.chats) {\n        setState(prev => ({\n          ...prev,\n          conversations: data.chats\n        }));\n      }\n    });\n\n    // ✅ CLEANUP MELHORADO\n    return () => {\n      console.log('🔌 WhatsAppContext: Limpando socket...');\n      socket.disconnect();\n      setState(prev => ({\n        ...prev,\n        socket: null\n      }));\n    };\n  }, [isLoggedIn, user]); // ✅ REMOVIDO TOKEN DAS DEPENDÊNCIAS PARA EVITAR LOOP\n\n  // ====================================\n  // 🔗 CONECTAR WHATSAPP - VERSÃO CORRIGIDA MAS COMPLETA\n  // ====================================\n  const connectWhatsApp = useCallback(async () => {\n    var _state$socket2, _state$socket3;\n    console.log('🔄 WhatsAppContext: Iniciando conexão...');\n\n    // ✅ DEBUG COMPLETO DOS VALORES DE AUTENTICAÇÃO\n    console.log('🔍 CONNECT DEBUG - Valores de autenticação DETALHADOS:', {\n      isLoggedIn: isLoggedIn,\n      isLoggedInType: typeof isLoggedIn,\n      hasUser: !!user,\n      user: user ? {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      } : 'NULL USER',\n      hasToken: !!token,\n      token: token ? {\n        length: token.length,\n        preview: token.substring(0, 30) + '...',\n        type: typeof token\n      } : 'NULL TOKEN',\n      socketStatus: {\n        exists: !!state.socket,\n        connected: (_state$socket2 = state.socket) === null || _state$socket2 === void 0 ? void 0 : _state$socket2.connected,\n        id: (_state$socket3 = state.socket) === null || _state$socket3 === void 0 ? void 0 : _state$socket3.id\n      },\n      currentState: {\n        status: state.status,\n        isConnecting: state.isConnecting,\n        isConnected: state.isConnected\n      },\n      timestamp: new Date().toISOString()\n    });\n\n    // ✅ VERIFICAÇÃO SIMPLIFICADA - SEM TOKEN OBRIGATÓRIO\n    if (!isLoggedIn) {\n      const error = 'Usuário não está logado (isLoggedIn=false)';\n      console.error('❌ AUTH ERROR - isLoggedIn:', {\n        value: isLoggedIn,\n        type: typeof isLoggedIn,\n        user: (user === null || user === void 0 ? void 0 : user.email) || 'NO USER',\n        token: token ? 'EXISTS' : 'NULL'\n      });\n      setState(prev => ({\n        ...prev,\n        error\n      }));\n      throw new Error(error);\n    }\n    if (!user) {\n      const error = 'Dados do usuário não encontrados';\n      console.error('❌ AUTH ERROR - user:', {\n        value: user,\n        type: typeof user,\n        token: token ? 'EXISTS' : 'NULL',\n        isLoggedIn: isLoggedIn\n      });\n      setState(prev => ({\n        ...prev,\n        error\n      }));\n      throw new Error(error);\n    }\n\n    // ✅ TOKEN AGORA É OPCIONAL - NÃO BLOQUEIA A CONEXÃO\n    if (!token) {\n      console.warn('⚠️ AUTH WARNING - sem token, mas continuando:', {\n        value: token,\n        type: typeof token,\n        user: user === null || user === void 0 ? void 0 : user.email,\n        isLoggedIn: isLoggedIn\n      });\n\n      // Não bloqueia mais a conexão, apenas avisa\n    }\n\n    // ✅ VERIFICAR SOCKET COM RETRY\n    if (!state.socket) {\n      const error = 'Socket não inicializado - aguarde reconexão...';\n      console.error('❌ SOCKET ERROR:', {\n        socketExists: !!state.socket,\n        userAuth: {\n          isLoggedIn,\n          hasUser: !!user,\n          hasToken: !!token\n        }\n      });\n      setState(prev => ({\n        ...prev,\n        error\n      }));\n\n      // Tentar reinicializar socket\n      console.log('🔄 Tentando reinicializar socket...');\n      setTimeout(() => {\n        if (isLoggedIn && user) {\n          console.log('🔄 Relançando effect para recriar socket...');\n          // Forçar reexecução do effect\n          setState(prev => ({\n            ...prev,\n            socket: null\n          }));\n        }\n      }, 1000);\n      throw new Error(error);\n    }\n    if (!state.socket.connected) {\n      const error = 'Socket não conectado ao servidor - aguarde...';\n      console.error('❌ SOCKET CONNECTION ERROR:', {\n        socketExists: !!state.socket,\n        connected: state.socket.connected,\n        readyState: state.socket.readyState\n      });\n      setState(prev => ({\n        ...prev,\n        error\n      }));\n\n      // Aguardar conexão\n      setTimeout(() => {\n        if (state.socket && state.socket.connected) {\n          console.log('🔄 Socket reconectado, tentando novamente...');\n          connectWhatsApp();\n        }\n      }, 2000);\n      throw new Error(error);\n    }\n    if (state.isConnecting) {\n      console.log('⚠️ WhatsAppContext: Já está conectando, ignorando...');\n      return;\n    }\n\n    // ✅ INÍCIO DA CONEXÃO\n    setState(prev => ({\n      ...prev,\n      status: 'connecting',\n      connectionStatus: 'connecting',\n      isConnecting: true,\n      loading: true,\n      error: null,\n      qrCode: null\n    }));\n    try {\n      console.log('🚀 WhatsAppContext: Enviando comandos de conexão...');\n      const connectionData = {\n        userId: user.id,\n        userEmail: user.email,\n        userName: user.name,\n        userRole: user.role,\n        token: token || `temp_token_${Date.now()}`,\n        // ✅ FALLBACK TOKEN\n        timestamp: Date.now()\n      };\n      console.log('📤 Dados de conexão:', connectionData);\n\n      // ✅ ENVIAR AMBOS OS COMANDOS PARA MÁXIMA COMPATIBILIDADE\n      state.socket.emit('startWhatsApp', connectionData);\n      state.socket.emit('whatsapp:connect', connectionData);\n      console.log('✅ WhatsAppContext: Comandos de conexão enviados');\n      console.log('⏳ Aguardando resposta do servidor...');\n\n      // ✅ TIMEOUT PARA EVITAR TRAVAMENTO\n      setTimeout(() => {\n        if (state.isConnecting && state.status === 'connecting') {\n          console.log('⏰ Timeout na conexão, verificando status...');\n          setState(prev => {\n            if (prev.isConnecting && prev.status === 'connecting') {\n              return {\n                ...prev,\n                error: 'Timeout na conexão - servidor não respondeu em 30s',\n                isConnecting: false,\n                status: 'error',\n                loading: false\n              };\n            }\n            return prev;\n          });\n        }\n      }, 30000); // 30 segundos timeout\n    } catch (error) {\n      console.error('❌ WhatsAppContext: Erro ao enviar comando:', error);\n      setState(prev => ({\n        ...prev,\n        status: 'error',\n        connectionStatus: 'error',\n        isConnecting: false,\n        loading: false,\n        error: `Erro ao conectar: ${error.message}`\n      }));\n      throw error;\n    }\n  }, [state.socket, state.isConnecting, state.status, isLoggedIn, user, token]); // ✅ ADICIONADO TOKEN DE VOLTA MAS SEM SER OBRIGATÓRIO\n\n  // Alias para compatibilidade\n  const connect = connectWhatsApp;\n\n  // ====================================\n  // ❌ DESCONECTAR WHATSAPP\n  // ====================================\n  const disconnectWhatsApp = useCallback(async () => {\n    console.log('🔄 WhatsAppContext: Desconectando...');\n    if (!state.socket) {\n      console.log('⚠️ WhatsAppContext: Socket não conectado');\n      return;\n    }\n    try {\n      // ENVIAR AMBOS OS COMANDOS PARA COMPATIBILIDADE\n      state.socket.emit('stopWhatsApp');\n      state.socket.emit('whatsapp:disconnect');\n      setState(prev => ({\n        ...prev,\n        status: 'disconnected',\n        isConnected: false,\n        connectionStatus: 'disconnected',\n        isConnecting: false,\n        loading: false,\n        qrCode: null,\n        clientInfo: null,\n        connectionInfo: null,\n        conversations: [],\n        messages: {}\n      }));\n      console.log('✅ WhatsAppContext: Desconectado com sucesso');\n    } catch (error) {\n      console.error('❌ WhatsAppContext: Erro ao desconectar:', error);\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }));\n      throw error;\n    }\n  }, [state.socket]);\n\n  // Alias para compatibilidade\n  const disconnect = disconnectWhatsApp;\n\n  // ====================================\n  // 🔄 REFRESH CONEXÃO\n  // ====================================\n  const refreshConnection = useCallback(async () => {\n    console.log('🔄 WhatsAppContext: Refresh conexão...');\n    if (!isLoggedIn) {\n      console.log('⚠️ WhatsAppContext: Usuário não autenticado para refresh');\n      return;\n    }\n    try {\n      if (state.status === 'connected' || state.isConnected) {\n        await disconnectWhatsApp();\n        setTimeout(() => {\n          connectWhatsApp();\n        }, 1000);\n      } else {\n        await connectWhatsApp();\n      }\n    } catch (error) {\n      console.error('❌ WhatsAppContext: Erro ao refresh:', error);\n      setState(prev => ({\n        ...prev,\n        error: error.message\n      }));\n    }\n  }, [state.status, state.isConnected, connectWhatsApp, disconnectWhatsApp, isLoggedIn]);\n\n  // ====================================\n  // 📤 ENVIAR MENSAGEM\n  // ====================================\n  const sendMessage = useCallback(async (to, message) => {\n    console.log('📤 WhatsAppContext: Enviando mensagem...', {\n      to,\n      messageLength: message === null || message === void 0 ? void 0 : message.length,\n      userAuthenticated: isLoggedIn\n    });\n    if (!isLoggedIn) {\n      const error = 'Usuário não autenticado para enviar mensagem';\n      console.error('❌', error);\n      throw new Error(error);\n    }\n    if (!state.socket || !state.isConnected && state.status !== 'connected') {\n      const error = 'WhatsApp não conectado para enviar mensagem';\n      console.error('❌', error, {\n        hasSocket: !!state.socket,\n        isConnected: state.isConnected,\n        status: state.status\n      });\n      throw new Error(error);\n    }\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error('Timeout ao enviar mensagem (30s)'));\n      }, 30000);\n      const messageData = {\n        to,\n        message,\n        userId: user === null || user === void 0 ? void 0 : user.id,\n        timestamp: Date.now()\n      };\n      console.log('📤 Enviando dados da mensagem:', messageData);\n\n      // Listener para resposta\n      const handleResponse = response => {\n        clearTimeout(timeout);\n        console.log('📨 Resposta do servidor:', response);\n        if (response !== null && response !== void 0 && response.success) {\n          console.log('✅ WhatsAppContext: Mensagem enviada com sucesso');\n\n          // Adicionar mensagem ao estado\n          setState(prev => ({\n            ...prev,\n            messages: {\n              ...prev.messages,\n              [to]: [...(prev.messages[to] || []), {\n                id: response.messageId || Date.now(),\n                body: message,\n                fromMe: true,\n                timestamp: Date.now(),\n                type: 'sent'\n              }]\n            }\n          }));\n          resolve(response);\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.error) || 'Erro desconhecido ao enviar mensagem';\n          console.error('❌ WhatsAppContext: Erro ao enviar mensagem:', errorMsg);\n          reject(new Error(errorMsg));\n        }\n      };\n\n      // Tentar o evento original primeiro\n      state.socket.emit('sendMessage', messageData, handleResponse);\n\n      // Fallback para evento alternativo\n      setTimeout(() => {\n        state.socket.emit('whatsapp:send', messageData, handleResponse);\n      }, 5000);\n    });\n  }, [state.socket, state.status, state.isConnected, isLoggedIn, user]);\n\n  // ====================================\n  // 📁 ENVIAR MÍDIA\n  // ====================================\n  const sendMedia = useCallback(async (to, file, caption = '') => {\n    console.log('📁 WhatsAppContext: Enviando mídia...', {\n      to,\n      caption,\n      fileType: file === null || file === void 0 ? void 0 : file.type\n    });\n    if (!isLoggedIn) {\n      const error = 'Usuário não autenticado para enviar mídia';\n      console.error('❌', error);\n      throw new Error(error);\n    }\n    if (!state.socket || !state.isConnected && state.status !== 'connected') {\n      const error = 'WhatsApp não conectado para enviar mídia';\n      console.error('❌', error);\n      throw new Error(error);\n    }\n\n    // Convert file to base64 if it's a File object\n    let fileData;\n    if (file instanceof File) {\n      console.log('📁 Convertendo arquivo para base64...', {\n        name: file.name,\n        size: file.size,\n        type: file.type\n      });\n      fileData = await new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => {\n          resolve({\n            data: e.target.result,\n            mimetype: file.type,\n            filename: file.name\n          });\n        };\n        reader.onerror = error => {\n          console.error('❌ Erro ao ler arquivo:', error);\n          reject(error);\n        };\n        reader.readAsDataURL(file);\n      });\n    } else {\n      fileData = file;\n    }\n    return new Promise((resolve, reject) => {\n      var _mediaData$media, _mediaData$media2;\n      const timeout = setTimeout(() => {\n        reject(new Error('Timeout ao enviar mídia (60s)'));\n      }, 60000);\n      const mediaData = {\n        to,\n        media: fileData,\n        caption,\n        userId: user === null || user === void 0 ? void 0 : user.id,\n        timestamp: Date.now()\n      };\n      console.log('📁 Enviando dados da mídia:', {\n        to: mediaData.to,\n        caption: mediaData.caption,\n        userId: mediaData.userId,\n        mediaType: (_mediaData$media = mediaData.media) === null || _mediaData$media === void 0 ? void 0 : _mediaData$media.mimetype,\n        mediaFilename: (_mediaData$media2 = mediaData.media) === null || _mediaData$media2 === void 0 ? void 0 : _mediaData$media2.filename\n      });\n      const handleResponse = response => {\n        clearTimeout(timeout);\n        console.log('📨 Resposta do servidor (mídia):', response);\n        if (response !== null && response !== void 0 && response.success) {\n          console.log('✅ WhatsAppContext: Mídia enviada com sucesso');\n          resolve(response);\n        } else {\n          const errorMsg = (response === null || response === void 0 ? void 0 : response.error) || 'Erro desconhecido ao enviar mídia';\n          console.error('❌ WhatsAppContext: Erro ao enviar mídia:', errorMsg);\n          reject(new Error(errorMsg));\n        }\n      };\n\n      // Tentar eventos de mídia\n      state.socket.emit('sendMedia', mediaData, handleResponse);\n      setTimeout(() => {\n        state.socket.emit('whatsapp:sendMedia', mediaData, handleResponse);\n      }, 5000);\n    });\n  }, [state.socket, state.status, state.isConnected, isLoggedIn, user]);\n\n  // ====================================\n  // 📂 OBTER CONVERSAS\n  // ====================================\n  const loadConversations = useCallback(() => {\n    console.log('📂 WhatsAppContext: Carregando conversas...');\n    if (!state.socket || !state.isConnected && state.status !== 'connected') {\n      console.log('⚠️ WhatsAppContext: Não conectado para carregar conversas');\n      return;\n    }\n    const handleResponse = response => {\n      console.log('📨 Resposta conversas:', response);\n      if (response !== null && response !== void 0 && response.success) {\n        var _response$chats;\n        console.log(`✅ WhatsAppContext: ${((_response$chats = response.chats) === null || _response$chats === void 0 ? void 0 : _response$chats.length) || 0} conversas carregadas`);\n        setState(prev => ({\n          ...prev,\n          conversations: response.chats || []\n        }));\n      } else {\n        console.log('⚠️ WhatsAppContext: Erro ao carregar conversas:', response === null || response === void 0 ? void 0 : response.error);\n      }\n    };\n\n    // Tentar ambos os eventos\n    state.socket.emit('getChats', handleResponse);\n    setTimeout(() => {\n      state.socket.emit('whatsapp:getChats', handleResponse);\n    }, 2000);\n  }, [state.socket, state.status, state.isConnected]);\n\n  // ====================================\n  // 🗑️ LIMPAR ERRO\n  // ====================================\n  const clearError = useCallback(() => {\n    console.log('🗑️ WhatsAppContext: Limpando erro...');\n    setState(prev => ({\n      ...prev,\n      error: null\n    }));\n  }, []);\n\n  // ====================================\n  // 📊 OBTER STATUS\n  // ====================================\n  const getStatus = useCallback(() => {\n    var _state$socket4, _state$socket5;\n    const status = {\n      isConnected: state.status === 'connected' || state.isConnected,\n      connectionStatus: state.status,\n      hasQRCode: !!state.qrCode,\n      conversationsCount: state.conversations.length,\n      totalMessages: Object.values(state.messages).reduce((total, msgs) => total + msgs.length, 0),\n      clientInfo: state.clientInfo,\n      isAuthenticated: isLoggedIn,\n      user: user,\n      socket: {\n        exists: !!state.socket,\n        connected: (_state$socket4 = state.socket) === null || _state$socket4 === void 0 ? void 0 : _state$socket4.connected,\n        id: (_state$socket5 = state.socket) === null || _state$socket5 === void 0 ? void 0 : _state$socket5.id\n      },\n      timestamp: new Date().toISOString()\n    };\n    console.log('📊 Status atual:', status);\n    return status;\n  }, [state, isLoggedIn, user]);\n\n  // ====================================\n  // 📦 VALOR DO CONTEXTO - COMPLETO\n  // ====================================\n  const contextValue = {\n    // Estados que o ConnectionPage espera\n    status: state.status,\n    qrCode: state.qrCode,\n    isConnecting: state.isConnecting,\n    connectionInfo: state.connectionInfo,\n    error: state.error,\n    // Estados adicionais completos\n    isConnected: state.status === 'connected' || state.isConnected,\n    connectionStatus: state.status,\n    conversations: state.conversations,\n    messages: state.messages,\n    activeConversation: state.activeConversation,\n    clientInfo: state.clientInfo,\n    loading: state.loading,\n    // Estados de autenticação\n    isAuthenticated: isLoggedIn,\n    user,\n    // Funções que o ConnectionPage espera\n    connectWhatsApp,\n    disconnectWhatsApp,\n    refreshConnection,\n    clearError,\n    // Aliases para compatibilidade\n    connect,\n    disconnect,\n    // Funções adicionais completas\n    sendMessage,\n    sendMedia,\n    loadConversations,\n    getStatus\n  };\n  return /*#__PURE__*/_jsxDEV(WhatsAppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 961,\n    columnNumber: 5\n  }, this);\n};\n\n// ====================================\n// 🪝 HOOK PARA USAR O CONTEXTO\n// ====================================\n_s(WhatsAppProvider, \"gQkqOU9Bs/dEpNUDQa1djtfYDbY=\", false, function () {\n  return [useAuth];\n});\n_c = WhatsAppProvider;\nexport const useWhatsApp = () => {\n  _s2();\n  const context = useContext(WhatsAppContext);\n  if (!context) {\n    throw new Error('useWhatsApp deve ser usado dentro de WhatsAppProvider');\n  }\n  return context;\n};\n_s2(useWhatsApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default WhatsAppContext;\nvar _c;\n$RefreshReg$(_c, \"WhatsAppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","io","useAuth","jsxDEV","_jsxDEV","WhatsAppContext","WhatsAppProvider","children","_s","isLoggedIn","user","token","state","setState","status","qrCode","isConnecting","connectionInfo","error","isConnected","connectionStatus","conversations","messages","activeConversation","socket","clientInfo","loading","console","log","hasUser","userEmail","email","userId","id","hasToken","tokenLength","length","timestamp","Date","toLocaleTimeString","_state$socket","socketExists","socketConnected","connected","userDetails","name","disconnect","prev","tokenPreview","substring","socketUrl","process","env","REACT_APP_SOCKET_URL","transports","upgrade","rememberUpgrade","forceNew","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","maxReconnectionAttempts","timeout","auth","now","query","userRole","role","on","_prev$error","includes","reason","_qrCode$substring","type","preview","call","data","hasQrCode","dataKeys","Object","keys","info","message","from","hasBody","body","hasMedia","to","chats","connectWhatsApp","_state$socket2","_state$socket3","isLoggedInType","socketStatus","exists","currentState","toISOString","value","Error","warn","userAuth","setTimeout","readyState","connectionData","userName","emit","connect","disconnectWhatsApp","refreshConnection","sendMessage","messageLength","userAuthenticated","hasSocket","Promise","resolve","reject","messageData","handleResponse","response","clearTimeout","success","messageId","fromMe","errorMsg","sendMedia","file","caption","fileType","fileData","File","size","reader","FileReader","onload","e","target","result","mimetype","filename","onerror","readAsDataURL","_mediaData$media","_mediaData$media2","mediaData","media","mediaType","mediaFilename","loadConversations","_response$chats","clearError","getStatus","_state$socket4","_state$socket5","hasQRCode","conversationsCount","totalMessages","values","reduce","total","msgs","isAuthenticated","contextValue","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWhatsApp","_s2","context","$RefreshReg$"],"sources":["C:/Users/david/Desktop/whatsapp_sistem/client/src/contexts/WhatsAppContext.js"],"sourcesContent":["// client/src/contexts/WhatsAppContext.js\r\n// ====================================\r\n// 🔗 WHATSAPP CONTEXT - VERSÃO COMPLETA COM CORREÇÕES PONTUAIS\r\n// Mantém todas as funcionalidades + correções específicas no erro de token\r\n// ====================================\r\n\r\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst WhatsAppContext = createContext();\r\n\r\n// ====================================\r\n// 🚀 WHATSAPP PROVIDER - VERSÃO COMPLETA CORRIGIDA\r\n// ====================================\r\nexport const WhatsAppProvider = ({ children }) => {\r\n  const { isLoggedIn, user, token } = useAuth(); // ← INTEGRAÇÃO COM AUTH\r\n  \r\n  const [state, setState] = useState({\r\n    // Estados que o ConnectionPage espera\r\n    status: 'disconnected', // disconnected, connecting, qr, connected, error\r\n    qrCode: null,\r\n    isConnecting: false,\r\n    connectionInfo: null,\r\n    error: null,\r\n    \r\n    // Estados adicionais completos\r\n    isConnected: false,\r\n    connectionStatus: 'disconnected',\r\n    conversations: [],\r\n    messages: {},\r\n    activeConversation: null,\r\n    socket: null,\r\n    clientInfo: null,\r\n    loading: false\r\n  });\r\n\r\n  // ====================================\r\n  // 🔍 DEBUG CONTÍNUO DE AUTENTICAÇÃO\r\n  // ====================================\r\n  useEffect(() => {\r\n    console.log('🔍 WhatsApp AUTH STATUS UPDATE:', {\r\n      isLoggedIn,\r\n      hasUser: !!user,\r\n      userEmail: user?.email,\r\n      userId: user?.id,\r\n      hasToken: !!token,\r\n      tokenLength: token?.length,\r\n      timestamp: new Date().toLocaleTimeString()\r\n    });\r\n  }, [isLoggedIn, user, token]);\r\n\r\n  // ====================================\r\n  // 🔌 CONFIGURAR SOCKET.IO - CORRIGIDO PARA EVITAR LOOPS\r\n  // ====================================\r\n  useEffect(() => {\r\n    console.log('🔌 Socket Effect Triggered:', {\r\n      isLoggedIn,\r\n      hasUser: !!user,\r\n      hasToken: !!token,\r\n      socketExists: !!state.socket,\r\n      socketConnected: state.socket?.connected\r\n    });\r\n\r\n    // ✅ VERIFICAÇÃO SIMPLIFICADA - APENAS isLoggedIn E user\r\n    if (!isLoggedIn || !user) {\r\n      console.log('⚠️ WhatsAppContext: Usuário não completamente autenticado');\r\n      console.log('📊 Auth Details:', {\r\n        isLoggedIn: isLoggedIn,\r\n        hasToken: !!token,\r\n        hasUser: !!user,\r\n        userDetails: user ? {\r\n          id: user.id,\r\n          email: user.email,\r\n          name: user.name\r\n        } : 'NO USER'\r\n      });\r\n      \r\n      // Limpar socket se existir\r\n      if (state.socket) {\r\n        console.log('🔌 WhatsAppContext: Desconectando socket existente...');\r\n        state.socket.disconnect();\r\n        setState(prev => ({ \r\n          ...prev, \r\n          socket: null, \r\n          status: 'disconnected',\r\n          isConnected: false,\r\n          connectionStatus: 'disconnected',\r\n          qrCode: null,\r\n          clientInfo: null,\r\n          connectionInfo: null,\r\n          conversations: [],\r\n          messages: {},\r\n          activeConversation: null,\r\n          loading: false,\r\n          isConnecting: false,\r\n          error: null\r\n        }));\r\n      }\r\n      \r\n      return;\r\n    }\r\n\r\n    // ✅ VERIFICAR SE JÁ TEM SOCKET CONECTADO\r\n    if (state.socket && state.socket.connected) {\r\n      console.log('🔌 WhatsAppContext: Socket já conectado, reutilizando...');\r\n      return;\r\n    }\r\n\r\n    console.log('🔌 WhatsAppContext: Configurando Socket.IO para usuário autenticado...', {\r\n      user: user.email,\r\n      userId: user.id,\r\n      hasToken: !!token,\r\n      tokenPreview: token ? token.substring(0, 30) + '...' : 'NO TOKEN'\r\n    });\r\n    \r\n    // ✅ USAR VARIÁVEIS DE AMBIENTE\r\n    const socketUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:3001';\r\n    \r\n    // 🔧 CORREÇÃO CRÍTICA: CONFIGURAÇÃO SOCKET.IO APENAS COM POLLING\r\n    const socket = io(socketUrl, {\r\n      // 🎯 CORREÇÃO PRINCIPAL: Apenas polling, sem websocket\r\n      transports: ['polling'],\r\n      upgrade: false,\r\n      rememberUpgrade: false,\r\n      forceNew: true,\r\n      \r\n      // 🔄 Configurações de reconexão\r\n      reconnectionAttempts: 10,\r\n      reconnectionDelay: 1000,\r\n      reconnectionDelayMax: 5000,\r\n      maxReconnectionAttempts: 10,\r\n      timeout: 20000,\r\n      \r\n      // ✅ ADICIONAR TOKEN DE AUTENTICAÇÃO (MAS NÃO OBRIGATÓRIO)\r\n      auth: {\r\n        token: token || `fallback_token_${Date.now()}`,\r\n        userId: user.id,\r\n        userEmail: user.email\r\n      },\r\n      // ✅ ADICIONAR QUERY PARAMS PARA AUTENTICAÇÃO\r\n      query: {\r\n        userId: user.id,\r\n        userRole: user.role || 'user'\r\n      }\r\n    });\r\n\r\n    setState(prev => ({ ...prev, socket }));\r\n\r\n    // ====================================\r\n    // 📡 EVENT LISTENERS COMPLETOS\r\n    // ====================================\r\n    \r\n    socket.on('connect', () => {\r\n      console.log('✅ WhatsAppContext: Socket conectado para usuário:', user.email);\r\n      console.log('🔌 Socket ID:', socket.id);\r\n      \r\n      // Limpar erros de conexão\r\n      setState(prev => ({\r\n        ...prev,\r\n        error: prev.error?.includes('conexão') ? null : prev.error\r\n      }));\r\n    });\r\n\r\n    socket.on('disconnect', (reason) => {\r\n      console.log('❌ WhatsAppContext: Socket desconectado:', reason);\r\n      setState(prev => ({\r\n        ...prev,\r\n        status: 'disconnected',\r\n        isConnected: false,\r\n        connectionStatus: 'disconnected',\r\n        qrCode: null,\r\n        isConnecting: false,\r\n        connectionInfo: null,\r\n        clientInfo: null\r\n      }));\r\n    });\r\n\r\n    // ✅ EVENTOS WHATSAPP COMPLETOS - COMPATÍVEIS COM CÓDIGO ORIGINAL\r\n    socket.on('qr', (qrCode) => {\r\n      console.log('📱 WhatsAppContext: QR Code recebido', {\r\n        type: typeof qrCode,\r\n        length: qrCode?.length,\r\n        preview: qrCode?.substring?.(0, 50)\r\n      });\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        qrCode,\r\n        status: 'qr',\r\n        connectionStatus: 'qr',\r\n        isConnecting: false,\r\n        loading: false,\r\n        error: null\r\n      }));\r\n    });\r\n\r\n    socket.on('whatsapp:qr', (data) => {\r\n      console.log('📱 WhatsAppContext: QR Code recebido (whatsapp:qr)', {\r\n        hasQrCode: !!data.qrCode,\r\n        type: typeof data.qrCode,\r\n        dataKeys: Object.keys(data)\r\n      });\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        qrCode: data.qrCode,\r\n        status: 'qr',\r\n        connectionStatus: 'qr',\r\n        isConnecting: false,\r\n        loading: false,\r\n        error: null\r\n      }));\r\n    });\r\n\r\n    socket.on('ready', (clientInfo) => {\r\n      console.log('✅ WhatsAppContext: WhatsApp conectado!', clientInfo);\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        status: 'connected',\r\n        isConnected: true,\r\n        connectionStatus: 'connected',\r\n        isConnecting: false,\r\n        qrCode: null,\r\n        clientInfo,\r\n        connectionInfo: clientInfo,\r\n        loading: false,\r\n        error: null\r\n      }));\r\n    });\r\n\r\n    socket.on('whatsapp:ready', (data) => {\r\n      console.log('✅ WhatsAppContext: WhatsApp conectado (whatsapp:ready)!', data);\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        status: 'connected',\r\n        isConnected: true,\r\n        connectionStatus: 'connected',\r\n        isConnecting: false,\r\n        qrCode: null,\r\n        clientInfo: data.info,\r\n        connectionInfo: data.info,\r\n        loading: false,\r\n        error: null\r\n      }));\r\n    });\r\n\r\n    socket.on('whatsapp:authenticated', (data) => {\r\n      console.log('🔐 WhatsAppContext: WhatsApp autenticado:', data);\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        status: 'connected',\r\n        isConnected: true,\r\n        connectionStatus: 'connected',\r\n        isConnecting: false,\r\n        qrCode: null,\r\n        clientInfo: data,\r\n        connectionInfo: data,\r\n        loading: false,\r\n        error: null\r\n      }));\r\n    });\r\n\r\n    socket.on('message', (message) => {\r\n      console.log('💬 WhatsAppContext: Nova mensagem:', message);\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        messages: {\r\n          ...prev.messages,\r\n          [message.from]: [...(prev.messages[message.from] || []), {\r\n            ...message,\r\n            type: 'received'\r\n          }]\r\n        }\r\n      }));\r\n    });\r\n\r\n    socket.on('whatsapp:message_received', (message) => {\r\n      console.log('💬 WhatsAppContext: Nova mensagem recebida:', {\r\n        from: message.from,\r\n        hasBody: !!message.body,\r\n        hasMedia: !!message.hasMedia\r\n      });\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        messages: {\r\n          ...prev.messages,\r\n          [message.from]: [...(prev.messages[message.from] || []), {\r\n            ...message,\r\n            type: 'received'\r\n          }]\r\n        }\r\n      }));\r\n    });\r\n\r\n    socket.on('whatsapp:message_sent', (message) => {\r\n      console.log('📤 WhatsAppContext: Mensagem enviada confirmada:', {\r\n        to: message.to,\r\n        hasBody: !!message.body\r\n      });\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        messages: {\r\n          ...prev.messages,\r\n          [message.to]: [...(prev.messages[message.to] || []), {\r\n            ...message,\r\n            type: 'sent'\r\n          }]\r\n        }\r\n      }));\r\n    });\r\n\r\n    socket.on('disconnected', () => {\r\n      console.log('❌ WhatsAppContext: WhatsApp desconectado');\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        status: 'disconnected',\r\n        isConnected: false,\r\n        connectionStatus: 'disconnected',\r\n        isConnecting: false,\r\n        qrCode: null,\r\n        clientInfo: null,\r\n        connectionInfo: null\r\n      }));\r\n    });\r\n\r\n    socket.on('whatsapp:disconnected', (data) => {\r\n      console.log('❌ WhatsAppContext: WhatsApp desconectado (whatsapp:disconnected):', data);\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        status: 'disconnected',\r\n        isConnected: false,\r\n        connectionStatus: 'disconnected',\r\n        isConnecting: false,\r\n        qrCode: null,\r\n        clientInfo: null,\r\n        connectionInfo: null\r\n      }));\r\n    });\r\n\r\n    socket.on('error', (error) => {\r\n      console.error('❌ WhatsAppContext: Erro WhatsApp:', error);\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        status: 'error',\r\n        connectionStatus: 'error',\r\n        isConnecting: false,\r\n        loading: false,\r\n        error: error.message || error || 'Erro desconhecido'\r\n      }));\r\n    });\r\n\r\n    socket.on('whatsapp:error', (error) => {\r\n      console.error('❌ WhatsAppContext: Erro WhatsApp (whatsapp:error):', error);\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        status: 'error',\r\n        connectionStatus: 'error',\r\n        isConnecting: false,\r\n        loading: false,\r\n        error: error.message || error || 'Erro desconhecido'\r\n      }));\r\n    });\r\n\r\n    // ✅ EVENTOS DE AUTORIZAÇÃO\r\n    socket.on('connect_error', (error) => {\r\n      console.error('❌ WhatsAppContext: Erro de conexão:', error);\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        status: 'error',\r\n        connectionStatus: 'error',\r\n        isConnecting: false,\r\n        loading: false,\r\n        error: 'Erro de conexão com servidor: ' + error.message\r\n      }));\r\n    });\r\n\r\n    socket.on('unauthorized', (error) => {\r\n      console.error('🔒 WhatsAppContext: Não autorizado:', error);\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        status: 'error',\r\n        connectionStatus: 'error',\r\n        isConnecting: false,\r\n        loading: false,\r\n        error: 'Usuário não autorizado: ' + (error.message || error)\r\n      }));\r\n    });\r\n\r\n    socket.on('conversationUpdate', (data) => {\r\n      console.log('📋 WhatsAppContext: Conversas atualizadas');\r\n      \r\n      if (data.chats) {\r\n        setState(prev => ({\r\n          ...prev,\r\n          conversations: data.chats\r\n        }));\r\n      }\r\n    });\r\n\r\n    // ✅ CLEANUP MELHORADO\r\n    return () => {\r\n      console.log('🔌 WhatsAppContext: Limpando socket...');\r\n      socket.disconnect();\r\n      setState(prev => ({ ...prev, socket: null }));\r\n    };\r\n  }, [isLoggedIn, user]); // ✅ REMOVIDO TOKEN DAS DEPENDÊNCIAS PARA EVITAR LOOP\r\n\r\n  // ====================================\r\n  // 🔗 CONECTAR WHATSAPP - VERSÃO CORRIGIDA MAS COMPLETA\r\n  // ====================================\r\n  const connectWhatsApp = useCallback(async () => {\r\n    console.log('🔄 WhatsAppContext: Iniciando conexão...');\r\n    \r\n    // ✅ DEBUG COMPLETO DOS VALORES DE AUTENTICAÇÃO\r\n    console.log('🔍 CONNECT DEBUG - Valores de autenticação DETALHADOS:', {\r\n      isLoggedIn: isLoggedIn,\r\n      isLoggedInType: typeof isLoggedIn,\r\n      hasUser: !!user,\r\n      user: user ? {\r\n        id: user.id,\r\n        email: user.email,\r\n        name: user.name,\r\n        role: user.role\r\n      } : 'NULL USER',\r\n      hasToken: !!token,\r\n      token: token ? {\r\n        length: token.length,\r\n        preview: token.substring(0, 30) + '...',\r\n        type: typeof token\r\n      } : 'NULL TOKEN',\r\n      socketStatus: {\r\n        exists: !!state.socket,\r\n        connected: state.socket?.connected,\r\n        id: state.socket?.id\r\n      },\r\n      currentState: {\r\n        status: state.status,\r\n        isConnecting: state.isConnecting,\r\n        isConnected: state.isConnected\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    });\r\n\r\n    // ✅ VERIFICAÇÃO SIMPLIFICADA - SEM TOKEN OBRIGATÓRIO\r\n    if (!isLoggedIn) {\r\n      const error = 'Usuário não está logado (isLoggedIn=false)';\r\n      console.error('❌ AUTH ERROR - isLoggedIn:', {\r\n        value: isLoggedIn,\r\n        type: typeof isLoggedIn,\r\n        user: user?.email || 'NO USER',\r\n        token: token ? 'EXISTS' : 'NULL'\r\n      });\r\n      setState(prev => ({ ...prev, error }));\r\n      throw new Error(error);\r\n    }\r\n\r\n    if (!user) {\r\n      const error = 'Dados do usuário não encontrados';\r\n      console.error('❌ AUTH ERROR - user:', {\r\n        value: user,\r\n        type: typeof user,\r\n        token: token ? 'EXISTS' : 'NULL',\r\n        isLoggedIn: isLoggedIn\r\n      });\r\n      setState(prev => ({ ...prev, error }));\r\n      throw new Error(error);\r\n    }\r\n\r\n    // ✅ TOKEN AGORA É OPCIONAL - NÃO BLOQUEIA A CONEXÃO\r\n    if (!token) {\r\n      console.warn('⚠️ AUTH WARNING - sem token, mas continuando:', {\r\n        value: token,\r\n        type: typeof token,\r\n        user: user?.email,\r\n        isLoggedIn: isLoggedIn\r\n      });\r\n      \r\n      // Não bloqueia mais a conexão, apenas avisa\r\n    }\r\n    \r\n    // ✅ VERIFICAR SOCKET COM RETRY\r\n    if (!state.socket) {\r\n      const error = 'Socket não inicializado - aguarde reconexão...';\r\n      console.error('❌ SOCKET ERROR:', {\r\n        socketExists: !!state.socket,\r\n        userAuth: {\r\n          isLoggedIn,\r\n          hasUser: !!user,\r\n          hasToken: !!token\r\n        }\r\n      });\r\n      setState(prev => ({ ...prev, error }));\r\n      \r\n      // Tentar reinicializar socket\r\n      console.log('🔄 Tentando reinicializar socket...');\r\n      setTimeout(() => {\r\n        if (isLoggedIn && user) {\r\n          console.log('🔄 Relançando effect para recriar socket...');\r\n          // Forçar reexecução do effect\r\n          setState(prev => ({ ...prev, socket: null }));\r\n        }\r\n      }, 1000);\r\n      \r\n      throw new Error(error);\r\n    }\r\n\r\n    if (!state.socket.connected) {\r\n      const error = 'Socket não conectado ao servidor - aguarde...';\r\n      console.error('❌ SOCKET CONNECTION ERROR:', {\r\n        socketExists: !!state.socket,\r\n        connected: state.socket.connected,\r\n        readyState: state.socket.readyState\r\n      });\r\n      setState(prev => ({ ...prev, error }));\r\n      \r\n      // Aguardar conexão\r\n      setTimeout(() => {\r\n        if (state.socket && state.socket.connected) {\r\n          console.log('🔄 Socket reconectado, tentando novamente...');\r\n          connectWhatsApp();\r\n        }\r\n      }, 2000);\r\n      \r\n      throw new Error(error);\r\n    }\r\n\r\n    if (state.isConnecting) {\r\n      console.log('⚠️ WhatsAppContext: Já está conectando, ignorando...');\r\n      return;\r\n    }\r\n\r\n    // ✅ INÍCIO DA CONEXÃO\r\n    setState(prev => ({\r\n      ...prev,\r\n      status: 'connecting',\r\n      connectionStatus: 'connecting',\r\n      isConnecting: true,\r\n      loading: true,\r\n      error: null,\r\n      qrCode: null\r\n    }));\r\n\r\n    try {\r\n      console.log('🚀 WhatsAppContext: Enviando comandos de conexão...');\r\n      \r\n      const connectionData = {\r\n        userId: user.id,\r\n        userEmail: user.email,\r\n        userName: user.name,\r\n        userRole: user.role,\r\n        token: token || `temp_token_${Date.now()}`, // ✅ FALLBACK TOKEN\r\n        timestamp: Date.now()\r\n      };\r\n\r\n      console.log('📤 Dados de conexão:', connectionData);\r\n      \r\n      // ✅ ENVIAR AMBOS OS COMANDOS PARA MÁXIMA COMPATIBILIDADE\r\n      state.socket.emit('startWhatsApp', connectionData);\r\n      state.socket.emit('whatsapp:connect', connectionData);\r\n      \r\n      console.log('✅ WhatsAppContext: Comandos de conexão enviados');\r\n      console.log('⏳ Aguardando resposta do servidor...');\r\n      \r\n      // ✅ TIMEOUT PARA EVITAR TRAVAMENTO\r\n      setTimeout(() => {\r\n        if (state.isConnecting && state.status === 'connecting') {\r\n          console.log('⏰ Timeout na conexão, verificando status...');\r\n          setState(prev => {\r\n            if (prev.isConnecting && prev.status === 'connecting') {\r\n              return {\r\n                ...prev,\r\n                error: 'Timeout na conexão - servidor não respondeu em 30s',\r\n                isConnecting: false,\r\n                status: 'error',\r\n                loading: false\r\n              };\r\n            }\r\n            return prev;\r\n          });\r\n        }\r\n      }, 30000); // 30 segundos timeout\r\n      \r\n    } catch (error) {\r\n      console.error('❌ WhatsAppContext: Erro ao enviar comando:', error);\r\n      setState(prev => ({\r\n        ...prev,\r\n        status: 'error',\r\n        connectionStatus: 'error',\r\n        isConnecting: false,\r\n        loading: false,\r\n        error: `Erro ao conectar: ${error.message}`\r\n      }));\r\n      throw error;\r\n    }\r\n  }, [state.socket, state.isConnecting, state.status, isLoggedIn, user, token]); // ✅ ADICIONADO TOKEN DE VOLTA MAS SEM SER OBRIGATÓRIO\r\n\r\n  // Alias para compatibilidade\r\n  const connect = connectWhatsApp;\r\n\r\n  // ====================================\r\n  // ❌ DESCONECTAR WHATSAPP\r\n  // ====================================\r\n  const disconnectWhatsApp = useCallback(async () => {\r\n    console.log('🔄 WhatsAppContext: Desconectando...');\r\n    \r\n    if (!state.socket) {\r\n      console.log('⚠️ WhatsAppContext: Socket não conectado');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // ENVIAR AMBOS OS COMANDOS PARA COMPATIBILIDADE\r\n      state.socket.emit('stopWhatsApp');\r\n      state.socket.emit('whatsapp:disconnect');\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        status: 'disconnected',\r\n        isConnected: false,\r\n        connectionStatus: 'disconnected',\r\n        isConnecting: false,\r\n        loading: false,\r\n        qrCode: null,\r\n        clientInfo: null,\r\n        connectionInfo: null,\r\n        conversations: [],\r\n        messages: {}\r\n      }));\r\n      \r\n      console.log('✅ WhatsAppContext: Desconectado com sucesso');\r\n    } catch (error) {\r\n      console.error('❌ WhatsAppContext: Erro ao desconectar:', error);\r\n      setState(prev => ({ ...prev, error: error.message }));\r\n      throw error;\r\n    }\r\n  }, [state.socket]);\r\n\r\n  // Alias para compatibilidade\r\n  const disconnect = disconnectWhatsApp;\r\n\r\n  // ====================================\r\n  // 🔄 REFRESH CONEXÃO\r\n  // ====================================\r\n  const refreshConnection = useCallback(async () => {\r\n    console.log('🔄 WhatsAppContext: Refresh conexão...');\r\n    \r\n    if (!isLoggedIn) {\r\n      console.log('⚠️ WhatsAppContext: Usuário não autenticado para refresh');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (state.status === 'connected' || state.isConnected) {\r\n        await disconnectWhatsApp();\r\n        setTimeout(() => {\r\n          connectWhatsApp();\r\n        }, 1000);\r\n      } else {\r\n        await connectWhatsApp();\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ WhatsAppContext: Erro ao refresh:', error);\r\n      setState(prev => ({ ...prev, error: error.message }));\r\n    }\r\n  }, [state.status, state.isConnected, connectWhatsApp, disconnectWhatsApp, isLoggedIn]);\r\n\r\n  // ====================================\r\n  // 📤 ENVIAR MENSAGEM\r\n  // ====================================\r\n  const sendMessage = useCallback(async (to, message) => {\r\n    console.log('📤 WhatsAppContext: Enviando mensagem...', { \r\n      to, \r\n      messageLength: message?.length,\r\n      userAuthenticated: isLoggedIn \r\n    });\r\n    \r\n    if (!isLoggedIn) {\r\n      const error = 'Usuário não autenticado para enviar mensagem';\r\n      console.error('❌', error);\r\n      throw new Error(error);\r\n    }\r\n    \r\n    if (!state.socket || (!state.isConnected && state.status !== 'connected')) {\r\n      const error = 'WhatsApp não conectado para enviar mensagem';\r\n      console.error('❌', error, {\r\n        hasSocket: !!state.socket,\r\n        isConnected: state.isConnected,\r\n        status: state.status\r\n      });\r\n      throw new Error(error);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const timeout = setTimeout(() => {\r\n        reject(new Error('Timeout ao enviar mensagem (30s)'));\r\n      }, 30000);\r\n\r\n      const messageData = { \r\n        to, \r\n        message,\r\n        userId: user?.id,\r\n        timestamp: Date.now()\r\n      };\r\n\r\n      console.log('📤 Enviando dados da mensagem:', messageData);\r\n\r\n      // Listener para resposta\r\n      const handleResponse = (response) => {\r\n        clearTimeout(timeout);\r\n        \r\n        console.log('📨 Resposta do servidor:', response);\r\n        \r\n        if (response?.success) {\r\n          console.log('✅ WhatsAppContext: Mensagem enviada com sucesso');\r\n          \r\n          // Adicionar mensagem ao estado\r\n          setState(prev => ({\r\n            ...prev,\r\n            messages: {\r\n              ...prev.messages,\r\n              [to]: [...(prev.messages[to] || []), {\r\n                id: response.messageId || Date.now(),\r\n                body: message,\r\n                fromMe: true,\r\n                timestamp: Date.now(),\r\n                type: 'sent'\r\n              }]\r\n            }\r\n          }));\r\n          \r\n          resolve(response);\r\n        } else {\r\n          const errorMsg = response?.error || 'Erro desconhecido ao enviar mensagem';\r\n          console.error('❌ WhatsAppContext: Erro ao enviar mensagem:', errorMsg);\r\n          reject(new Error(errorMsg));\r\n        }\r\n      };\r\n\r\n      // Tentar o evento original primeiro\r\n      state.socket.emit('sendMessage', messageData, handleResponse);\r\n      \r\n      // Fallback para evento alternativo\r\n      setTimeout(() => {\r\n        state.socket.emit('whatsapp:send', messageData, handleResponse);\r\n      }, 5000);\r\n    });\r\n  }, [state.socket, state.status, state.isConnected, isLoggedIn, user]);\r\n\r\n  // ====================================\r\n  // 📁 ENVIAR MÍDIA\r\n  // ====================================\r\n  const sendMedia = useCallback(async (to, file, caption = '') => {\r\n    console.log('📁 WhatsAppContext: Enviando mídia...', { to, caption, fileType: file?.type });\r\n    \r\n    if (!isLoggedIn) {\r\n      const error = 'Usuário não autenticado para enviar mídia';\r\n      console.error('❌', error);\r\n      throw new Error(error);\r\n    }\r\n    \r\n    if (!state.socket || (!state.isConnected && state.status !== 'connected')) {\r\n      const error = 'WhatsApp não conectado para enviar mídia';\r\n      console.error('❌', error);\r\n      throw new Error(error);\r\n    }\r\n\r\n    // Convert file to base64 if it's a File object\r\n    let fileData;\r\n    if (file instanceof File) {\r\n      console.log('📁 Convertendo arquivo para base64...', {\r\n        name: file.name,\r\n        size: file.size,\r\n        type: file.type\r\n      });\r\n      \r\n      fileData = await new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          resolve({\r\n            data: e.target.result,\r\n            mimetype: file.type,\r\n            filename: file.name\r\n          });\r\n        };\r\n        reader.onerror = (error) => {\r\n          console.error('❌ Erro ao ler arquivo:', error);\r\n          reject(error);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    } else {\r\n      fileData = file;\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const timeout = setTimeout(() => {\r\n        reject(new Error('Timeout ao enviar mídia (60s)'));\r\n      }, 60000);\r\n\r\n      const mediaData = { \r\n        to, \r\n        media: fileData, \r\n        caption,\r\n        userId: user?.id,\r\n        timestamp: Date.now()\r\n      };\r\n\r\n      console.log('📁 Enviando dados da mídia:', {\r\n        to: mediaData.to,\r\n        caption: mediaData.caption,\r\n        userId: mediaData.userId,\r\n        mediaType: mediaData.media?.mimetype,\r\n        mediaFilename: mediaData.media?.filename\r\n      });\r\n\r\n      const handleResponse = (response) => {\r\n        clearTimeout(timeout);\r\n        \r\n        console.log('📨 Resposta do servidor (mídia):', response);\r\n        \r\n        if (response?.success) {\r\n          console.log('✅ WhatsAppContext: Mídia enviada com sucesso');\r\n          resolve(response);\r\n        } else {\r\n          const errorMsg = response?.error || 'Erro desconhecido ao enviar mídia';\r\n          console.error('❌ WhatsAppContext: Erro ao enviar mídia:', errorMsg);\r\n          reject(new Error(errorMsg));\r\n        }\r\n      };\r\n\r\n      // Tentar eventos de mídia\r\n      state.socket.emit('sendMedia', mediaData, handleResponse);\r\n      \r\n      setTimeout(() => {\r\n        state.socket.emit('whatsapp:sendMedia', mediaData, handleResponse);\r\n      }, 5000);\r\n    });\r\n  }, [state.socket, state.status, state.isConnected, isLoggedIn, user]);\r\n\r\n  // ====================================\r\n  // 📂 OBTER CONVERSAS\r\n  // ====================================\r\n  const loadConversations = useCallback(() => {\r\n    console.log('📂 WhatsAppContext: Carregando conversas...');\r\n    \r\n    if (!state.socket || (!state.isConnected && state.status !== 'connected')) {\r\n      console.log('⚠️ WhatsAppContext: Não conectado para carregar conversas');\r\n      return;\r\n    }\r\n\r\n    const handleResponse = (response) => {\r\n      console.log('📨 Resposta conversas:', response);\r\n      \r\n      if (response?.success) {\r\n        console.log(`✅ WhatsAppContext: ${response.chats?.length || 0} conversas carregadas`);\r\n        setState(prev => ({\r\n          ...prev,\r\n          conversations: response.chats || []\r\n        }));\r\n      } else {\r\n        console.log('⚠️ WhatsAppContext: Erro ao carregar conversas:', response?.error);\r\n      }\r\n    };\r\n\r\n    // Tentar ambos os eventos\r\n    state.socket.emit('getChats', handleResponse);\r\n    \r\n    setTimeout(() => {\r\n      state.socket.emit('whatsapp:getChats', handleResponse);\r\n    }, 2000);\r\n  }, [state.socket, state.status, state.isConnected]);\r\n\r\n  // ====================================\r\n  // 🗑️ LIMPAR ERRO\r\n  // ====================================\r\n  const clearError = useCallback(() => {\r\n    console.log('🗑️ WhatsAppContext: Limpando erro...');\r\n    setState(prev => ({ ...prev, error: null }));\r\n  }, []);\r\n\r\n  // ====================================\r\n  // 📊 OBTER STATUS\r\n  // ====================================\r\n  const getStatus = useCallback(() => {\r\n    const status = {\r\n      isConnected: state.status === 'connected' || state.isConnected,\r\n      connectionStatus: state.status,\r\n      hasQRCode: !!state.qrCode,\r\n      conversationsCount: state.conversations.length,\r\n      totalMessages: Object.values(state.messages).reduce((total, msgs) => total + msgs.length, 0),\r\n      clientInfo: state.clientInfo,\r\n      isAuthenticated: isLoggedIn,\r\n      user: user,\r\n      socket: {\r\n        exists: !!state.socket,\r\n        connected: state.socket?.connected,\r\n        id: state.socket?.id\r\n      },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    console.log('📊 Status atual:', status);\r\n    return status;\r\n  }, [state, isLoggedIn, user]);\r\n\r\n  // ====================================\r\n  // 📦 VALOR DO CONTEXTO - COMPLETO\r\n  // ====================================\r\n  const contextValue = {\r\n    // Estados que o ConnectionPage espera\r\n    status: state.status,\r\n    qrCode: state.qrCode,\r\n    isConnecting: state.isConnecting,\r\n    connectionInfo: state.connectionInfo,\r\n    error: state.error,\r\n    \r\n    // Estados adicionais completos\r\n    isConnected: state.status === 'connected' || state.isConnected,\r\n    connectionStatus: state.status,\r\n    conversations: state.conversations,\r\n    messages: state.messages,\r\n    activeConversation: state.activeConversation,\r\n    clientInfo: state.clientInfo,\r\n    loading: state.loading,\r\n    \r\n    // Estados de autenticação\r\n    isAuthenticated: isLoggedIn,\r\n    user,\r\n    \r\n    // Funções que o ConnectionPage espera\r\n    connectWhatsApp,\r\n    disconnectWhatsApp,\r\n    refreshConnection,\r\n    clearError,\r\n    \r\n    // Aliases para compatibilidade\r\n    connect,\r\n    disconnect,\r\n    \r\n    // Funções adicionais completas\r\n    sendMessage,\r\n    sendMedia,\r\n    loadConversations,\r\n    getStatus\r\n  };\r\n\r\n  return (\r\n    <WhatsAppContext.Provider value={contextValue}>\r\n      {children}\r\n    </WhatsAppContext.Provider>\r\n  );\r\n};\r\n\r\n// ====================================\r\n// 🪝 HOOK PARA USAR O CONTEXTO\r\n// ====================================\r\nexport const useWhatsApp = () => {\r\n  const context = useContext(WhatsAppContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useWhatsApp deve ser usado dentro de WhatsAppProvider');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\nexport default WhatsAppContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}