// client/src/App.js
// =====================================
// PRIMEM WHATSAPP v8.0 - TODAS AS MELHORIAS IMPLEMENTADAS
// ✅ 1. ⏰ AGENDAMENTO DE MENSAGENS - Sistema completo com envio automático
// ✅ 2. 📚 BASE DE CONHECIMENTO - Mensagens pré-definidas por categoria 
// ✅ 3. ✨ FORMATAÇÃO DE TEXTO - Negrito, itálico, riscado, monospace
// ✅ 4. 👥 GESTÃO DE USUÁRIOS - Sistema completo de administração
// ✅ 5. 🔘 MARCAR COMO NÃO LIDO - Restaurar contador de mensagens
// ✅ 6. 📷 FOTOS MELHORADAS - Múltiplas fontes + logs detalhados
// ✅ 7. Todas as melhorias anteriores mantidas
// =====================================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import io from 'socket.io-client';

// ====================================
// SISTEMA DE AGENDAMENTO DE MENSAGENS v8.0
// ====================================
const ScheduledMessagesModal = ({ isOpen, onClose, onSave, selectedChat }) => {
  const [scheduleData, setScheduleData] = useState({
    message: '',
    date: '',
    time: '',
    file: null,
    recurring: false,
    interval: 'daily'
  });
  const [pendingMessages, setPendingMessages] = useState([]);

  useEffect(() => {
    if (isOpen) {
      loadPendingMessages();
    }
  }, [isOpen]);

  const loadPendingMessages = () => {
    const saved = localStorage.getItem('primem_scheduled_messages');
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        setPendingMessages(parsed.filter(msg => new Date(msg.scheduledFor) > new Date()));
      } catch (error) {
        console.error('Erro ao carregar mensagens agendadas:', error);
      }
    }
  };

  const handleSave = () => {
    if (!scheduleData.message.trim() || !scheduleData.date || !scheduleData.time) {
      alert('Preencha todos os campos obrigatórios');
      return;
    }

    const scheduledFor = new Date(`${scheduleData.date}T${scheduleData.time}`);
    
    if (scheduledFor <= new Date()) {
      alert('A data/hora deve ser no futuro');
      return;
    }

    const newMessage = {
      id: Date.now(),
      chatId: selectedChat?.id,
      chatName: selectedChat?.name,
      message: scheduleData.message,
      file: scheduleData.file,
      scheduledFor: scheduledFor.toISOString(),
      recurring: scheduleData.recurring,
      interval: scheduleData.interval,
      status: 'pending',
      createdAt: new Date().toISOString()
    };

    const existing = JSON.parse(localStorage.getItem('primem_scheduled_messages') || '[]');
    existing.push(newMessage);
    localStorage.setItem('primem_scheduled_messages', JSON.stringify(existing));

    // Agendar execução
    scheduleMessage(newMessage);

    setScheduleData({ message: '', date: '', time: '', file: null, recurring: false, interval: 'daily' });
    loadPendingMessages();
    onSave(newMessage);
  };

  const scheduleMessage = (messageData) => {
    const now = new Date();
    const scheduledTime = new Date(messageData.scheduledFor);
    const delay = scheduledTime.getTime() - now.getTime();

    if (delay > 0) {
      setTimeout(() => {
        // Enviar mensagem agendada
        console.log('Enviando mensagem agendada:', messageData);
        onSave(messageData);
        
        // Marcar como enviada
        const existing = JSON.parse(localStorage.getItem('primem_scheduled_messages') || '[]');
        const updated = existing.map(msg => 
          msg.id === messageData.id ? {...msg, status: 'sent', sentAt: new Date().toISOString()} : msg
        );
        localStorage.setItem('primem_scheduled_messages', JSON.stringify(updated));
        
        // Se for recorrente, agendar próxima
        if (messageData.recurring) {
          const nextSchedule = calculateNextSchedule(scheduledTime, messageData.interval);
          const nextMessage = {
            ...messageData,
            id: Date.now(),
            scheduledFor: nextSchedule.toISOString(),
            status: 'pending'
          };
          existing.push(nextMessage);
          localStorage.setItem('primem_scheduled_messages', JSON.stringify(existing));
          scheduleMessage(nextMessage);
        }
      }, delay);
    }
  };

  const calculateNextSchedule = (currentDate, interval) => {
    const next = new Date(currentDate);
    switch(interval) {
      case 'daily': next.setDate(next.getDate() + 1); break;
      case 'weekly': next.setDate(next.getDate() + 7); break;
      case 'monthly': next.setMonth(next.getMonth() + 1); break;
      default: next.setDate(next.getDate() + 1);
    }
    return next;
  };

  const cancelScheduledMessage = (messageId) => {
    const existing = JSON.parse(localStorage.getItem('primem_scheduled_messages') || '[]');
    const updated = existing.filter(msg => msg.id !== messageId);
    localStorage.setItem('primem_scheduled_messages', JSON.stringify(updated));
    loadPendingMessages();
  };

  if (!isOpen) return null;

  const minDateTime = new Date().toISOString().slice(0, 16);

  return (
    <div style={modalStyles.overlay} onClick={onClose}>
      <div style={{...modalStyles.modal, minWidth: '600px', maxHeight: '80vh'}} onClick={(e) => e.stopPropagation()}>
        <div style={modalStyles.header}>
          <h3 style={modalStyles.title}>⏰ Agendamento de Mensagens</h3>
          <button style={modalStyles.closeBtn} onClick={onClose}>❌</button>
        </div>
        
        <div style={modalStyles.body}>
          <div style={scheduleStyles.tabs}>
            <div style={scheduleStyles.tabContent}>
              <h4 style={{color: '#2B4C8C'}}>📝 Nova Mensagem Agendada</h4>
              
              <div style={modalStyles.formGroup}>
                <label style={modalStyles.label}>📋 Mensagem:</label>
                <textarea
                  value={scheduleData.message}
                  onChange={(e) => setScheduleData(prev => ({...prev, message: e.target.value}))}
                  style={{...modalStyles.input, minHeight: '80px'}}
                  placeholder="Digite a mensagem a ser enviada..."
                />
              </div>

              <div style={scheduleStyles.dateTimeRow}>
                <div style={modalStyles.formGroup}>
                  <label style={modalStyles.label}>📅 Data:</label>
                  <input
                    type="date"
                    value={scheduleData.date}
                    onChange={(e) => setScheduleData(prev => ({...prev, date: e.target.value}))}
                    style={modalStyles.input}
                    min={new Date().toISOString().split('T')[0]}
                  />
                </div>
                
                <div style={modalStyles.formGroup}>
                  <label style={modalStyles.label}>🕐 Horário:</label>
                  <input
                    type="time"
                    value={scheduleData.time}
                    onChange={(e) => setScheduleData(prev => ({...prev, time: e.target.value}))}
                    style={modalStyles.input}
                  />
                </div>
              </div>

              <div style={scheduleStyles.optionsRow}>
                <div style={scheduleStyles.checkboxGroup}>
                  <label style={scheduleStyles.checkboxLabel}>
                    <input
                      type="checkbox"
                      checked={scheduleData.recurring}
                      onChange={(e) => setScheduleData(prev => ({...prev, recurring: e.target.checked}))}
                    />
                    🔄 Repetir
                  </label>
                </div>

                {scheduleData.recurring && (
                  <select
                    value={scheduleData.interval}
                    onChange={(e) => setScheduleData(prev => ({...prev, interval: e.target.value}))}
                    style={modalStyles.input}
                  >
                    <option value="daily">Diariamente</option>
                    <option value="weekly">Semanalmente</option>
                    <option value="monthly">Mensalmente</option>
                  </select>
                )}
              </div>

              <div style={scheduleStyles.chatInfo}>
                <strong>📱 Chat:</strong> {selectedChat?.name || 'Nenhum chat selecionado'}
              </div>
            </div>
          </div>

          <div style={scheduleStyles.pendingSection}>
            <h4 style={{color: '#2B4C8C'}}>📋 Mensagens Pendentes ({pendingMessages.length})</h4>
            <div style={scheduleStyles.pendingList}>
              {pendingMessages.length > 0 ? (
                pendingMessages.map(msg => (
                  <div key={msg.id} style={scheduleStyles.pendingItem}>
                    <div style={scheduleStyles.pendingInfo}>
                      <div style={scheduleStyles.pendingMessage}>
                        📝 {msg.message.substring(0, 50)}...
                      </div>
                      <div style={scheduleStyles.pendingDetails}>
                        📱 {msg.chatName} | 📅 {new Date(msg.scheduledFor).toLocaleString('pt-BR')}
                        {msg.recurring && <span> | 🔄 {msg.interval}</span>}
                      </div>
                    </div>
                    <button
                      style={scheduleStyles.cancelBtn}
                      onClick={() => cancelScheduledMessage(msg.id)}
                      title="Cancelar agendamento"
                    >
                      ❌
                    </button>
                  </div>
                ))
              ) : (
                <div style={scheduleStyles.emptyPending}>
                  Nenhuma mensagem agendada
                </div>
              )}
            </div>
          </div>
        </div>
        
        <div style={modalStyles.footer}>
          <button style={modalStyles.cancelBtn} onClick={onClose}>
            Cancelar
          </button>
          <button 
            style={modalStyles.saveBtn} 
            onClick={handleSave}
            disabled={!scheduleData.message.trim() || !scheduleData.date || !scheduleData.time}
          >
            ⏰ Agendar Mensagem
          </button>
        </div>
      </div>
    </div>
  );
};

const scheduleStyles = {
  tabs: {
    marginBottom: '20px'
  },
  tabContent: {
    padding: '10px 0'
  },
  dateTimeRow: {
    display: 'grid',
    gridTemplateColumns: '1fr 1fr',
    gap: '15px'
  },
  optionsRow: {
    display: 'flex',
    alignItems: 'center',
    gap: '15px',
    marginBottom: '15px'
  },
  checkboxGroup: {
    display: 'flex',
    alignItems: 'center'
  },
  checkboxLabel: {
    display: 'flex',
    alignItems: 'center',
    gap: '8px',
    fontSize: '14px',
    cursor: 'pointer'
  },
  chatInfo: {
    padding: '10px',
    backgroundColor: '#f0f2f5',
    borderRadius: '5px',
    fontSize: '14px',
    color: '#666'
  },
  pendingSection: {
    marginTop: '20px',
    borderTop: '1px solid #eee',
    paddingTop: '15px'
  },
  pendingList: {
    maxHeight: '200px',
    overflowY: 'auto',
    border: '1px solid #ddd',
    borderRadius: '5px'
  },
  pendingItem: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '10px',
    borderBottom: '1px solid #eee'
  },
  pendingInfo: {
    flex: 1
  },
  pendingMessage: {
    fontWeight: 'bold',
    fontSize: '14px',
    marginBottom: '4px'
  },
  pendingDetails: {
    fontSize: '12px',
    color: '#666'
  },
  cancelBtn: {
    padding: '4px 8px',
    backgroundColor: '#dc3545',
    color: 'white',
    border: 'none',
    borderRadius: '3px',
    cursor: 'pointer',
    fontSize: '12px'
  },
  emptyPending: {
    textAlign: 'center',
    padding: '20px',
    color: '#999',
    fontStyle: 'italic'
  }
};

// ====================================
// BASE DE CONHECIMENTO v8.0
// ====================================
const KnowledgeBaseModal = ({ isOpen, onClose, onSelectMessage }) => {
  const [activeCategory, setActiveCategory] = useState('saudacoes');
  const [searchTerm, setSearchTerm] = useState('');
  const [customMessages, setCustomMessages] = useState([]);
  const [showAddForm, setShowAddForm] = useState(false);
  const [newMessage, setNewMessage] = useState({ title: '', content: '', category: 'saudacoes' });

  // Base de conhecimento padrão
  const defaultKnowledge = {
    saudacoes: {
      name: '👋 Saudações',
      messages: [
        { id: 1, title: 'Bom dia profissional', content: 'Bom dia! Como posso ajudá-lo hoje?' },
        { id: 2, title: 'Boa tarde', content: 'Boa tarde! Em que posso ser útil?' },
        { id: 3, title: 'Primeira conversa', content: 'Olá! Seja bem-vindo(a)! Sou da equipe de atendimento da PRIMEM COMEX. Como posso ajudá-lo?' },
        { id: 4, title: 'Retorno de contato', content: 'Olá novamente! Espero que esteja tudo bem. Vamos continuar nossa conversa?' }
      ]
    },
    despedidas: {
      name: '👋 Despedidas',  
      messages: [
        { id: 5, title: 'Encerramento padrão', content: 'Foi um prazer atendê-lo! Tenha um excelente dia!' },
        { id: 6, title: 'Até logo', content: 'Até logo! Qualquer dúvida, estarei aqui para ajudar.' },
        { id: 7, title: 'Finalização com follow-up', content: 'Obrigado pelo contato! Entraremos em contato em breve com mais informações.' }
      ]
    },
    comercial: {
      name: '💼 Comercial',
      messages: [
        { id: 8, title: 'Apresentação da empresa', content: 'A PRIMEM COMEX é especializada em comércio exterior, oferecendo soluções completas para importação e exportação.' },
        { id: 9, title: 'Solicitar informações', content: 'Para elaborarmos a melhor proposta, preciso de algumas informações. Poderia me fornecer os detalhes do produto?' },
        { id: 10, title: 'Valores e condições', content: 'Nossos valores são competitivos e personalizados. Vou preparar uma cotação especial para você!' }
      ]
    },
    suporte: {
      name: '🛠️ Suporte',
      messages: [
        { id: 11, title: 'Identificar problema', content: 'Entendo sua situação. Vou ajudá-lo a resolver isso. Pode me descrever com mais detalhes o que está acontecendo?' },
        { id: 12, title: 'Aguardar análise', content: 'Já recebi sua solicitação! Nossa equipe técnica está analisando e retornará em até 24 horas.' },
        { id: 13, title: 'Acompanhamento', content: 'Como anda o andamento da sua solicitação? Precisa de algum esclarecimento adicional?' }
      ]
    },
    documentos: {
      name: '📄 Documentos',
      messages: [
        { id: 14, title: 'Lista de documentos', content: 'Para prosseguirmos, precisaremos dos seguintes documentos: \n• RG/CPF\n• Comprovante de endereço\n• CNPJ da empresa' },
        { id: 15, title: 'Envio de documentos', content: 'Por favor, envie os documentos preferencialmente em PDF. Você pode enviar aqui mesmo pelo WhatsApp!' },
        { id: 16, title: 'Documentos recebidos', content: 'Documentos recebidos com sucesso! Vou analisar e retorno em breve.' }
      ]
    },
    agendamento: {
      name: '📅 Agendamento',
      messages: [
        { id: 17, title: 'Agendar reunião', content: 'Vamos agendar uma reunião? Tenho disponibilidade: \n• Segunda: 14h às 17h\n• Terça: 9h às 12h\n• Quarta: 14h às 18h' },
        { id: 18, title: 'Confirmar agendamento', content: 'Reunião confirmada para [DATA] às [HORA]. Enviarei o link da videochamada em breve!' },
        { id: 19, title: 'Lembrete de reunião', content: 'Lembrete: temos reunião hoje às [HORA]. O link é: [LINK]' }
      ]
    }
  };

  useEffect(() => {
    const saved = localStorage.getItem('primem_custom_knowledge');
    if (saved) {
      try {
        setCustomMessages(JSON.parse(saved));
      } catch (error) {
        console.error('Erro ao carregar conhecimento personalizado:', error);
      }
    }
  }, []);

  const saveCustomMessage = () => {
    if (!newMessage.title.trim() || !newMessage.content.trim()) {
      alert('Preencha título e conteúdo');
      return;
    }

    const message = {
      id: Date.now(),
      title: newMessage.title,
      content: newMessage.content,
      category: newMessage.category,
      isCustom: true,
      createdAt: new Date().toISOString()
    };

    const updated = [...customMessages, message];
    setCustomMessages(updated);
    localStorage.setItem('primem_custom_knowledge', JSON.stringify(updated));
    
    setNewMessage({ title: '', content: '', category: 'saudacoes' });
    setShowAddForm(false);
  };

  const deleteCustomMessage = (messageId) => {
    const updated = customMessages.filter(msg => msg.id !== messageId);
    setCustomMessages(updated);
    localStorage.setItem('primem_custom_knowledge', JSON.stringify(updated));
  };

  const getAllMessages = () => {
    const defaultMsgs = defaultKnowledge[activeCategory]?.messages || [];
    const customMsgs = customMessages.filter(msg => msg.category === activeCategory);
    return [...defaultMsgs, ...customMsgs];
  };

  const filteredMessages = getAllMessages().filter(msg =>
    msg.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    msg.content.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (!isOpen) return null;

  return (
    <div style={modalStyles.overlay} onClick={onClose}>
      <div style={{...modalStyles.modal, minWidth: '700px', maxHeight: '80vh'}} onClick={(e) => e.stopPropagation()}>
        <div style={modalStyles.header}>
          <h3 style={modalStyles.title}>📚 Base de Conhecimento</h3>
          <button style={modalStyles.closeBtn} onClick={onClose}>❌</button>
        </div>
        
        <div style={modalStyles.body}>
          {/* Busca */}
          <div style={knowledgeStyles.searchContainer}>
            <input
              type="text"
              placeholder="🔍 Buscar mensagens..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              style={knowledgeStyles.searchInput}
            />
            <button 
              style={knowledgeStyles.addBtn}
              onClick={() => setShowAddForm(!showAddForm)}
            >
              ➕ Nova
            </button>
          </div>

          {/* Formulário de nova mensagem */}
          {showAddForm && (
            <div style={knowledgeStyles.addForm}>
              <h4>➕ Adicionar Nova Mensagem</h4>
              <div style={knowledgeStyles.formRow}>
                <input
                  type="text"
                  placeholder="Título da mensagem..."
                  value={newMessage.title}
                  onChange={(e) => setNewMessage(prev => ({...prev, title: e.target.value}))}
                  style={{...modalStyles.input, flex: 2}}
                />
                <select
                  value={newMessage.category}
                  onChange={(e) => setNewMessage(prev => ({...prev, category: e.target.value}))}
                  style={{...modalStyles.input, flex: 1}}
                >
                  {Object.entries(defaultKnowledge).map(([key, cat]) => (
                    <option key={key} value={key}>{cat.name}</option>
                  ))}
                </select>
              </div>
              <textarea
                placeholder="Conteúdo da mensagem..."
                value={newMessage.content}
                onChange={(e) => setNewMessage(prev => ({...prev, content: e.target.value}))}
                style={{...modalStyles.input, minHeight: '80px', width: '100%'}}
              />
              <div style={knowledgeStyles.formActions}>
                <button style={modalStyles.cancelBtn} onClick={() => setShowAddForm(false)}>
                  Cancelar
                </button>
                <button style={modalStyles.saveBtn} onClick={saveCustomMessage}>
                  💾 Salvar
                </button>
              </div>
            </div>
          )}

          {/* Categorias */}
          <div style={knowledgeStyles.categories}>
            {Object.entries(defaultKnowledge).map(([key, category]) => (
              <button
                key={key}
                style={{
                  ...knowledgeStyles.categoryBtn,
                  ...(activeCategory === key ? knowledgeStyles.categoryBtnActive : {})
                }}
                onClick={() => setActiveCategory(key)}
              >
                {category.name}
              </button>
            ))}
          </div>

          {/* Lista de mensagens */}
          <div style={knowledgeStyles.messagesList}>
            {filteredMessages.length > 0 ? (
              filteredMessages.map(msg => (
                <div key={msg.id} style={knowledgeStyles.messageItem}>
                  <div style={knowledgeStyles.messageHeader}>
                    <h5 style={knowledgeStyles.messageTitle}>
                      {msg.title}
                      {msg.isCustom && <span style={knowledgeStyles.customBadge}>PERSONALIZADA</span>}
                    </h5>
                    <div style={knowledgeStyles.messageActions}>
                      <button
                        style={knowledgeStyles.useBtn}
                        onClick={() => {
                          onSelectMessage(msg.content);
                          onClose();
                        }}
                      >
                        ✅ Usar
                      </button>
                      {msg.isCustom && (
                        <button
                          style={knowledgeStyles.deleteBtn}
                          onClick={() => deleteCustomMessage(msg.id)}
                        >
                          🗑️
                        </button>
                      )}
                    </div>
                  </div>
                  <div style={knowledgeStyles.messageContent}>
                    {msg.content}
                  </div>
                </div>
              ))
            ) : (
              <div style={knowledgeStyles.emptyState}>
                Nenhuma mensagem encontrada nesta categoria
              </div>
            )}
          </div>
        </div>
        
        <div style={modalStyles.footer}>
          <div style={knowledgeStyles.stats}>
            📊 Total: {filteredMessages.length} mensagens | 
            Personalizadas: {customMessages.filter(m => m.category === activeCategory).length}
          </div>
        </div>
      </div>
    </div>
  );
};

const knowledgeStyles = {
  searchContainer: {
    display: 'flex',
    gap: '10px',
    marginBottom: '15px'
  },
  searchInput: {
    flex: 1,
    padding: '10px',
    border: '1px solid #ddd',
    borderRadius: '5px',
    fontSize: '14px'
  },
  addBtn: {
    padding: '10px 15px',
    backgroundColor: '#28a745',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px'
  },
  addForm: {
    padding: '15px',
    backgroundColor: '#f8f9fa',
    borderRadius: '8px',
    marginBottom: '15px',
    border: '1px solid #ddd'
  },
  formRow: {
    display: 'flex',
    gap: '10px',
    marginBottom: '10px'
  },
  formActions: {
    display: 'flex',
    gap: '10px',
    justifyContent: 'flex-end',
    marginTop: '10px'
  },
  categories: {
    display: 'flex',
    flexWrap: 'wrap',
    gap: '8px',
    marginBottom: '15px',
    borderBottom: '1px solid #eee',
    paddingBottom: '10px'
  },
  categoryBtn: {
    padding: '8px 12px',
    border: '1px solid #ddd',
    backgroundColor: 'white',
    borderRadius: '20px',
    cursor: 'pointer',
    fontSize: '12px',
    transition: 'all 0.2s'
  },
  categoryBtnActive: {
    backgroundColor: '#2B4C8C',
    color: 'white',
    borderColor: '#2B4C8C'
  },
  messagesList: {
    maxHeight: '400px',
    overflowY: 'auto'
  },
  messageItem: {
    border: '1px solid #ddd',
    borderRadius: '8px',
    marginBottom: '10px',
    backgroundColor: 'white'
  },
  messageHeader: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '10px 15px',
    backgroundColor: '#f8f9fa',
    borderTopLeftRadius: '8px',
    borderTopRightRadius: '8px'
  },
  messageTitle: {
    margin: 0,
    fontSize: '14px',
    color: '#333',
    display: 'flex',
    alignItems: 'center',
    gap: '8px'
  },
  customBadge: {
    fontSize: '10px',
    backgroundColor: '#17a2b8',
    color: 'white',
    padding: '2px 6px',
    borderRadius: '10px'
  },
  messageActions: {
    display: 'flex',
    gap: '5px'
  },
  useBtn: {
    padding: '5px 10px',
    backgroundColor: '#28a745',
    color: 'white',
    border: 'none',
    borderRadius: '3px',
    cursor: 'pointer',
    fontSize: '12px'
  },
  deleteBtn: {
    padding: '5px 8px',
    backgroundColor: '#dc3545',
    color: 'white',
    border: 'none',
    borderRadius: '3px',
    cursor: 'pointer',
    fontSize: '12px'
  },
  messageContent: {
    padding: '15px',
    fontSize: '14px',
    lineHeight: '1.4',
    whiteSpace: 'pre-wrap'
  },
  emptyState: {
    textAlign: 'center',
    padding: '40px',
    color: '#999',
    fontStyle: 'italic'
  },
  stats: {
    fontSize: '12px',
    color: '#666'
  }
};

// ====================================
// FORMATAÇÃO DE TEXTO v8.0
// ====================================
const TextFormattingModal = ({ isOpen, onClose, onApplyFormat, currentText }) => {
  const [text, setText] = useState('');
  const [previewText, setPreviewText] = useState('');

  useEffect(() => {
    if (isOpen) {
      setText(currentText || '');
      setPreviewText(currentText || '');
    }
  }, [isOpen, currentText]);

  const formatOptions = [
    { 
      name: 'Negrito', 
      symbol: '*', 
      example: '*texto*', 
      description: 'Deixa o texto em negrito',
      icon: '𝐁'
    },
    { 
      name: 'Itálico', 
      symbol: '_', 
      example: '_texto_', 
      description: 'Deixa o texto em itálico',
      icon: '𝐼'
    },
    { 
      name: 'Riscado', 
      symbol: '~', 
      example: '~texto~', 
      description: 'Risca o texto',
      icon: '̶T̶'
    },
    { 
      name: 'Monospace', 
      symbol: '```', 
      example: '```texto```', 
      description: 'Fonte monoespaçada',
      icon: '𝚃'
    }
  ];

  const applyFormat = (format) => {
    const selection = window.getSelection();
    const selectedText = selection.toString();
    
    if (selectedText) {
      // Formatar texto selecionado
      let formattedText;
      if (format.symbol === '```') {
        formattedText = `\`\`\`${selectedText}\`\`\``;
      } else {
        formattedText = `${format.symbol}${selectedText}${format.symbol}`;
      }
      
      const newText = text.replace(selectedText, formattedText);
      setText(newText);
      updatePreview(newText);
    } else {
      // Adicionar formatação no cursor
      let formatText;
      if (format.symbol === '```') {
        formatText = `\`\`\`texto\`\`\``;
      } else {
        formatText = `${format.symbol}texto${format.symbol}`;
      }
      
      const newText = text + formatText;
      setText(newText);
      updatePreview(newText);
    }
  };

  const updatePreview = (inputText) => {
    // Simular formatação WhatsApp
    let preview = inputText
      .replace(/\*(.*?)\*/g, '<strong>$1</strong>')       // Negrito
      .replace(/_(.*?)_/g, '<em>$1</em>')                // Itálico  
      .replace(/~(.*?)~/g, '<del>$1</del>')              // Riscado
      .replace(/```(.*?)```/g, '<code>$1</code>');       // Monospace
    
    setPreviewText(preview);
  };

  useEffect(() => {
    updatePreview(text);
  }, [text]);

  const handleApply = () => {
    onApplyFormat(text);
    onClose();
  };

  const clearFormatting = () => {
    const cleanText = text
      .replace(/\*(.*?)\*/g, '$1')
      .replace(/_(.*?)_/g, '$1')
      .replace(/~(.*?)~/g, '$1')
      .replace(/```(.*?)```/g, '$1');
    
    setText(cleanText);
    updatePreview(cleanText);
  };

  if (!isOpen) return null;

  return (
    <div style={modalStyles.overlay} onClick={onClose}>
      <div style={{...modalStyles.modal, minWidth: '600px'}} onClick={(e) => e.stopPropagation()}>
        <div style={modalStyles.header}>
          <h3 style={modalStyles.title}>✨ Formatação de Texto WhatsApp</h3>
          <button style={modalStyles.closeBtn} onClick={onClose}>❌</button>
        </div>
        
        <div style={modalStyles.body}>
          {/* Botões de formatação */}
          <div style={formatStyles.toolbar}>
            <h4>🎨 Formatos Disponíveis:</h4>
            <div style={formatStyles.formatButtons}>
              {formatOptions.map((format, index) => (
                <button
                  key={index}
                  style={formatStyles.formatBtn}
                  onClick={() => applyFormat(format)}
                  title={format.description}
                >
                  <span style={formatStyles.formatIcon}>{format.icon}</span>
                  <div style={formatStyles.formatInfo}>
                    <strong>{format.name}</strong>
                    <small>{format.example}</small>
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* Editor de texto */}
          <div style={formatStyles.editorSection}>
            <label style={modalStyles.label}>📝 Texto para formatar:</label>
            <textarea
              value={text}
              onChange={(e) => setText(e.target.value)}
              style={formatStyles.textEditor}
              placeholder="Digite seu texto aqui... 
Selecione o texto e clique nos botões de formatação.

Exemplos:
*negrito* _itálico_ ~riscado~ ```monospace```"
            />
          </div>

          {/* Preview */}
          <div style={formatStyles.previewSection}>
            <label style={modalStyles.label}>👁️ Preview (como aparecerá no WhatsApp):</label>
            <div 
              style={formatStyles.preview}
              dangerouslySetInnerHTML={{ __html: previewText || 'Digite algo para ver o preview...' }}
            />
          </div>

          {/* Guia rápido */}
          <div style={formatStyles.quickGuide}>
            <h5>💡 Guia Rápido:</h5>
            <div style={formatStyles.guideItems}>
              <span><strong>*texto*</strong> = <strong>negrito</strong></span>
              <span><em>_texto_</em> = <em>itálico</em></span>
              <span><del>~texto~</del> = <del>riscado</del></span>
              <span><code>```texto```</code> = <code>monospace</code></span>
            </div>
          </div>
        </div>
        
        <div style={modalStyles.footer}>
          <button style={formatStyles.clearBtn} onClick={clearFormatting}>
            🧹 Limpar Formatação
          </button>
          <button style={modalStyles.cancelBtn} onClick={onClose}>
            Cancelar
          </button>
          <button style={modalStyles.saveBtn} onClick={handleApply}>
            ✨ Aplicar Formatação
          </button>
        </div>
      </div>
    </div>
  );
};

const formatStyles = {
  toolbar: {
    marginBottom: '20px'
  },
  formatButtons: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))',
    gap: '10px',
    marginTop: '10px'
  },
  formatBtn: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    padding: '12px',
    border: '2px solid #ddd',
    borderRadius: '8px',
    backgroundColor: 'white',
    cursor: 'pointer',
    transition: 'all 0.2s',
    textAlign: 'center'
  },
  formatIcon: {
    fontSize: '24px',
    marginBottom: '5px'
  },
  formatInfo: {
    fontSize: '12px'
  },
  editorSection: {
    marginBottom: '20px'
  },
  textEditor: {
    width: '100%',
    minHeight: '120px',
    padding: '10px',
    border: '1px solid #ddd',
    borderRadius: '5px',
    fontSize: '14px',
    fontFamily: 'monospace',
    resize: 'vertical'
  },
  previewSection: {
    marginBottom: '20px'
  },
  preview: {
    padding: '15px',
    border: '1px solid #ddd',
    borderRadius: '5px',
    backgroundColor: '#f8f9fa',
    minHeight: '80px',
    fontSize: '14px',
    lineHeight: '1.4'
  },
  quickGuide: {
    padding: '15px',
    backgroundColor: '#e8f4f8',
    borderRadius: '8px',
    borderLeft: '4px solid #2B4C8C'
  },
  guideItems: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',
    gap: '8px',
    marginTop: '8px',
    fontSize: '13px'
  },
  clearBtn: {
    padding: '10px 15px',
    backgroundColor: '#6c757d',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px'
  }
};

// ====================================
// GESTÃO DE USUÁRIOS v8.0
// ====================================
const UserManagementModal = ({ isOpen, onClose, currentUser }) => {
  const [users, setUsers] = useState([]);
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [newUser, setNewUser] = useState({
    name: '',
    email: '',
    password: '',
    role: 'Atendente',
    active: true,
    permissions: []
  });

  const roles = [
    { value: 'Administrador', label: 'Administrador', permissions: ['all'] },
    { value: 'Supervisor', label: 'Supervisor', permissions: ['manage_users', 'view_reports', 'manage_chats'] },
    { value: 'Atendente', label: 'Atendente', permissions: ['manage_chats'] }
  ];

  const permissions = [
    { id: 'manage_users', name: 'Gerenciar Usuários', description: 'Criar, editar e desativar usuários' },
    { id: 'view_reports', name: 'Visualizar Relatórios', description: 'Acessar métricas e relatórios' },
    { id: 'manage_chats', name: 'Gerenciar Chats', description: 'Enviar e receber mensagens' },
    { id: 'advanced_settings', name: 'Configurações Avançadas', description: 'Alterar configurações do sistema' }
  ];

  useEffect(() => {
    if (isOpen) {
      loadUsers();
    }
  }, [isOpen]);

  const loadUsers = () => {
    const savedUsers = localStorage.getItem('primem_system_users');
    if (savedUsers) {
      try {
        setUsers(JSON.parse(savedUsers));
      } catch (error) {
        console.error('Erro ao carregar usuários:', error);
        setUsers(getDefaultUsers());
      }
    } else {
      setUsers(getDefaultUsers());
    }
  };

  const getDefaultUsers = () => {
    return [
      {
        id: 1,
        name: 'Administrador Sistema',
        email: 'admin@primem.com',
        password: 'admin123',
        role: 'Administrador',
        active: true,
        permissions: ['all'],
        createdAt: new Date().toISOString(),
        lastLogin: new Date().toISOString()
      },
      {
        id: 2,
        name: 'Ana Silva',
        email: 'ana@primem.com',
        password: '123456',
        role: 'Atendente',
        active: true,
        permissions: ['manage_chats'],
        createdAt: new Date().toISOString(),
        lastLogin: null
      },
      {
        id: 3,
        name: 'Bruno Santos',
        email: 'bruno@primem.com',
        password: '123456',
        role: 'Supervisor',
        active: true,
        permissions: ['manage_users', 'view_reports', 'manage_chats'],
        createdAt: new Date().toISOString(),
        lastLogin: null
      }
    ];
  };

  const saveUsers = (updatedUsers) => {
    setUsers(updatedUsers);
    localStorage.setItem('primem_system_users', JSON.stringify(updatedUsers));
  };

  const handleSaveUser = () => {
    if (!newUser.name.trim() || !newUser.email.trim() || !newUser.password.trim()) {
      alert('Preencha todos os campos obrigatórios');
      return;
    }

    // Verificar email único
    const emailExists = users.some(user => 
      user.email === newUser.email && (!editingUser || user.id !== editingUser.id)
    );
    
    if (emailExists) {
      alert('Email já cadastrado');
      return;
    }

    const rolePermissions = roles.find(r => r.value === newUser.role)?.permissions || [];
    
    if (editingUser) {
      // Editar usuário existente
      const updatedUsers = users.map(user => 
        user.id === editingUser.id 
          ? { 
              ...user, 
              ...newUser, 
              permissions: rolePermissions,
              updatedAt: new Date().toISOString() 
            }
          : user
      );
      saveUsers(updatedUsers);
    } else {
      // Criar novo usuário
      const user = {
        id: Date.now(),
        ...newUser,
        permissions: rolePermissions,
        createdAt: new Date().toISOString(),
        lastLogin: null
      };
      saveUsers([...users, user]);
    }

    resetForm();
  };

  const resetForm = () => {
    setNewUser({
      name: '',
      email: '',
      password: '',
      role: 'Atendente',
      active: true,
      permissions: []
    });
    setShowAddForm(false);
    setEditingUser(null);
  };

  const handleEditUser = (user) => {
    setNewUser({
      name: user.name,
      email: user.email,
      password: user.password,
      role: user.role,
      active: user.active,
      permissions: user.permissions
    });
    setEditingUser(user);
    setShowAddForm(true);
  };

  const toggleUserActive = (userId) => {
    const updatedUsers = users.map(user =>
      user.id === userId ? { ...user, active: !user.active } : user
    );
    saveUsers(updatedUsers);
  };

  const deleteUser = (userId) => {
    if (window.confirm('Tem certeza que deseja excluir este usuário?')) {
      const updatedUsers = users.filter(user => user.id !== userId);
      saveUsers(updatedUsers);
    }
  };

  if (!isOpen) return null;

  return (
    <div style={modalStyles.overlay} onClick={onClose}>
      <div style={{...modalStyles.modal, minWidth: '800px', maxHeight: '90vh'}} onClick={(e) => e.stopPropagation()}>
        <div style={modalStyles.header}>
          <h3 style={modalStyles.title}>👥 Gestão de Usuários</h3>
          <button style={modalStyles.closeBtn} onClick={onClose}>❌</button>
        </div>
        
        <div style={modalStyles.body}>
          {/* Cabeçalho com estatísticas */}
          <div style={userStyles.statsHeader}>
            <div style={userStyles.stat}>
              <span style={userStyles.statNumber}>{users.length}</span>
              <span style={userStyles.statLabel}>Total</span>
            </div>
            <div style={userStyles.stat}>
              <span style={userStyles.statNumber}>{users.filter(u => u.active).length}</span>
              <span style={userStyles.statLabel}>Ativos</span>
            </div>
            <div style={userStyles.stat}>
              <span style={userStyles.statNumber}>{users.filter(u => u.role === 'Administrador').length}</span>
              <span style={userStyles.statLabel}>Admins</span>
            </div>
            <button 
              style={userStyles.addUserBtn}
              onClick={() => setShowAddForm(!showAddForm)}
            >
              ➕ Novo Usuário
            </button>
          </div>

          {/* Formulário de novo usuário */}
          {showAddForm && (
            <div style={userStyles.addForm}>
              <h4>{editingUser ? '✏️ Editar Usuário' : '➕ Novo Usuário'}</h4>
              
              <div style={userStyles.formRow}>
                <div style={modalStyles.formGroup}>
                  <label style={modalStyles.label}>Nome completo:</label>
                  <input
                    type="text"
                    value={newUser.name}
                    onChange={(e) => setNewUser(prev => ({...prev, name: e.target.value}))}
                    style={modalStyles.input}
                    placeholder="Nome do usuário..."
                  />
                </div>
                
                <div style={modalStyles.formGroup}>
                  <label style={modalStyles.label}>Email:</label>
                  <input
                    type="email"
                    value={newUser.email}
                    onChange={(e) => setNewUser(prev => ({...prev, email: e.target.value}))}
                    style={modalStyles.input}
                    placeholder="usuario@empresa.com"
                  />
                </div>
              </div>

              <div style={userStyles.formRow}>
                <div style={modalStyles.formGroup}>
                  <label style={modalStyles.label}>Senha:</label>
                  <input
                    type="password"
                    value={newUser.password}
                    onChange={(e) => setNewUser(prev => ({...prev, password: e.target.value}))}
                    style={modalStyles.input}
                    placeholder="Senha do usuário..."
                  />
                </div>
                
                <div style={modalStyles.formGroup}>
                  <label style={modalStyles.label}>Cargo:</label>
                  <select
                    value={newUser.role}
                    onChange={(e) => setNewUser(prev => ({...prev, role: e.target.value}))}
                    style={modalStyles.input}
                  >
                    {roles.map(role => (
                      <option key={role.value} value={role.value}>
                        {role.label}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <div style={userStyles.permissionsInfo}>
                <strong>🔐 Permissões do cargo {newUser.role}:</strong>
                <div style={userStyles.permissionsList}>
                  {roles.find(r => r.value === newUser.role)?.permissions.map(perm => (
                    <span key={perm} style={userStyles.permissionBadge}>
                      {perm === 'all' ? '⭐ Todas as permissões' : 
                       permissions.find(p => p.id === perm)?.name || perm}
                    </span>
                  ))}
                </div>
              </div>

              <div style={userStyles.formActions}>
                <button style={modalStyles.cancelBtn} onClick={resetForm}>
                  Cancelar
                </button>
                <button style={modalStyles.saveBtn} onClick={handleSaveUser}>
                  {editingUser ? '💾 Salvar Alterações' : '➕ Criar Usuário'}
                </button>
              </div>
            </div>
          )}

          {/* Lista de usuários */}
          <div style={userStyles.usersList}>
            <h4>📋 Usuários Cadastrados</h4>
            <div style={userStyles.usersTable}>
              {users.map(user => (
                <div key={user.id} style={userStyles.userRow}>
                  <div style={userStyles.userInfo}>
                    <div style={userStyles.userAvatar}>
                      {user.name.charAt(0).toUpperCase()}
                    </div>
                    <div style={userStyles.userDetails}>
                      <div style={userStyles.userName}>
                        {user.name}
                        {!user.active && <span style={userStyles.inactiveBadge}>INATIVO</span>}
                      </div>
                      <div style={userStyles.userMeta}>
                        📧 {user.email} | 🏢 {user.role}
                      </div>
                      <div style={userStyles.userDates}>
                        Criado: {new Date(user.createdAt).toLocaleDateString('pt-BR')}
                        {user.lastLogin && (
                          <span> | Último login: {new Date(user.lastLogin).toLocaleDateString('pt-BR')}</span>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  <div style={userStyles.userActions}>
                    <button
                      style={userStyles.editBtn}
                      onClick={() => handleEditUser(user)}
                      title="Editar usuário"
                    >
                      ✏️
                    </button>
                    <button
                      style={user.active ? userStyles.deactivateBtn : userStyles.activateBtn}
                      onClick={() => toggleUserActive(user.id)}
                      title={user.active ? 'Desativar' : 'Ativar'}
                    >
                      {user.active ? '🔒' : '🔓'}
                    </button>
                    {currentUser?.id !== user.id && (
                      <button
                        style={userStyles.deleteBtn}
                        onClick={() => deleteUser(user.id)}
                        title="Excluir usuário"
                      >
                        🗑️
                      </button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
        
        <div style={modalStyles.footer}>
          <div style={userStyles.footerInfo}>
            💡 Administradores têm acesso total ao sistema. Supervisores podem gerenciar usuários e ver relatórios.
          </div>
        </div>
      </div>
    </div>
  );
};

const userStyles = {
  statsHeader: {
    display: 'flex',
    alignItems: 'center',
    gap: '20px',
    padding: '15px',
    backgroundColor: '#f8f9fa',
    borderRadius: '8px',
    marginBottom: '20px'
  },
  stat: {
    textAlign: 'center'
  },
  statNumber: {
    display: 'block',
    fontSize: '24px',
    fontWeight: 'bold',
    color: '#2B4C8C'
  },
  statLabel: {
    fontSize: '12px',
    color: '#666'
  },
  addUserBtn: {
    marginLeft: 'auto',
    padding: '10px 15px',
    backgroundColor: '#28a745',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px'
  },
  addForm: {
    padding: '20px',
    backgroundColor: '#f8f9fa',
    borderRadius: '8px',
    marginBottom: '20px',
    border: '1px solid #ddd'
  },
  formRow: {
    display: 'grid',
    gridTemplateColumns: '1fr 1fr',
    gap: '15px',
    marginBottom: '15px'
  },
  permissionsInfo: {
    padding: '10px',
    backgroundColor: '#e8f4f8',
    borderRadius: '5px',
    marginBottom: '15px'
  },
  permissionsList: {
    display: 'flex',
    flexWrap: 'wrap',
    gap: '5px',
    marginTop: '8px'
  },
  permissionBadge: {
    fontSize: '12px',
    backgroundColor: '#2B4C8C',
    color: 'white',
    padding: '3px 8px',
    borderRadius: '12px'
  },
  formActions: {
    display: 'flex',
    gap: '10px',
    justifyContent: 'flex-end'
  },
  usersList: {
    marginTop: '20px'
  },
  usersTable: {
    border: '1px solid #ddd',
    borderRadius: '8px',
    overflow: 'hidden'
  },
  userRow: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '15px',
    borderBottom: '1px solid #eee',
    backgroundColor: 'white'
  },
  userInfo: {
    display: 'flex',
    alignItems: 'center',
    flex: 1
  },
  userAvatar: {
    width: '50px',
    height: '50px',
    borderRadius: '50%',
    backgroundColor: '#2B4C8C',
    color: 'white',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: '20px',
    fontWeight: 'bold',
    marginRight: '15px'
  },
  userDetails: {
    flex: 1
  },
  userName: {
    fontSize: '16px',
    fontWeight: 'bold',
    marginBottom: '4px',
    display: 'flex',
    alignItems: 'center',
    gap: '10px'
  },
  inactiveBadge: {
    fontSize: '10px',
    backgroundColor: '#dc3545',
    color: 'white',
    padding: '2px 6px',
    borderRadius: '10px'
  },
  userMeta: {
    fontSize: '14px',
    color: '#666',
    marginBottom: '2px'
  },
  userDates: {
    fontSize: '12px',
    color: '#999'
  },
  userActions: {
    display: 'flex',
    gap: '8px'
  },
  editBtn: {
    padding: '8px 12px',
    backgroundColor: '#17a2b8',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '14px'
  },
  deactivateBtn: {
    padding: '8px 12px',
    backgroundColor: '#ffc107',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '14px'
  },
  activateBtn: {
    padding: '8px 12px',
    backgroundColor: '#28a745',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '14px'
  },
  deleteBtn: {
    padding: '8px 12px',
    backgroundColor: '#dc3545',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '14px'
  },
  footerInfo: {
    fontSize: '12px',
    color: '#666',
    fontStyle: 'italic'
  }
};

// ====================================
// AUDIOPLAYER COM VELOCIDADE (Mantido da v7.0)
// ====================================
const AudioPlayer = React.memo(({ url, filename }) => {
  const audioRef = useRef(null);
  const progressRef = useRef(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [duration, setDuration] = useState(0);
  const [currentTime, setCurrentTime] = useState(0);
  const [isLoaded, setIsLoaded] = useState(false);
  const [error, setError] = useState(false);
  const [playbackRate, setPlaybackRate] = useState(1);
  const [showSpeedMenu, setShowSpeedMenu] = useState(false);
  const speedMenuRef = useRef(null);
  
  const speedOptions = [
    { value: 0.5, label: '0.5x' },
    { value: 0.75, label: '0.75x' },
    { value: 1, label: '1x' },
    { value: 1.25, label: '1.25x' },
    { value: 1.5, label: '1.5x' },
    { value: 2, label: '2x' }
  ];

  const audioUrl = React.useMemo(() => {
    if (!url) return '';
    
    const invalidUrls = ['uploading...', 'uploading', 'processing', 'undefined', 'null', '', null, undefined];
    const containsInvalidKeywords = url && (
      url.includes('uploading') || 
      url.includes('processing') || 
      url.includes('undefined') || 
      url.includes('null') ||
      url.includes('temp') ||
      url.includes('blob:') ||
      url.length < 5
    );
    
    if (!url || invalidUrls.includes(url) || containsInvalidKeywords) {
      return '';
    }
    
    let finalUrl = url;
    if (!url.startsWith('http')) {
      finalUrl = url.startsWith('/') 
        ? `http://localhost:3001${url}` 
        : `http://localhost:3001/${url}`;
    }
    
    return finalUrl;
  }, [url]);

  if (!audioUrl || audioUrl === '') {
    return (
      <div style={audioPlayerStyles.container}>
        <div style={{
          ...audioPlayerStyles.fallback,
          backgroundColor: 'rgba(255,193,7,0.1)',
          color: '#856404',
          textAlign: 'center',
          padding: '15px'
        }}>
          Processando áudio...
        </div>
      </div>
    );
  }

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (speedMenuRef.current && !speedMenuRef.current.contains(event.target)) {
        setShowSpeedMenu(false);
      }
    };
    
    if (showSpeedMenu) {
      document.addEventListener('mousedown', handleClickOutside);
      return () => document.removeEventListener('mousedown', handleClickOutside);
    }
  }, [showSpeedMenu]);

  useEffect(() => {
    if (!audioRef.current || !audioUrl) return;

    const audio = audioRef.current;
    
    const handleLoadedMetadata = () => {
      setDuration(audio.duration);
      setIsLoaded(true);
      setError(false);
      audio.playbackRate = playbackRate;
    };

    const handleCanPlay = () => {
      setIsLoaded(true);
      setError(false);
      audio.playbackRate = playbackRate;
    };

    const handleTimeUpdate = () => {
      setCurrentTime(audio.currentTime);
    };

    const handleEnded = () => {
      setIsPlaying(false);
      setCurrentTime(0);
    };

    const handleError = (e) => {
      setError(true);
      setIsLoaded(false);
    };

    const handleLoadStart = () => {
      setError(false);
    };

    audio.addEventListener('loadedmetadata', handleLoadedMetadata);
    audio.addEventListener('canplay', handleCanPlay);
    audio.addEventListener('timeupdate', handleTimeUpdate);
    audio.addEventListener('ended', handleEnded);
    audio.addEventListener('error', handleError);
    audio.addEventListener('loadstart', handleLoadStart);

    audio.crossOrigin = "anonymous";
    audio.preload = "metadata";
    audio.src = audioUrl;

    return () => {
      audio.removeEventListener('loadedmetadata', handleLoadedMetadata);
      audio.removeEventListener('canplay', handleCanPlay);
      audio.removeEventListener('timeupdate', handleTimeUpdate);
      audio.removeEventListener('ended', handleEnded);
      audio.removeEventListener('error', handleError);
      audio.removeEventListener('loadstart', handleLoadStart);
    };
  }, [audioUrl, playbackRate]);

  useEffect(() => {
    if (audioRef.current && isLoaded) {
      audioRef.current.playbackRate = playbackRate;
    }
  }, [playbackRate, isLoaded]);

  const togglePlay = async () => {
    if (!audioRef.current || !isLoaded) return;

    try {
      if (isPlaying) {
        audioRef.current.pause();
        setIsPlaying(false);
      } else {
        await audioRef.current.play();
        setIsPlaying(true);
      }
    } catch (error) {
      setError(true);
    }
  };

  const handleProgressClick = (e) => {
    if (!audioRef.current || !progressRef.current || !duration) return;

    const rect = progressRef.current.getBoundingClientRect();
    const clickX = e.clientX - rect.left;
    const percentage = clickX / rect.width;
    const newTime = percentage * duration;

    audioRef.current.currentTime = newTime;
    setCurrentTime(newTime);
  };

  const changeSpeed = (newSpeed) => {
    setPlaybackRate(newSpeed);
    setShowSpeedMenu(false);
  };

  const formatTime = (time) => {
    if (!time || !isFinite(time)) return '0:00';
    
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  if (error) {
    return (
      <div style={audioPlayerStyles.container}>
        <div style={audioPlayerStyles.fallback}>
          <span>Audio {filename || 'Áudio'}</span>
          <audio controls style={{ width: '100%', marginTop: '8px' }}>
            <source src={audioUrl} type="audio/ogg; codecs=opus" />
            <source src={audioUrl} type="audio/ogg" />
            <source src={audioUrl} type="audio/mpeg" />
            <source src={audioUrl} />
          </audio>
        </div>
      </div>
    );
  }

  return (
    <div style={audioPlayerStyles.container}>
      <audio 
        ref={audioRef}
        style={{ display: 'none' }}
        crossOrigin="anonymous"
      />
      
      <div style={audioPlayerStyles.player}>
        <button 
          onClick={togglePlay}
          style={audioPlayerStyles.playButton}
          disabled={!isLoaded}
        >
          {!isLoaded ? '⏳' : isPlaying ? '⏸️' : '▶️'}
        </button>
        
        <div style={audioPlayerStyles.info}>
          <div style={audioPlayerStyles.filename}>
            🎵 {filename || 'Áudio'}
          </div>
          
          <div style={audioPlayerStyles.controls}>
            <span style={audioPlayerStyles.time}>
              {formatTime(currentTime)}
            </span>
            
            <div 
              ref={progressRef}
              style={audioPlayerStyles.progressBar}
              onClick={handleProgressClick}
            >
              <div 
                style={{
                  ...audioPlayerStyles.progress,
                  width: duration ? `${(currentTime / duration) * 100}%` : '0%'
                }}
              />
            </div>
            
            <span style={audioPlayerStyles.time}>
              {formatTime(duration)}
            </span>
          </div>
        </div>
        
        <div style={audioPlayerStyles.speedControl} ref={speedMenuRef}>
          <button
            style={audioPlayerStyles.speedButton}
            onClick={() => setShowSpeedMenu(!showSpeedMenu)}
            title="Velocidade de reprodução"
            disabled={!isLoaded}
          >
            {playbackRate}x
          </button>
          
          {showSpeedMenu && (
            <div style={audioPlayerStyles.speedMenu}>
              {speedOptions.map(option => (
                <button
                  key={option.value}
                  style={{
                    ...audioPlayerStyles.speedOption,
                    ...(playbackRate === option.value ? audioPlayerStyles.speedOptionActive : {})
                  }}
                  onClick={() => changeSpeed(option.value)}
                >
                  {option.label}
                </button>
              ))}
            </div>
          )}
        </div>
        
        <a
          href={audioUrl}
          target="_blank"
          rel="noopener noreferrer"
          style={audioPlayerStyles.downloadLink}
        >
          💾
        </a>
      </div>
    </div>
  );
});

const audioPlayerStyles = {
  container: {
    padding: '10px',
    backgroundColor: 'rgba(0,0,0,0.05)',
    borderRadius: '10px',
    minWidth: '280px',
    maxWidth: '400px'
  },
  player: {
    display: 'flex',
    alignItems: 'center',
    gap: '10px'
  },
  playButton: {
    background: '#25D366',
    border: 'none',
    borderRadius: '50%',
    width: '40px',
    height: '40px',
    cursor: 'pointer',
    fontSize: '16px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    color: 'white'
  },
  info: {
    flex: 1,
    minWidth: 0
  },
  filename: {
    fontSize: '12px',
    fontWeight: 'bold',
    marginBottom: '4px',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  controls: {
    display: 'flex',
    alignItems: 'center',
    gap: '8px'
  },
  time: {
    fontSize: '11px',
    color: '#666',
    minWidth: '35px'
  },
  progressBar: {
    flex: 1,
    height: '4px',
    backgroundColor: '#ddd',
    borderRadius: '2px',
    cursor: 'pointer',
    position: 'relative'
  },
  progress: {
    height: '100%',
    backgroundColor: '#25D366',
    borderRadius: '2px',
    transition: 'width 0.1s ease'
  },
  speedControl: {
    position: 'relative'
  },
  speedButton: {
    background: '#667eea',
    border: 'none',
    borderRadius: '15px',
    padding: '4px 8px',
    cursor: 'pointer',
    fontSize: '11px',
    color: 'white',
    fontWeight: 'bold',
    minWidth: '35px',
    transition: 'all 0.2s'
  },
  speedMenu: {
    position: 'absolute',
    bottom: '30px',
    right: '0',
    backgroundColor: 'white',
    border: '1px solid #ddd',
    borderRadius: '5px',
    boxShadow: '0 2px 8px rgba(0,0,0,0.15)',
    zIndex: 100,
    minWidth: '60px'
  },
  speedOption: {
    display: 'block',
    width: '100%',
    padding: '8px 12px',
    background: 'none',
    border: 'none',
    cursor: 'pointer',
    fontSize: '12px',
    textAlign: 'left',
    transition: 'background-color 0.2s'
  },
  speedOptionActive: {
    backgroundColor: '#667eea',
    color: 'white'
  },
  downloadLink: {
    color: '#667eea',
    textDecoration: 'none',
    fontSize: '16px',
    padding: '4px'
  },
  fallback: {
    textAlign: 'center',
    padding: '10px'
  }
};

// ====================================
// COMPONENTE DE GRAVAÇÃO DE ÁUDIO (Mantido da v7.0)
// ====================================
const AudioRecorder = ({ onRecordingComplete, onCancel }) => {
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const [recordedBlob, setRecordedBlob] = useState(null);
  const [isPlaying, setIsPlaying] = useState(false);
  
  const mediaRecorderRef = useRef(null);
  const chunksRef = useRef([]);
  const timerRef = useRef(null);
  const audioRef = useRef(null);
  
  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          sampleRate: 44100
        } 
      });
      
      chunksRef.current = [];
      
      const mediaRecorder = new MediaRecorder(stream, {
        mimeType: 'audio/webm;codecs=opus'
      });
      
      mediaRecorderRef.current = mediaRecorder;
      
      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunksRef.current.push(event.data);
        }
      };
      
      mediaRecorder.onstop = () => {
        const blob = new Blob(chunksRef.current, { 
          type: 'audio/webm;codecs=opus' 
        });
        
        setRecordedBlob(blob);
        stream.getTracks().forEach(track => track.stop());
      };
      
      mediaRecorder.start();
      setIsRecording(true);
      setRecordingTime(0);
      
      timerRef.current = setInterval(() => {
        setRecordingTime(prev => {
          const newTime = prev + 1;
          if (newTime >= 300) {
            stopRecording();
          }
          return newTime;
        });
      }, 1000);
      
    } catch (error) {
      alert('Não foi possível acessar o microfone. Verifique as permissões.');
    }
  };
  
  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      
      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
    }
  };
  
  const playRecording = () => {
    if (recordedBlob && audioRef.current) {
      const url = URL.createObjectURL(recordedBlob);
      audioRef.current.src = url;
      audioRef.current.play();
      setIsPlaying(true);
      
      audioRef.current.onended = () => {
        setIsPlaying(false);
        URL.revokeObjectURL(url);
      };
    }
  };
  
  const stopPlaying = () => {
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      setIsPlaying(false);
    }
  };
  
  const sendRecording = () => {
    if (recordedBlob) {
      const audioFile = new File([recordedBlob], `audio-${Date.now()}.webm`, {
        type: 'audio/webm;codecs=opus'
      });
      
      onRecordingComplete(audioFile);
    }
  };
  
  const cancelRecording = () => {
    if (isRecording) {
      stopRecording();
    }
    
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
    
    setRecordedBlob(null);
    setRecordingTime(0);
    onCancel();
  };
  
  useEffect(() => {
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
      if (mediaRecorderRef.current) {
        mediaRecorderRef.current.stop();
      }
    };
  }, []);
  
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };
  
  return (
    <div style={recorderStyles.container}>
      <audio ref={audioRef} style={{ display: 'none' }} />
      
      {!recordedBlob ? (
        <div style={recorderStyles.recordingInterface}>
          <div style={recorderStyles.header}>
            <span style={recorderStyles.title}>🎤 Gravar Áudio</span>
            <button style={recorderStyles.closeBtn} onClick={cancelRecording}>❌</button>
          </div>
          
          <div style={recorderStyles.recordingArea}>
            {isRecording ? (
              <div style={recorderStyles.recordingActive}>
                <div style={recorderStyles.recordingIndicator}>
                  <div style={recorderStyles.pulsingDot}></div>
                  <span style={recorderStyles.recordingText}>Gravando...</span>
                </div>
                <div style={recorderStyles.timer}>{formatTime(recordingTime)}</div>
                <button style={recorderStyles.stopBtn} onClick={stopRecording}>
                  ⏹️ Parar
                </button>
              </div>
            ) : (
              <div style={recorderStyles.recordingInactive}>
                <button style={recorderStyles.startBtn} onClick={startRecording}>
                  🎙️ Iniciar Gravação
                </button>
                <small style={recorderStyles.hint}>
                  Clique para gravar sua mensagem de voz
                </small>
              </div>
            )}
          </div>
        </div>
      ) : (
        <div style={recorderStyles.previewInterface}>
          <div style={recorderStyles.header}>
            <span style={recorderStyles.title}>🎵 Áudio Gravado</span>
            <button style={recorderStyles.closeBtn} onClick={cancelRecording}>❌</button>
          </div>
          
          <div style={recorderStyles.previewArea}>
            <div style={recorderStyles.audioInfo}>
              <span style={recorderStyles.duration}>⏱️ Tempo: {formatTime(recordingTime)}</span>
              <span style={recorderStyles.size}>
                📁 Tamanho: {(recordedBlob.size / 1024).toFixed(1)} KB
              </span>
            </div>
            
            <div style={recorderStyles.previewControls}>
              <button 
                style={recorderStyles.playBtn} 
                onClick={isPlaying ? stopPlaying : playRecording}
              >
                {isPlaying ? '⏹️ Parar' : '▶️ Ouvir'}
              </button>
            </div>
            
            <div style={recorderStyles.actionButtons}>
              <button style={recorderStyles.discardBtn} onClick={cancelRecording}>
                🗑️ Descartar
              </button>
              <button style={recorderStyles.sendBtn} onClick={sendRecording}>
                📤 Enviar
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const recorderStyles = {
  container: {
    position: 'absolute',
    bottom: '70px',
    left: '10px',
    right: '10px',
    backgroundColor: 'white',
    borderRadius: '10px',
    boxShadow: '0 4px 20px rgba(0, 0, 0, 0.2)',
    border: '1px solid #ddd',
    zIndex: 100
  },
  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '15px 20px',
    borderBottom: '1px solid #eee'
  },
  title: {
    fontWeight: 'bold',
    color: '#2B4C8C',
    fontSize: '16px'
  },
  closeBtn: {
    background: 'none',
    border: 'none',
    fontSize: '18px',
    cursor: 'pointer',
    color: '#666',
    padding: '5px'
  },
  recordingInterface: {
    padding: '0'
  },
  recordingArea: {
    padding: '20px',
    textAlign: 'center'
  },
  recordingActive: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    gap: '15px'
  },
  recordingIndicator: {
    display: 'flex',
    alignItems: 'center',
    gap: '10px'
  },
  pulsingDot: {
    width: '12px',
    height: '12px',
    backgroundColor: '#dc3545',
    borderRadius: '50%',
    animation: 'pulse 1s infinite'
  },
  recordingText: {
    color: '#dc3545',
    fontWeight: 'bold'
  },
  timer: {
    fontSize: '24px',
    fontWeight: 'bold',
    color: '#2B4C8C',
    fontFamily: 'monospace'
  },
  stopBtn: {
    padding: '10px 20px',
    backgroundColor: '#dc3545',
    color: 'white',
    border: 'none',
    borderRadius: '20px',
    cursor: 'pointer',
    fontSize: '16px',
    fontWeight: 'bold'
  },
  recordingInactive: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    gap: '10px'
  },
  startBtn: {
    padding: '15px 30px',
    backgroundColor: '#2B4C8C',
    color: 'white',
    border: 'none',
    borderRadius: '25px',
    cursor: 'pointer',
    fontSize: '16px',
    fontWeight: 'bold'
  },
  hint: {
    color: '#666',
    fontSize: '12px'
  },
  previewInterface: {
    padding: '0'
  },
  previewArea: {
    padding: '20px'
  },
  audioInfo: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '10px 15px',
    backgroundColor: '#f8f9fa',
    borderRadius: '5px',
    marginBottom: '15px',
    fontSize: '14px'
  },
  duration: {
    color: '#2B4C8C'
  },
  size: {
    color: '#666'
  },
  previewControls: {
    textAlign: 'center',
    marginBottom: '20px'
  },
  playBtn: {
    padding: '10px 20px',
    backgroundColor: '#25D366',
    color: 'white',
    border: 'none',
    borderRadius: '20px',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: 'bold'
  },
  actionButtons: {
    display: 'flex',
    gap: '10px',
    justifyContent: 'center'
  },
  discardBtn: {
    padding: '10px 20px',
    backgroundColor: '#6c757d',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px'
  },
  sendBtn: {
    padding: '10px 20px',
    backgroundColor: '#2B4C8C',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: 'bold'
  }
};

// Animação CSS para o pulso
const pulseAnimation = `
@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.3; }
  100% { opacity: 1; }
}
`;

if (typeof document !== 'undefined') {
  const style = document.createElement('style');
  style.textContent = pulseAnimation;
  document.head.appendChild(style);
}

// ====================================
// EMOJI PICKER EXPANDIDO (Mantido da v7.0)
// ====================================
const EmojiPicker = ({ isOpen, onEmojiSelect, onClose }) => {
  const [activeCategory, setActiveCategory] = useState('smileys');
  
  const emojiCategories = {
    smileys: {
      name: '😀 Rostos',
      emojis: [
        '😀', '😃', '😄', '😁', '😆', '😅', '🤣', '😂', '🙂', '🙃',
        '😉', '😊', '😇', '🥰', '😍', '🤩', '😘', '😗', '☺️', '😚',
        '😙', '🥲', '😋', '😛', '😜', '🤪', '😝', '🤑', '🤗', '🤭',
        '🤫', '🤔', '🤐', '🤨', '😐', '😑', '😶', '😏', '😒', '🙄',
        '😬', '🤥', '😔', '😪', '🤤', '😴', '😷', '🤒', '🤕', '🤢',
        '🤮', '🤧', '🥵', '🥶', '🥴', '😵', '🤯', '🤠', '🥳', '🥸'
      ]
    },
    people: {
      name: '👤 Pessoas',
      emojis: [
        '👶', '🧒', '👦', '👧', '🧑', '👱', '👨', '🧔', '👱‍♂️', '👨‍🦰',
        '👨‍🦱', '👨‍🦳', '👨‍🦲', '👩', '👱‍♀️', '👩‍🦰', '👩‍🦱', '👩‍🦳', '👩‍🦲', '🧓',
        '👴', '👵', '🙍', '🙍‍♂️', '🙍‍♀️', '🙎', '🙎‍♂️', '🙎‍♀️', '🙅', '🙅‍♂️',
        '🙅‍♀️', '🙆', '🙆‍♂️', '🙆‍♀️', '💁', '💁‍♂️', '💁‍♀️', '🙋', '🙋‍♂️', '🙋‍♀️',
        '🧏', '🧏‍♂️', '🧏‍♀️', '🙇', '🙇‍♂️', '🙇‍♀️', '🤦', '🤦‍♂️', '🤦‍♀️', '🤷'
      ]
    },
    nature: {
      name: '🌿 Natureza',
      emojis: [
        '🐶', '🐱', '🐭', '🐹', '🐰', '🦊', '🐻', '🐼', '🐨', '🐯',
        '🦁', '🐮', '🐷', '🐽', '🐸', '🐵', '🙈', '🙉', '🙊', '🐒',
        '🐔', '🐧', '🐦', '🐤', '🐣', '🐥', '🦆', '🦅', '🦉', '🦇',
        '🐺', '🐗', '🐴', '🦄', '🐝', '🐛', '🦋', '🐌', '🐞', '🐜',
        '🦟', '🦗', '🕷️', '🕸️', '🦂', '🐢', '🐍', '🦎', '🦖', '🦕'
      ]
    },
    food: {
      name: '🍕 Comida',
      emojis: [
        '🍎', '🍐', '🍊', '🍋', '🍌', '🍉', '🍇', '🍓', '🫐', '🍈',
        '🍒', '🍑', '🥭', '🍍', '🥥', '🥝', '🍅', '🍆', '🥑', '🥦',
        '🥬', '🥒', '🌶️', '🫑', '🌽', '🥕', '🫒', '🧄', '🧅', '🥔',
        '🍠', '🥐', '🥖', '🍞', '🥨', '🥯', '🧀', '🥚', '🍳', '🧈',
        '🥞', '🧇', '🥓', '🥩', '🍗', '🍖', '🦴', '🌭', '🍔', '🍟',
        '🍕', '🥪', '🥙', '🧆', '🌮', '🌯', '🫔', '🥗', '🥘', '🫕'
      ]
    },
    activities: {
      name: '⚽ Atividades',
      emojis: [
        '⚽', '🏀', '🏈', '⚾', '🥎', '🎾', '🏐', '🏉', '🥏', '🎱',
        '🪀', '🏓', '🏸', '🏒', '🏑', '🥍', '🏏', '⛳', '🪁', '🏹',
        '🎣', '🤿', '🥊', '🥋', '🎽', '🛹', '🛷', '⛸️', '🥌', '🎿',
        '⛷️', '🏂', '🪂', '🏋️', '🤼', '🤸', '⛹️', '🤺', '🤾', '🏌️',
        '🏇', '🧘', '🏄', '🏊', '🤽', '🚣', '🧗', '🚵', '🚴', '🏆'
      ]
    },
    travel: {
      name: '🚗 Viagem',
      emojis: [
        '🚗', '🚕', '🚙', '🚌', '🚎', '🏎️', '🚓', '🚑', '🚒', '🚐',
        '🛻', '🚚', '🚛', '🚜', '🦯', '🦽', '🦼', '🛴', '🚲', '🛵',
        '🏍️', '🛺', '🚨', '🚔', '🚍', '🚘', '🚖', '🚡', '🚠', '🚟',
        '🚃', '🚋', '🚞', '🚝', '🚄', '🚅', '🚈', '🚂', '🚆', '🚇',
        '🚊', '🚉', '✈️', '🛫', '🛬', '🛩️', '💺', '🛰️', '🚀', '🛸'
      ]
    },
    objects: {
      name: '📱 Objetos',
      emojis: [
        '⌚', '📱', '📲', '💻', '⌨️', '🖥️', '🖨️', '🖱️', '🖲️', '🕹️',
        '🗜️', '💽', '💾', '💿', '📀', '📼', '📷', '📸', '📹', '🎥',
        '📽️', '🎞️', '📞', '☎️', '📟', '📠', '📺', '📻', '🎙️', '🎚️',
        '🎛️', '🧭', '⏱️', '⏲️', '⏰', '🕰️', '⌛', '⏳', '📡', '🔋',
        '🔌', '💡', '🔦', '🕯️', '🪔', '🧯', '🛢️', '💸', '💵', '💴'
      ]
    },
    symbols: {
      name: '❤️ Símbolos',
      emojis: [
        '❤️', '🧡', '💛', '💚', '💙', '💜', '🖤', '🤍', '🤎', '💔',
        '❣️', '💕', '💞', '💓', '💗', '💖', '💘', '💝', '💟', '☮️',
        '✝️', '☪️', '🕉️', '☸️', '✡️', '🔯', '🕎', '☯️', '☦️', '🛐',
        '⛎', '♈', '♉', '♊', '♋', '♌', '♍', '♎', '♏', '♐',
        '♑', '♒', '♓', '🆔', '⚛️', '🉑', '☢️', '☣️', '📴', '📳'
      ]
    },
    flags: {
      name: '🏳️ Bandeiras',
      emojis: [
        '🏳️', '🏴', '🏁', '🚩', '🏳️‍🌈', '🏳️‍⚧️', '🏴‍☠️', '🇦🇫', '🇦🇽', '🇦🇱',
        '🇧🇷', '🇺🇸', '🇬🇧', '🇫🇷', '🇩🇪', '🇮🇹', '🇪🇸', '🇵🇹', '🇯🇵', '🇰🇷',
        '🇨🇳', '🇮🇳', '🇷🇺', '🇨🇦', '🇦🇺', '🇦🇷', '🇲🇽', '🇨🇱', '🇨🇴', '🇵🇪',
        '🇺🇾', '🇵🇾', '🇧🇴', '🇪🇨', '🇻🇪', '🇬🇾', '🇸🇷', '🇫🇰', '🇬🇫', '🇧🇻'
      ]
    }
  };

  if (!isOpen) return null;

  return (
    <div style={emojiPickerStyles.overlay} onClick={onClose}>
      <div style={emojiPickerStyles.container} onClick={(e) => e.stopPropagation()}>
        <div style={emojiPickerStyles.header}>
          <h3 style={emojiPickerStyles.title}>😊 Emojis</h3>
          <button style={emojiPickerStyles.closeBtn} onClick={onClose}>❌</button>
        </div>

        <div style={emojiPickerStyles.categories}>
          {Object.entries(emojiCategories).map(([key, category]) => (
            <button
              key={key}
              style={{
                ...emojiPickerStyles.categoryBtn,
                ...(activeCategory === key ? emojiPickerStyles.categoryBtnActive : {})
              }}
              onClick={() => setActiveCategory(key)}
            >
              {category.name.split(' ')[0]}
            </button>
          ))}
        </div>

        <div style={emojiPickerStyles.emojiGrid}>
          {emojiCategories[activeCategory].emojis.map((emoji, index) => (
            <button
              key={index}
              style={emojiPickerStyles.emojiBtn}
              onClick={() => {
                onEmojiSelect(emoji);
                onClose();
              }}
            >
              {emoji}
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};

const emojiPickerStyles = {
  overlay: {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000
  },
  container: {
    backgroundColor: 'white',
    borderRadius: '15px',
    boxShadow: '0 10px 30px rgba(0, 0, 0, 0.3)',
    width: '480px',
    maxWidth: '90vw',
    maxHeight: '600px',
    overflow: 'hidden'
  },
  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '15px 20px',
    borderBottom: '1px solid #eee',
    backgroundColor: '#f8f9fa'
  },
  title: {
    margin: 0,
    color: '#2B4C8C',
    fontSize: '18px'
  },
  closeBtn: {
    background: 'none',
    border: 'none',
    fontSize: '18px',
    cursor: 'pointer',
    padding: '5px'
  },
  categories: {
    display: 'flex',
    overflowX: 'auto',
    padding: '10px',
    borderBottom: '1px solid #eee',
    backgroundColor: '#f8f9fa'
  },
  categoryBtn: {
    background: 'none',
    border: 'none',
    padding: '8px 12px',
    fontSize: '14px',
    cursor: 'pointer',
    borderRadius: '20px',
    whiteSpace: 'nowrap',
    transition: 'all 0.2s',
    color: '#666'
  },
  categoryBtnActive: {
    backgroundColor: '#2B4C8C',
    color: 'white'
  },
  emojiGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(8, 1fr)',
    gap: '5px',
    padding: '15px',
    maxHeight: '400px',
    overflowY: 'auto'
  },
  emojiBtn: {
    background: 'none',
    border: 'none',
    fontSize: '24px',
    cursor: 'pointer',
    padding: '8px',
    borderRadius: '8px',
    transition: 'all 0.2s',
    aspectRatio: '1'
  }
};

// ====================================
// MODAL PARA EDITAR NOME COMPLETO (Mantido)
// ====================================
const EditNameModal = ({ isOpen, onClose, currentName, onSave }) => {
  const [newName, setNewName] = useState(currentName || '');
  const inputRef = useRef(null);

  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
      inputRef.current.select();
    }
  }, [isOpen]);

  useEffect(() => {
    setNewName(currentName || '');
  }, [currentName]);

  const handleSave = () => {
    if (newName.trim()) {
      onSave(newName.trim());
      onClose();
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSave();
    } else if (e.key === 'Escape') {
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div style={modalStyles.overlay} onClick={onClose}>
      <div style={modalStyles.modal} onClick={(e) => e.stopPropagation()}>
        <div style={modalStyles.header}>
          <h3 style={modalStyles.title}>✏️ Editar Nome do Contato</h3>
          <button style={modalStyles.closeBtn} onClick={onClose}>❌</button>
        </div>
        
        <div style={modalStyles.body}>
          <label style={modalStyles.label}>Novo nome:</label>
          <input
            ref={inputRef}
            type="text"
            value={newName}
            onChange={(e) => setNewName(e.target.value)}
            onKeyPress={handleKeyPress}
            style={modalStyles.input}
            placeholder="Digite o nome do contato..."
            maxLength={50}
          />
          <small style={modalStyles.hint}>
            Este nome será exibido apenas para você
          </small>
        </div>
        
        <div style={modalStyles.footer}>
          <button style={modalStyles.cancelBtn} onClick={onClose}>
            Cancelar
          </button>
          <button 
            style={modalStyles.saveBtn} 
            onClick={handleSave}
            disabled={!newName.trim()}
          >
            💾 Salvar
          </button>
        </div>
      </div>
    </div>
  );
};

// ====================================
// MODAL DE CONFIGURAÇÃO AVANÇADA (Mantido da v7.0)
// ====================================
const AdvancedSettingsModal = ({ isOpen, onClose, currentSettings, onSave }) => {
  const [settings, setSettings] = useState({
    // Cores do sistema
    primaryColor: '#2B4C8C',
    secondaryColor: '#C97A4A',
    accentColor: '#8B9DC3',
    backgroundColor: '#f0f2f5',
    
    // Logo e branding
    companyName: 'PRIMEM COMEX',
    systemName: 'WHATSAPP BUSINESS',
    logoUrl: '',
    
    // Textos dos botões
    loginButtonText: 'ENTRAR NO SISTEMA',
    sendButtonText: 'Enviar',
    attachButtonText: 'Anexar',
    connectButtonText: 'Conectar WhatsApp',
    
    // Configurações de mensagens
    showTimestamps: true,
    showDeliveryStatus: true,
    enableSounds: true,
    defaultEmojiSkin: '👋',
    
    // Outras configurações
    maxFileSize: 16, // MB
    autoDownloadMedia: true,
    compactMode: false,
    
    ...currentSettings
  });

  const [activeSettingsTab, setActiveSettingsTab] = useState('appearance');

  useEffect(() => {
    if (isOpen && currentSettings) {
      setSettings(prev => ({ ...prev, ...currentSettings }));
    }
  }, [isOpen, currentSettings]);

  const handleSave = () => {
    onSave(settings);
    onClose();
  };

  const updateSetting = (key, value) => {
    setSettings(prev => ({ ...prev, [key]: value }));
  };

  if (!isOpen) return null;

  return (
    <div style={modalStyles.overlay} onClick={onClose}>
      <div style={{...modalStyles.modal, minWidth: '700px', maxHeight: '80vh'}} onClick={(e) => e.stopPropagation()}>
        <div style={modalStyles.header}>
          <h3 style={modalStyles.title}>⚙️ Configurações Avançadas</h3>
          <button style={modalStyles.closeBtn} onClick={onClose}>❌</button>
        </div>
        
        <div style={modalStyles.body}>
          {/* Sub-tabs para configurações */}
          <div style={advancedSettingsStyles.tabs}>
            <button 
              style={{
                ...advancedSettingsStyles.tab,
                ...(activeSettingsTab === 'appearance' ? advancedSettingsStyles.tabActive : {})
              }}
              onClick={() => setActiveSettingsTab('appearance')}
            >
              🎨 Aparência
            </button>
            <button 
              style={{
                ...advancedSettingsStyles.tab,
                ...(activeSettingsTab === 'branding' ? advancedSettingsStyles.tabActive : {})
              }}
              onClick={() => setActiveSettingsTab('branding')}
            >
              🏢 Marca
            </button>
            <button 
              style={{
                ...advancedSettingsStyles.tab,
                ...(activeSettingsTab === 'interface' ? advancedSettingsStyles.tabActive : {})
              }}
              onClick={() => setActiveSettingsTab('interface')}
            >
              🖥️ Interface
            </button>
            <button 
              style={{
                ...advancedSettingsStyles.tab,
                ...(activeSettingsTab === 'behavior' ? advancedSettingsStyles.tabActive : {})
              }}
              onClick={() => setActiveSettingsTab('behavior')}
            >
              ⚡ Comportamento
            </button>
          </div>

          <div style={advancedSettingsStyles.content}>
            {activeSettingsTab === 'appearance' && (
              <div>
                <h4>🎨 Cores do Sistema</h4>
                <div style={advancedSettingsStyles.colorGrid}>
                  <div style={advancedSettingsStyles.colorItem}>
                    <label>Cor Primária:</label>
                    <div style={advancedSettingsStyles.colorInputContainer}>
                      <input
                        type="color"
                        value={settings.primaryColor}
                        onChange={(e) => updateSetting('primaryColor', e.target.value)}
                        style={advancedSettingsStyles.colorInput}
                      />
                      <span style={advancedSettingsStyles.colorValue}>{settings.primaryColor}</span>
                    </div>
                  </div>
                  
                  <div style={advancedSettingsStyles.colorItem}>
                    <label>Cor Secundária:</label>
                    <div style={advancedSettingsStyles.colorInputContainer}>
                      <input
                        type="color"
                        value={settings.secondaryColor}
                        onChange={(e) => updateSetting('secondaryColor', e.target.value)}
                        style={advancedSettingsStyles.colorInput}
                      />
                      <span style={advancedSettingsStyles.colorValue}>{settings.secondaryColor}</span>
                    </div>
                  </div>
                  
                  <div style={advancedSettingsStyles.colorItem}>
                    <label>Cor de Destaque:</label>
                    <div style={advancedSettingsStyles.colorInputContainer}>
                      <input
                        type="color"
                        value={settings.accentColor}
                        onChange={(e) => updateSetting('accentColor', e.target.value)}
                        style={advancedSettingsStyles.colorInput}
                      />
                      <span style={advancedSettingsStyles.colorValue}>{settings.accentColor}</span>
                    </div>
                  </div>
                  
                  <div style={advancedSettingsStyles.colorItem}>
                    <label>Cor de Fundo:</label>
                    <div style={advancedSettingsStyles.colorInputContainer}>
                      <input
                        type="color"
                        value={settings.backgroundColor}
                        onChange={(e) => updateSetting('backgroundColor', e.target.value)}
                        style={advancedSettingsStyles.colorInput}
                      />
                      <span style={advancedSettingsStyles.colorValue}>{settings.backgroundColor}</span>
                    </div>
                  </div>
                </div>
                
                <div style={advancedSettingsStyles.preview}>
                  <h5>📱 Preview:</h5>
                  <div style={{
                    ...advancedSettingsStyles.previewCard,
                    backgroundColor: settings.primaryColor,
                    color: 'white'
                  }}>
                    <span>Header com cor primária</span>
                  </div>
                  <div style={{
                    ...advancedSettingsStyles.previewCard,
                    backgroundColor: settings.secondaryColor,
                    color: 'white'
                  }}>
                    <span>Botão com cor secundária</span>
                  </div>
                </div>
              </div>
            )}

            {activeSettingsTab === 'branding' && (
              <div>
                <h4>🏢 Marca da Empresa</h4>
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>Nome da Empresa:</label>
                  <input
                    type="text"
                    value={settings.companyName}
                    onChange={(e) => updateSetting('companyName', e.target.value)}
                    style={modalStyles.input}
                    placeholder="PRIMEM COMEX"
                  />
                </div>
                
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>Nome do Sistema:</label>
                  <input
                    type="text"
                    value={settings.systemName}
                    onChange={(e) => updateSetting('systemName', e.target.value)}
                    style={modalStyles.input}
                    placeholder="WHATSAPP BUSINESS"
                  />
                </div>
                
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>URL do Logo:</label>
                  <input
                    type="url"
                    value={settings.logoUrl}
                    onChange={(e) => updateSetting('logoUrl', e.target.value)}
                    style={modalStyles.input}
                    placeholder="https://exemplo.com/logo.png"
                  />
                  <small style={modalStyles.hint}>
                    URL da imagem do logo (deixe vazio para usar padrão)
                  </small>
                </div>

                {settings.logoUrl && (
                  <div style={advancedSettingsStyles.logoPreview}>
                    <h5>🖼️ Preview do Logo:</h5>
                    <img 
                      src={settings.logoUrl} 
                      alt="Logo Preview" 
                      style={advancedSettingsStyles.logoImg}
                      onError={(e) => {
                        e.target.style.display = 'none';
                      }}
                    />
                  </div>
                )}
              </div>
            )}

            {activeSettingsTab === 'interface' && (
              <div>
                <h4>🖥️ Textos da Interface</h4>
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>Botão de Login:</label>
                  <input
                    type="text"
                    value={settings.loginButtonText}
                    onChange={(e) => updateSetting('loginButtonText', e.target.value)}
                    style={modalStyles.input}
                    placeholder="ENTRAR NO SISTEMA"
                  />
                </div>
                
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>Botão de Enviar:</label>
                  <input
                    type="text"
                    value={settings.sendButtonText}
                    onChange={(e) => updateSetting('sendButtonText', e.target.value)}
                    style={modalStyles.input}
                    placeholder="Enviar"
                  />
                </div>
                
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>Botão de Anexar:</label>
                  <input
                    type="text"
                    value={settings.attachButtonText}
                    onChange={(e) => updateSetting('attachButtonText', e.target.value)}
                    style={modalStyles.input}
                    placeholder="Anexar"
                  />
                </div>
                
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>Botão Conectar WhatsApp:</label>
                  <input
                    type="text"
                    value={settings.connectButtonText}
                    onChange={(e) => updateSetting('connectButtonText', e.target.value)}
                    style={modalStyles.input}
                    placeholder="Conectar WhatsApp"
                  />
                </div>
              </div>
            )}

            {activeSettingsTab === 'behavior' && (
              <div>
                <h4>⚡ Comportamento do Sistema</h4>
                <div style={advancedSettingsStyles.switchGroup}>
                  <div style={advancedSettingsStyles.switchItem}>
                    <label>🕐 Mostrar horários nas mensagens</label>
                    <input
                      type="checkbox"
                      checked={settings.showTimestamps}
                      onChange={(e) => updateSetting('showTimestamps', e.target.checked)}
                      style={advancedSettingsStyles.switch}
                    />
                  </div>
                  
                  <div style={advancedSettingsStyles.switchItem}>
                    <label>✅ Mostrar status de entrega</label>
                    <input
                      type="checkbox"
                      checked={settings.showDeliveryStatus}
                      onChange={(e) => updateSetting('showDeliveryStatus', e.target.checked)}
                      style={advancedSettingsStyles.switch}
                    />
                  </div>
                  
                  <div style={advancedSettingsStyles.switchItem}>
                    <label>🔊 Sons de notificação</label>
                    <input
                      type="checkbox"
                      checked={settings.enableSounds}
                      onChange={(e) => updateSetting('enableSounds', e.target.checked)}
                      style={advancedSettingsStyles.switch}
                    />
                  </div>
                  
                  <div style={advancedSettingsStyles.switchItem}>
                    <label>📥 Download automático de mídia</label>
                    <input
                      type="checkbox"
                      checked={settings.autoDownloadMedia}
                      onChange={(e) => updateSetting('autoDownloadMedia', e.target.checked)}
                      style={advancedSettingsStyles.switch}
                    />
                  </div>
                  
                  <div style={advancedSettingsStyles.switchItem}>
                    <label>📱 Modo compacto</label>
                    <input
                      type="checkbox"
                      checked={settings.compactMode}
                      onChange={(e) => updateSetting('compactMode', e.target.checked)}
                      style={advancedSettingsStyles.switch}
                    />
                  </div>
                </div>
                
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>📁 Tamanho máximo de arquivo (MB):</label>
                  <input
                    type="number"
                    value={settings.maxFileSize}
                    onChange={(e) => updateSetting('maxFileSize', parseInt(e.target.value))}
                    style={modalStyles.input}
                    min="1"
                    max="100"
                  />
                </div>
              </div>
            )}
          </div>
        </div>
        
        <div style={modalStyles.footer}>
          <button style={modalStyles.cancelBtn} onClick={onClose}>
            Cancelar
          </button>
          <button style={modalStyles.saveBtn} onClick={handleSave}>
            💾 Salvar Configurações
          </button>
        </div>
      </div>
    </div>
  );
};

const advancedSettingsStyles = {
  tabs: {
    display: 'flex',
    borderBottom: '1px solid #eee',
    marginBottom: '20px'
  },
  tab: {
    flex: 1,
    padding: '10px 8px',
    background: 'none',
    border: 'none',
    cursor: 'pointer',
    fontSize: '12px',
    color: '#666',
    transition: 'all 0.3s',
    borderBottom: '2px solid transparent'
  },
  tabActive: {
    color: '#2B4C8C',
    borderBottom: '2px solid #2B4C8C',
    fontWeight: 'bold'
  },
  content: {
    maxHeight: '400px',
    overflowY: 'auto',
    padding: '10px 0'
  },
  colorGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
    gap: '15px',
    marginBottom: '20px'
  },
  colorItem: {
    display: 'flex',
    flexDirection: 'column',
    gap: '8px'
  },
  colorInputContainer: {
    display: 'flex',
    alignItems: 'center',
    gap: '10px'
  },
  colorInput: {
    width: '50px',
    height: '30px',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer'
  },
  colorValue: {
    fontSize: '12px',
    color: '#666',
    fontFamily: 'monospace'
  },
  preview: {
    marginTop: '20px',
    padding: '15px',
    backgroundColor: '#f8f9fa',
    borderRadius: '8px'
  },
  previewCard: {
    padding: '10px',
    borderRadius: '5px',
    marginBottom: '8px',
    textAlign: 'center'
  },
  formGroup: {
    marginBottom: '20px'
  },
  switchGroup: {
    display: 'flex',
    flexDirection: 'column',
    gap: '15px',
    marginBottom: '20px'
  },
  switchItem: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '10px',
    backgroundColor: '#f8f9fa',
    borderRadius: '8px'
  },
  switch: {
    width: '50px',
    height: '25px',
    cursor: 'pointer'
  },
  logoPreview: {
    marginTop: '15px',
    textAlign: 'center'
  },
  logoImg: {
    maxWidth: '200px',
    maxHeight: '100px',
    borderRadius: '8px',
    border: '1px solid #ddd'
  }
};

// MODAL DE CONFIGURAÇÃO DE USUÁRIO (Mantido da v7.0)
const UserProfileModal = ({ isOpen, onClose, currentUser, onSave }) => {
  const [profileData, setProfileData] = useState({
    name: '',
    email: '',
    displayName: '',
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (isOpen && currentUser) {
      setProfileData({
        name: currentUser.name || '',
        email: currentUser.email || '',
        displayName: currentUser.displayName || currentUser.name || '',
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
      setErrors({});
    }
  }, [isOpen, currentUser]);

  const validateForm = () => {
    const newErrors = {};
    
    if (!profileData.name.trim()) {
      newErrors.name = 'Nome é obrigatório';
    }
    
    if (!profileData.email.trim()) {
      newErrors.email = 'Email é obrigatório';
    } else if (!/\S+@\S+\.\S+/.test(profileData.email)) {
      newErrors.email = 'Email inválido';
    }
    
    if (!profileData.displayName.trim()) {
      newErrors.displayName = 'Nome de exibição é obrigatório';
    }
    
    if (profileData.newPassword) {
      if (profileData.newPassword.length < 3) {
        newErrors.newPassword = 'Nova senha deve ter pelo menos 3 caracteres';
      }
      
      if (profileData.newPassword !== profileData.confirmPassword) {
        newErrors.confirmPassword = 'Senhas não coincidem';
      }
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSave = () => {
    if (validateForm()) {
      onSave(profileData);
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div style={modalStyles.overlay} onClick={onClose}>
      <div style={{...modalStyles.modal, minWidth: '500px'}} onClick={(e) => e.stopPropagation()}>
        <div style={modalStyles.header}>
          <h3 style={modalStyles.title}>👤 Configuração de Usuário</h3>
          <button style={modalStyles.closeBtn} onClick={onClose}>❌</button>
        </div>
        
        <div style={modalStyles.body}>
          <div style={modalStyles.formGroup}>
            <label style={modalStyles.label}>Nome completo:</label>
            <input
              type="text"
              value={profileData.name}
              onChange={(e) => setProfileData(prev => ({...prev, name: e.target.value}))}
              style={{...modalStyles.input, ...(errors.name ? modalStyles.inputError : {})}}
              placeholder="Seu nome completo..."
            />
            {errors.name && <span style={modalStyles.error}>{errors.name}</span>}
          </div>

          <div style={modalStyles.formGroup}>
            <label style={modalStyles.label}>Email:</label>
            <input
              type="email"
              value={profileData.email}
              onChange={(e) => setProfileData(prev => ({...prev, email: e.target.value}))}
              style={{...modalStyles.input, ...(errors.email ? modalStyles.inputError : {})}}
              placeholder="seu@email.com"
            />
            {errors.email && <span style={modalStyles.error}>{errors.email}</span>}
          </div>

          <div style={modalStyles.formGroup}>
            <label style={modalStyles.label}>Nome de exibição nas mensagens:</label>
            <input
              type="text"
              value={profileData.displayName}
              onChange={(e) => setProfileData(prev => ({...prev, displayName: e.target.value}))}
              style={{...modalStyles.input, ...(errors.displayName ? modalStyles.inputError : {})}}
              placeholder="Como seu nome aparecerá nas mensagens..."
            />
            {errors.displayName && <span style={modalStyles.error}>{errors.displayName}</span>}
            <small style={modalStyles.hint}>
              Este nome aparecerá nas mensagens que você enviar
            </small>
          </div>

          <div style={modalStyles.separator}>
            <h4 style={modalStyles.sectionTitle}>Alterar Senha (Opcional)</h4>
          </div>

          <div style={modalStyles.formGroup}>
            <label style={modalStyles.label}>Nova senha:</label>
            <div style={modalStyles.passwordContainer}>
              <input
                type={showPassword ? "text" : "password"}
                value={profileData.newPassword}
                onChange={(e) => setProfileData(prev => ({...prev, newPassword: e.target.value}))}
                style={{...modalStyles.input, ...(errors.newPassword ? modalStyles.inputError : {}), paddingRight: '40px'}}
                placeholder="Digite a nova senha..."
              />
              <button
                type="button"
                style={modalStyles.passwordToggle}
                onClick={() => setShowPassword(!showPassword)}
              >
                {showPassword ? '🙈' : '👁️'}
              </button>
            </div>
            {errors.newPassword && <span style={modalStyles.error}>{errors.newPassword}</span>}
          </div>

          {profileData.newPassword && (
            <div style={modalStyles.formGroup}>
              <label style={modalStyles.label}>Confirmar nova senha:</label>
              <input
                type={showPassword ? "text" : "password"}
                value={profileData.confirmPassword}
                onChange={(e) => setProfileData(prev => ({...prev, confirmPassword: e.target.value}))}
                style={{...modalStyles.input, ...(errors.confirmPassword ? modalStyles.inputError : {})}}
                placeholder="Confirme a nova senha..."
              />
              {errors.confirmPassword && <span style={modalStyles.error}>{errors.confirmPassword}</span>}
            </div>
          )}
        </div>
        
        <div style={modalStyles.footer}>
          <button style={modalStyles.cancelBtn} onClick={onClose}>
            Cancelar
          </button>
          <button style={modalStyles.saveBtn} onClick={handleSave}>
            💾 Salvar Perfil
          </button>
        </div>
      </div>
    </div>
  );
};

// Estilos do Modal expandidos
const modalStyles = {
  overlay: {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000
  },
  modal: {
    backgroundColor: 'white',
    borderRadius: '10px',
    boxShadow: '0 10px 30px rgba(0, 0, 0, 0.3)',
    minWidth: '400px',
    maxWidth: '500px',
    width: '90%',
    maxHeight: '90vh',
    overflowY: 'auto'
  },
  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '20px 20px 0 20px',
    borderBottom: '1px solid #eee',
    paddingBottom: '15px',
    marginBottom: '20px'
  },
  title: {
    margin: 0,
    color: '#2B4C8C',
    fontSize: '18px'
  },
  closeBtn: {
    background: 'none',
    border: 'none',
    fontSize: '20px',
    cursor: 'pointer',
    color: '#666',
    padding: '5px'
  },
  body: {
    padding: '0 20px'
  },
  formGroup: {
    marginBottom: '20px'
  },
  label: {
    display: 'block',
    marginBottom: '8px',
    fontWeight: '500',
    color: '#333',
    fontSize: '14px'
  },
  input: {
    width: '100%',
    padding: '12px',
    border: '2px solid #ddd',
    borderRadius: '5px',
    fontSize: '14px',
    transition: 'border-color 0.3s',
    boxSizing: 'border-box'
  },
  inputError: {
    borderColor: '#dc3545'
  },
  hint: {
    display: 'block',
    marginTop: '5px',
    color: '#666',
    fontSize: '12px'
  },
  error: {
    display: 'block',
    color: '#dc3545',
    fontSize: '12px',
    marginTop: '5px'
  },
  separator: {
    margin: '25px 0',
    paddingTop: '15px',
    borderTop: '1px solid #eee'
  },
  sectionTitle: {
    margin: '0 0 15px 0',
    color: '#2B4C8C',
    fontSize: '16px'
  },
  passwordContainer: {
    position: 'relative'
  },
  passwordToggle: {
    position: 'absolute',
    right: '10px',
    top: '50%',
    transform: 'translateY(-50%)',
    background: 'none',
    border: 'none',
    cursor: 'pointer',
    fontSize: '16px',
    color: '#666'
  },
  footer: {
    display: 'flex',
    justifyContent: 'flex-end',
    gap: '10px',
    padding: '20px',
    borderTop: '1px solid #eee',
    marginTop: '20px'
  },
  cancelBtn: {
    padding: '10px 20px',
    backgroundColor: '#6c757d',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px'
  },
  saveBtn: {
    padding: '10px 20px',
    backgroundColor: '#2B4C8C',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: '500'
  }
};

// ====================================
// CONFIGURAÇÃO DE TEMA PRIMEM v8.0
// ====================================
const PRIMEM_THEME = {
  colors: {
    primary: '#2B4C8C',
    secondary: '#C97A4A', 
    accent: '#8B9DC3',
    success: '#28a745',
    danger: '#dc3545',
    warning: '#ffc107',
    light: '#f8f9fa',
    dark: '#343a40',
    white: '#ffffff',
    background: '#f0f2f5',
    text: '#333333',
    border: '#dee2e6'
  }
};

// ====================================
// COMPONENTE PRINCIPAL v8.0 - TODAS AS MELHORIAS IMPLEMENTADAS
// ====================================
export default function PrimemWhatsApp() {
  // Estados - Autenticação
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [email, setEmail] = useState('teste@teste.com');
  const [password, setPassword] = useState('123');
  const [currentUser, setCurrentUser] = useState(null);
  
  // ====================================
  // 🆕 ESTADOS v8.0 - TODAS AS NOVAS FUNCIONALIDADES
  // ====================================
  
  // AGENDAMENTO DE MENSAGENS
  const [showScheduleModal, setShowScheduleModal] = useState(false);
  const [scheduledMessages, setScheduledMessages] = useState([]);
  
  // BASE DE CONHECIMENTO
  const [showKnowledgeModal, setShowKnowledgeModal] = useState(false);
  
  // FORMATAÇÃO DE TEXTO
  const [showFormatModal, setShowFormatModal] = useState(false);
  
  // GESTÃO DE USUÁRIOS
  const [showUserManagementModal, setShowUserManagementModal] = useState(false);
  
  // CONFIGURAÇÃO DE USUÁRIO
  const [showUserProfileModal, setShowUserProfileModal] = useState(false);
  const [userSettings, setUserSettings] = useState({
    displayName: '',
    theme: 'light',
    notifications: true
  });
  
  // CONFIGURAÇÕES AVANÇADAS
  const [showAdvancedSettingsModal, setShowAdvancedSettingsModal] = useState(false);
  const [advancedSettings, setAdvancedSettings] = useState({
    primaryColor: '#2B4C8C',
    secondaryColor: '#C97A4A',
    accentColor: '#8B9DC3',
    backgroundColor: '#f0f2f5',
    companyName: 'PRIMEM COMEX',
    systemName: 'WHATSAPP BUSINESS',
    loginButtonText: 'ENTRAR NO SISTEMA',
    sendButtonText: 'Enviar',
    attachButtonText: 'Anexar',
    connectButtonText: 'Conectar WhatsApp',
    showTimestamps: true,
    showDeliveryStatus: true,
    enableSounds: true,
    maxFileSize: 16,
    autoDownloadMedia: true,
    compactMode: false
  });
  
  // Estados - WhatsApp
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [qrCode, setQrCode] = useState('');
  const [whatsappInfo, setWhatsappInfo] = useState(null);
  
  // Estados - Interface
  const [activeTab, setActiveTab] = useState('chats');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedChat, setSelectedChat] = useState(null);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  
  // ESTADOS PARA SUB-TABS DAS CONFIGURAÇÕES
  const [activeSettingsTab, setActiveSettingsTab] = useState('system');
  
  // Estados - Modal
  const [showEditNameModal, setShowEditNameModal] = useState(false);
  
  // Estados - Gravação de Áudio
  const [showAudioRecorder, setShowAudioRecorder] = useState(false);
  
  // ASSINATURA
  const [signatureEnabled, setSignatureEnabled] = useState(true);
  
  // Estados - Chat
  const [conversations, setConversations] = useState([]);
  const [messages, setMessages] = useState({});
  const [newMessage, setNewMessage] = useState('');
  const [selectedFile, setSelectedFile] = useState(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [isUploading, setIsUploading] = useState(false);
  const [replyTo, setReplyTo] = useState(null);
  
  // Referências
  const socketRef = useRef(null);
  const messagesEndRef = useRef(null);
  const fileInputRef = useRef(null);
  const messageInputRef = useRef(null);
  
  const API_URL = 'http://localhost:3001';

  // ====================================
  // 🆕 FUNÇÕES v8.0 - TODAS AS NOVAS FUNCIONALIDADES
  // ====================================

  // AGENDAMENTO DE MENSAGENS
  const handleScheduleMessage = (messageData) => {
    console.log('Mensagem agendada:', messageData);
    setScheduledMessages(prev => [...prev, messageData]);
    
    // Simular envio automático (em produção seria feito pelo servidor)
    if (messageData.chatId && messageData.message) {
      // Aqui você integraria com o backend para agendar o envio
      alert(`Mensagem agendada para ${new Date(messageData.scheduledFor).toLocaleString('pt-BR')}!`);
    }
    
    setShowScheduleModal(false);
  };

  // BASE DE CONHECIMENTO
  const handleSelectKnowledgeMessage = (messageContent) => {
    setNewMessage(prev => prev + messageContent);
    console.log('Mensagem da base de conhecimento selecionada:', messageContent);
  };

  // FORMATAÇÃO DE TEXTO
  const handleApplyTextFormat = (formattedText) => {
    setNewMessage(formattedText);
    console.log('Texto formatado aplicado:', formattedText);
  };

  // 🔘 MARCAR COMO NÃO LIDO v8.0
  const markAsUnread = (chatId) => {
    setConversations(prev =>
      prev.map(conv => 
        conv.id === chatId 
          ? { ...conv, unread: (conv.unread || 0) + 1 }
          : conv
      )
    );
    
    console.log('Chat marcado como não lido:', chatId);
    
    // Feedback visual
    const chatElement = document.querySelector(`[data-chat-id="${chatId}"]`);
    if (chatElement) {
      chatElement.style.backgroundColor = '#fff3cd';
      setTimeout(() => {
        chatElement.style.backgroundColor = '';
      }, 1000);
    }
  };

  // ====================================
  // 📷 FOTOS MELHORADAS v8.0 - Sistema aprimorado
  // ====================================
  const getContactPhoto = useCallback((contact, messageData) => {
    console.log('🔍 [FOTO] Buscando foto do contato:', contact);
    
    // Múltiplas fontes de foto com prioridade
    const photoSources = [
      contact?.profilePicUrl,
      contact?.avatar, 
      contact?.profilePic,
      messageData?.contact?.profilePicUrl,
      messageData?.contact?.avatar,
      messageData?.contact?.profilePic,
      messageData?.profilePicUrl,
      messageData?.avatar,
      messageData?.profilePic
    ];

    console.log('📷 [FOTO] Fontes encontradas:', photoSources.filter(Boolean));

    for (const source of photoSources) {
      if (source && 
          typeof source === 'string' && 
          source.length > 10 && 
          !source.includes('undefined') && 
          !source.includes('null') &&
          (source.startsWith('http') || source.startsWith('data:'))) {
        
        console.log('✅ [FOTO] Foto válida encontrada:', source.substring(0, 50) + '...');
        return source;
      }
    }

    console.log('❌ [FOTO] Nenhuma foto válida encontrada');
    return null;
  }, []);

  // CARREGAR CONFIGURAÇÕES
  useEffect(() => {
    const savedSettings = localStorage.getItem('primem_user_settings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        setUserSettings(parsed);
      } catch (error) {
        console.warn('Erro ao carregar configurações:', error);
      }
    }
    
    const savedAdvancedSettings = localStorage.getItem('primem_advanced_settings');
    if (savedAdvancedSettings) {
      try {
        const parsed = JSON.parse(savedAdvancedSettings);
        setAdvancedSettings(prev => ({ ...prev, ...parsed }));
      } catch (error) {
        console.warn('Erro ao carregar configurações avançadas:', error);
      }
    }
    
    const savedSignature = localStorage.getItem('primem_signature_enabled');
    if (savedSignature !== null) {
      setSignatureEnabled(JSON.parse(savedSignature));
    }

    // 🆕 v8.0: Carregar mensagens agendadas
    const savedScheduled = localStorage.getItem('primem_scheduled_messages');
    if (savedScheduled) {
      try {
        const parsed = JSON.parse(savedScheduled);
        const pending = parsed.filter(msg => new Date(msg.scheduledFor) > new Date());
        setScheduledMessages(pending);
        
        // Reagendar mensagens pendentes
        pending.forEach(msg => {
          const delay = new Date(msg.scheduledFor).getTime() - new Date().getTime();
          if (delay > 0) {
            setTimeout(() => {
              console.log('Enviando mensagem agendada:', msg);
              // Aqui você integraria com a função de envio
            }, delay);
          }
        });
      } catch (error) {
        console.warn('Erro ao carregar mensagens agendadas:', error);
      }
    }
  }, []);

  // SALVAR CONFIGURAÇÕES DO USUÁRIO
  const saveUserSettings = (newSettings) => {
    try {
      const updatedSettings = { ...userSettings, ...newSettings };
      setUserSettings(updatedSettings);
      localStorage.setItem('primem_user_settings', JSON.stringify(updatedSettings));
      
      if (currentUser) {
        const updatedUser = { ...currentUser, ...newSettings };
        setCurrentUser(updatedUser);
        localStorage.setItem('primem_current_user', JSON.stringify(updatedUser));
      }
      
      alert('Perfil salvo com sucesso!');
    } catch (error) {
      console.error('Erro ao salvar configurações:', error);
      alert('Erro ao salvar configurações');
    }
  };

  // SALVAR CONFIGURAÇÕES AVANÇADAS
  const saveAdvancedSettings = (newSettings) => {
    try {
      const updatedSettings = { ...advancedSettings, ...newSettings };
      setAdvancedSettings(updatedSettings);
      localStorage.setItem('primem_advanced_settings', JSON.stringify(updatedSettings));
      alert('Configurações avançadas salvas com sucesso!');
    } catch (error) {
      console.error('Erro ao salvar configurações avançadas:', error);
      alert('Erro ao salvar configurações avançadas');
    }
  };

  // TOGGLE ASSINATURA
  const toggleSignature = () => {
    const newSignatureState = !signatureEnabled;
    setSignatureEnabled(newSignatureState);
    localStorage.setItem('primem_signature_enabled', JSON.stringify(newSignatureState));
  };

  // ====================================
  // SOCKET.IO - CONFIGURAÇÃO COMPLETA (Mantido)
  // ====================================
  useEffect(() => {
    if (isLoggedIn && !socketRef.current) {
      const socket = io(API_URL, {
        transports: ['websocket'],
        reconnection: true,
        reconnectionAttempts: 10,
        reconnectionDelay: 1000,
      });
      
      socketRef.current = socket;
      
      socket.on('connect', () => {
        console.log('Socket conectado:', socket.id);
        loadInitialData();
      });
      
      socket.on('disconnect', () => {
        console.log('Socket desconectado');
        setIsConnected(false);
      });
      
      socket.on('whatsapp:qr', (data) => {
        console.log('QR Code recebido');
        setQrCode(data.qrCode);
        setIsConnecting(true);
      });
      
      socket.on('whatsapp:ready', (data) => {
        console.log('WhatsApp conectado:', data);
        setIsConnected(true);
        setIsConnecting(false);
        setQrCode('');
        setWhatsappInfo(data.info);
        loadChats();
      });
      
      socket.on('whatsapp:authenticated', () => {
        console.log('WhatsApp autenticado');
        setIsConnected(true);
        setIsConnecting(false);
        setQrCode('');
      });
      
      socket.on('whatsapp:disconnected', () => {
        console.log('WhatsApp desconectado');
        setIsConnected(false);
        setWhatsappInfo(null);
      });
      
      socket.on('whatsapp:message_received', handleIncomingMessage);
      socket.on('whatsapp:message_sent', handleSentMessage);
      
      socket.on('whatsapp:chats', (data) => {
        console.log('Chats recebidos:', data);
        setConversations(data.chats || []);
      });
      
      socket.on('whatsapp:messages', (data) => {
        console.log('Histórico recebido:', data);
        if (data.chatId && data.messages) {
          setMessages(prev => ({
            ...prev,
            [data.chatId]: data.messages
          }));
        }
      });
      
      return () => {
        console.log('Desconectando Socket.IO...');
        socket.disconnect();
        socketRef.current = null;
      };
    }
  }, [isLoggedIn]);

  // Auto scroll
  useEffect(() => {
    scrollToBottom();
  }, [messages, selectedChat]);

  // Auto resize do textarea
  const adjustTextareaHeight = useCallback(() => {
    if (messageInputRef.current) {
      const textarea = messageInputRef.current;
      textarea.style.height = 'auto';
      const scrollHeight = textarea.scrollHeight;
      const maxHeight = 200;
      textarea.style.height = Math.min(scrollHeight, maxHeight) + 'px';
    }
  }, []);

  useEffect(() => {
    adjustTextareaHeight();
  }, [newMessage, adjustTextareaHeight]);

  // ====================================
  // FUNÇÕES - AUTENTICAÇÃO (Mantidas)
  // ====================================
  const handleLogin = async () => {
    try {
      const response = await fetch(`${API_URL}/api/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password })
      });
      
      const data = await response.json();
      
      if (data.success) {
        console.log('Login bem-sucedido:', data.user);
        
        const savedUser = localStorage.getItem('primem_current_user');
        let userData = data.user;
        
        if (savedUser) {
          try {
            const parsed = JSON.parse(savedUser);
            userData = { ...data.user, ...parsed };
          } catch (error) {
            console.warn('Erro ao carregar dados salvos do usuário');
          }
        }
        
        if (!userData.displayName) {
          userData.displayName = userData.name;
        }
        
        setCurrentUser(userData);
        setUserSettings(prev => ({
          ...prev,
          displayName: userData.displayName || userData.name
        }));
        
        setIsLoggedIn(true);
        localStorage.setItem('primem_current_user', JSON.stringify(userData));
        
      } else {
        alert('Erro: ' + data.message);
      }
    } catch (error) {
      console.error('Erro no login:', error);
      alert('Erro ao fazer login. Verifique se o servidor está rodando.');
    }
  };
  
  const handleLogout = () => {
    if (socketRef.current) {
      socketRef.current.disconnect();
    }
    setIsLoggedIn(false);
    setCurrentUser(null);
    setIsConnected(false);
    setConversations([]);
    setMessages({});
    console.log('Logout realizado');
  };

  // ====================================
  // FUNÇÕES - WHATSAPP (Mantidas)
  // ====================================
  const connectWhatsApp = async () => {
    try {
      setIsConnecting(true);
      const response = await fetch(`${API_URL}/api/whatsapp/connect`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      const data = await response.json();
      console.log('Conectando WhatsApp:', data);
    } catch (error) {
      console.error('Erro ao conectar:', error);
      setIsConnecting(false);
      alert('Erro ao conectar WhatsApp');
    }
  };
  
  const disconnectWhatsApp = async () => {
    try {
      const response = await fetch(`${API_URL}/api/whatsapp/disconnect`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      const data = await response.json();
      console.log('WhatsApp desconectado:', data);
    } catch (error) {
      console.error('Erro ao desconectar:', error);
    }
  };

  // ====================================
  // FUNÇÕES - DADOS (Mantidas)
  // ====================================
  const loadInitialData = () => {
    if (socketRef.current) {
      socketRef.current.emit('request:status');
    }
  };
  
  const loadChats = async () => {
    try {
      const response = await fetch(`${API_URL}/api/whatsapp/chats`);
      const data = await response.json();
      
      if (data.success) {
        setConversations(data.chats || []);
      }
    } catch (error) {
      console.error('Erro ao carregar chats:', error);
    }
  };
  
  const loadMessages = async (chatId) => {
    try {
      const response = await fetch(`${API_URL}/api/whatsapp/messages/${chatId}`);
      const data = await response.json();
      
      if (data.success) {
        const serverMessages = data.messages || [];
        
        setMessages(prev => {
          const existingMessages = prev[chatId] || [];
          
          const existingMap = new Map();
          existingMessages.forEach(msg => {
            existingMap.set(msg.id, msg);
          });
          
          serverMessages.forEach(msg => {
            if (!existingMap.has(msg.id)) {
              existingMap.set(msg.id, {
                ...msg,
                timestamp: new Date(msg.timestamp),
                type: msg.fromMe ? 'sent' : 'received'
              });
            }
          });
          
          const mergedMessages = Array.from(existingMap.values())
            .sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
          
          return {
            ...prev,
            [chatId]: mergedMessages
          };
        });
      }
    } catch (error) {
      console.error('Erro ao carregar mensagens:', error);
    }
  };

  // ====================================
  // 📷 FUNÇÕES DE MENSAGENS COM FOTOS MELHORADAS v8.0
  // ====================================
  const handleIncomingMessage = (messageData) => {
    console.log('📩 [ENTRADA] Mensagem recebida completa:', messageData);
    
    if (messageData.hasMedia && messageData.media) {
      const { url } = messageData.media;
      
      const invalidUrls = ['uploading...', 'uploading', 'processing', 'undefined', 'null', '', null, undefined];
      const containsInvalidKeywords = url && (
        url.includes('uploading') || 
        url.includes('processing') || 
        url.includes('undefined') || 
        url.includes('null') ||
        url.includes('temp') ||
        url.includes('blob:') ||
        url.length < 5
      );
      
      if (!url || invalidUrls.includes(url) || containsInvalidKeywords) {
        console.log('🚫 [ENTRADA] Mensagem com mídia inválida rejeitada:', url);
        return;
      }
    }
    
    const chatId = messageData.from;
    
    // 📷 v8.0: Sistema melhorado de fotos dos contatos
    const contactPhoto = getContactPhoto(messageData.contact, messageData);
    
    console.log('👤 [FOTO] Foto do contato processada:', contactPhoto ? 'Encontrada' : 'Não encontrada');
    
    setConversations(prev => {
      const exists = prev.find(c => c.id === chatId);
      if (!exists) {
        const newConv = {
          id: chatId,
          name: messageData.contact?.name || messageData.notifyName || chatId,
          lastMessage: messageData.body || '[Mídia]',
          timestamp: messageData.timestamp,
          unread: 1,
          avatar: contactPhoto
        };
        
        console.log('➕ [CONVERSA] Nova conversa criada:', newConv);
        return [newConv, ...prev];
      }
      
      return prev.map(conv => 
        conv.id === chatId
          ? { 
              ...conv, 
              lastMessage: messageData.body || '[Mídia]',
              timestamp: messageData.timestamp,
              unread: (conv.unread || 0) + 1,
              avatar: contactPhoto || conv.avatar,
              name: messageData.contact?.name || messageData.notifyName || conv.name
            }
          : conv
      );
    });
    
    setMessages(prev => {
      const existingMessages = prev[chatId] || [];
      
      const messageExists = existingMessages.some(msg => msg.id === messageData.id);
      if (messageExists) {
        console.log('🔄 [ENTRADA] Mensagem duplicada ignorada:', messageData.id);
        return prev;
      }
      
      const newMessage = {
        ...messageData,
        timestamp: new Date(messageData.timestamp),
        type: 'received'
      };
      
      console.log('✅ [ENTRADA] Nova mensagem adicionada:', newMessage);
      
      return {
        ...prev,
        [chatId]: [...existingMessages, newMessage]
      };
    });
    
    playNotificationSound();
  };
  
  const handleSentMessage = (data) => {
    console.log('📤 [SAÍDA] Mensagem enviada confirmada:', data);
    
    if (data.hasMedia && data.media) {
      const { url } = data.media;
      
      const invalidUrls = ['uploading...', 'uploading', 'processing', 'undefined', 'null', '', null, undefined];
      const containsInvalidKeywords = url && (
        url.includes('uploading') || 
        url.includes('processing') || 
        url.includes('undefined') || 
        url.includes('null') ||
        url.includes('temp') ||
        url.includes('blob:') ||
        url.length < 5
      );
      
      if (!url || invalidUrls.includes(url) || containsInvalidKeywords) {
        console.log('🚫 [SAÍDA] Confirmação com mídia inválida rejeitada:', url);
        return;
      }
    }
    
    const chatId = data.to;
    
    setConversations(prev => 
      prev.map(conv => 
        conv.id === chatId
          ? { 
              ...conv, 
              lastMessage: data.body || '[Mídia]',
              timestamp: data.timestamp
            }
          : conv
      )
    );
    
    setMessages(prev => {
      const existingMessages = prev[chatId] || [];
      
      const messageExists = existingMessages.some(msg => msg.id === data.id);
      if (messageExists) {
        console.log('🔄 [SAÍDA] Mensagem enviada duplicada ignorada:', data.id);
        return prev;
      }
      
      const senderName = signatureEnabled ? (userSettings.displayName || currentUser?.displayName || currentUser?.name || 'Você') : '';
      
      const newMessage = {
        id: data.id || Date.now(),
        body: data.body,
        fromMe: true,
        timestamp: new Date(data.timestamp || Date.now()),
        status: 'sent',
        media: data.media,
        hasMedia: data.hasMedia,
        type: 'sent',
        senderName: senderName
      };
      
      console.log('✅ [SAÍDA] Mensagem confirmada adicionada:', newMessage);
      
      return {
        ...prev,
        [chatId]: [...existingMessages, newMessage]
      };
    });
  };
  
  // ====================================
  // FUNÇÃO sendMessage COM RESPOSTA MELHORADA v8.0
  // ====================================
  const sendMessage = async () => {
    if (!newMessage.trim() && !selectedFile) return;
    if (!selectedChat) return;
    
    const senderName = signatureEnabled ? (userSettings.displayName || currentUser?.displayName || currentUser?.name || 'Você') : '';
    
    // Função de responder melhorada - inclui texto original
    let messageForWhatsApp = newMessage.trim();
    
    if (replyTo && replyTo.body) {
      const originalText = replyTo.body.length > 50 ? 
        replyTo.body.substring(0, 50) + '...' : 
        replyTo.body;
      messageForWhatsApp = `📝 Respondendo: "${originalText}"\n\n${messageForWhatsApp}`;
    }
    
    if (messageForWhatsApp && signatureEnabled && senderName) {
      messageForWhatsApp = `*${senderName}:*\n${messageForWhatsApp}`;
    }
    
    const tempMessageId = 'temp_' + Date.now();
    const now = new Date();
    
    if (!selectedFile) {
      const localMessage = {
        id: tempMessageId,
        body: newMessage,
        fromMe: true,
        timestamp: now,
        status: 'sending',
        type: 'sent',
        senderName: senderName,
        replyTo: replyTo
      };
      
      setMessages(prev => ({
        ...prev,
        [selectedChat.id]: [...(prev[selectedChat.id] || []), localMessage]
      }));
    }
    
    const messageToSend = messageForWhatsApp;
    const fileToSend = selectedFile;
    setNewMessage('');
    setSelectedFile(null);
    setReplyTo(null);
    
    if (messageInputRef.current) {
      messageInputRef.current.style.height = 'auto';
    }
    
    try {
      if (fileToSend) {
        let phoneNumber = selectedChat.id;
        
        if (phoneNumber.includes('@')) {
          phoneNumber = phoneNumber.split('@')[0];
        }
        
        const formData = new FormData();
        formData.append('file', fileToSend);
        formData.append('number', phoneNumber);
        formData.append('to', phoneNumber);
        formData.append('chatId', selectedChat.id);
        formData.append('caption', messageToSend);
        
        setIsUploading(true);
        
        const response = await fetch(`${API_URL}/api/whatsapp/send-media`, {
          method: 'POST',
          body: formData
        });
        
        const data = await response.json();
        
        if (data.success && data.file && data.file.url && !data.file.url.includes('uploading')) {
          const serverMessage = {
            id: data.messageId || `sent_${Date.now()}`,
            body: newMessage,
            fromMe: true,
            timestamp: new Date(),
            status: 'sent',
            media: {
              filename: data.file.filename,
              mimetype: data.file.mimetype,
              size: data.file.size,
              url: data.file.url
            },
            hasMedia: true,
            type: 'sent',
            senderName: senderName
          };
          
          setMessages(prev => ({
            ...prev,
            [selectedChat.id]: [...(prev[selectedChat.id] || []), serverMessage]
          }));
          
          setConversations(prev => 
            prev.map(conv => 
              conv.id === selectedChat.id
                ? { 
                    ...conv, 
                    lastMessage: newMessage || 'Arquivo',
                    timestamp: new Date()
                  }
                : conv
            )
          );
        } else {
          console.error('Dados inválidos do servidor:', data);
          alert('Erro: Arquivo não foi processado corretamente');
        }
        
        setUploadProgress(0);
        setIsUploading(false);
      } else {
        const response = await fetch(`${API_URL}/api/whatsapp/send`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            to: selectedChat.id,
            message: messageToSend
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          setMessages(prev => ({
            ...prev,
            [selectedChat.id]: prev[selectedChat.id].map(msg => 
              msg.id === tempMessageId 
                ? { ...msg, id: data.messageId, status: 'sent' }
                : msg
            )
          }));
        }
      }
    } catch (error) {
      console.error('Erro ao enviar:', error);
      
      if (!selectedFile) {
        setMessages(prev => ({
          ...prev,
          [selectedChat.id]: prev[selectedChat.id].map(msg => 
            msg.id === tempMessageId 
              ? { ...msg, status: 'error' }
              : msg
          )
        }));
      }
      
      alert('Erro ao enviar mensagem');
      setIsUploading(false);
    }
  };

  // HANDLER para teclas especiais no textarea
  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      if (e.shiftKey) {
        return;
      } else {
        e.preventDefault();
        sendMessage();
      }
    }
  };

  // FUNÇÃO PARA APAGAR MENSAGEM CORRIGIDA v8.0
  const deleteMessageForEveryone = async (messageId) => {
    if (!selectedChat || !messageId) return;
    
    const confirmDelete = window.confirm('Tem certeza que deseja apagar esta mensagem para todos?');
    if (!confirmDelete) return;
    
    try {
      // Apenas marcação local, sem chamada para API inexistente
      setMessages(prev => ({
        ...prev,
        [selectedChat.id]: prev[selectedChat.id].map(msg => 
          msg.id === messageId 
            ? { 
                ...msg, 
                isDeleted: true, 
                originalBody: msg.body,
                body: '🚫 Esta mensagem foi apagada', 
                deletedAt: new Date() 
              }
            : msg
        )
      }));
      
      console.log('Mensagem marcada como apagada localmente:', messageId);
      
    } catch (error) {
      console.error('Erro ao apagar mensagem:', error);
      alert('Erro ao apagar mensagem');
    }
  };

  // ====================================
  // FUNÇÕES - AÇÕES DO CHAT REORGANIZADAS (Mantidas)
  // ====================================
  const handleEditName = (newName) => {
    if (!selectedChat || !newName.trim()) return;
    
    setSelectedChat(prev => ({
      ...prev,
      name: newName.trim(),
      customName: newName.trim()
    }));
    
    setConversations(prev => 
      prev.map(conv => 
        conv.id === selectedChat.id 
          ? { ...conv, name: newName.trim(), customName: newName.trim() }
          : conv
      )
    );
    
    setShowEditNameModal(false);
  };

  const handleBlockContact = () => {
    if (!selectedChat) return;
    
    const confirmBlock = window.confirm(`Tem certeza que deseja bloquear ${selectedChat.name}?`);
    
    if (confirmBlock) {
      alert(`${selectedChat.name} foi bloqueado! (Funcionalidade em desenvolvimento)`);
    }
  };

  // ====================================
  // FUNÇÕES - GRAVAÇÃO DE ÁUDIO (Mantidas)
  // ====================================
  const handleStartRecording = () => {
    setShowAudioRecorder(true);
  };
  
  const handleRecordingComplete = async (audioFile) => {
    if (!audioFile || !selectedChat || audioFile.size === 0) {
      alert('Erro: Dados de áudio inválidos');
      return;
    }
    
    setShowAudioRecorder(false);
    
    try {
      let phoneNumber = selectedChat.id;
      
      if (phoneNumber && phoneNumber.includes('@')) {
        phoneNumber = phoneNumber.split('@')[0];
      }
      
      if (!phoneNumber || phoneNumber === 'undefined' || phoneNumber === 'null') {
        alert('Erro: Número do chat inválido');
        return;
      }
      
      const formData = new FormData();
      formData.append('file', audioFile);
      formData.append('number', phoneNumber);
      formData.append('to', phoneNumber);
      formData.append('chatId', selectedChat.id);
      formData.append('caption', '');
      
      setIsUploading(true);
      
      const response = await fetch(`${API_URL}/api/whatsapp/send-media`, {
        method: 'POST',
        body: formData
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erro ${response.status}: ${errorText}`);
      }
      
      const data = await response.json();
      
      if (!data.success || !data.file || !data.file.url) {
        throw new Error(data.message || 'Servidor não retornou informações do arquivo');
      }
      
      const invalidTerms = ['uploading', 'processing', 'undefined', 'null'];
      const hasInvalidTerm = invalidTerms.some(term => 
        data.file.url.includes(term)
      );
      
      if (hasInvalidTerm) {
        throw new Error('Servidor retornou URL inválida para o áudio');
      }
      
      const senderName = signatureEnabled ? (userSettings.displayName || currentUser?.displayName || currentUser?.name || 'Você') : '';
      
      const audioMessage = {
        id: data.messageId || `audio_${Date.now()}`,
        body: '',
        fromMe: true,
        timestamp: new Date(),
        status: 'sent',
        media: {
          filename: data.file.filename || audioFile.name,
          mimetype: data.file.mimetype || audioFile.type,
          size: data.file.size || audioFile.size,
          url: data.file.url
        },
        hasMedia: true,
        type: 'sent',
        senderName: senderName
      };
      
      setMessages(prev => ({
        ...prev,
        [selectedChat.id]: [...(prev[selectedChat.id] || []), audioMessage]
      }));
      
      setConversations(prev => 
        prev.map(conv => 
          conv.id === selectedChat.id
            ? { ...conv, lastMessage: 'Áudio', timestamp: new Date() }
            : conv
        )
      );
      
      setIsUploading(false);
      
    } catch (error) {
      console.error('ERRO COMPLETO ao enviar áudio:', error);
      setIsUploading(false);
      alert(`Erro ao enviar áudio: ${error.message}`);
    }
  };
  
  const handleCancelRecording = () => {
    setShowAudioRecorder(false);
  };

  // ====================================
  // FUNÇÕES - UTILIDADES (Mantidas)
  // ====================================
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };
  
  const playNotificationSound = () => {
    if (advancedSettings.enableSounds) {
      const audio = new Audio('data:audio/wav;base64,UklGRlYFAABXQVZFZm10IBAAAAABAAEAIlYAAESsAAACABAAZGF0YTIAAAA=');
      audio.play().catch(() => {});
    }
  };
  
  const formatTime = (timestamp) => {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    return date.toLocaleTimeString('pt-BR', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };
  
  const formatDate = (timestamp) => {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    const today = new Date();
    
    if (date.toDateString() === today.toDateString()) {
      return 'Hoje';
    }
    
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    if (date.toDateString() === yesterday.toDateString()) {
      return 'Ontem';
    }
    
    return date.toLocaleDateString('pt-BR');
  };
  
  const handleFileSelect = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > advancedSettings.maxFileSize * 1024 * 1024) {
        alert(`Arquivo muito grande! Máximo: ${advancedSettings.maxFileSize}MB`);
        return;
      }
      setSelectedFile(file);
    }
  };
  
  const selectChat = (chat) => {
    setSelectedChat(chat);
    loadMessages(chat.id);
    
    setConversations(prev =>
      prev.map(c => c.id === chat.id ? { ...c, unread: 0 } : c)
    );
  };
  
  const deleteMessage = (messageId) => {
    if (!selectedChat) return;
    
    const confirmDelete = window.confirm('Remover esta mensagem do histórico local?');
    if (!confirmDelete) return;
    
    setMessages(prev => ({
      ...prev,
      [selectedChat.id]: prev[selectedChat.id].filter(m => m.id !== messageId)
    }));
  };
  
  const toggleFavorite = (chatId) => {
    setConversations(prev =>
      prev.map(c => c.id === chatId ? { ...c, favorite: !c.favorite } : c)
    );
  };

  // ====================================
  // RENDERIZAÇÃO DE MÍDIA ULTRA PROTEGIDA v8.0
  // ====================================
  const renderMessageContent = (msg) => {
    // Visual melhorado para mensagens apagadas
    if (msg.isDeleted) {
      return (
        <div style={{
          ...styles.messageText,
          fontStyle: 'italic',
          color: '#666',
          backgroundColor: 'rgba(220, 53, 69, 0.1)',
          padding: '8px',
          borderRadius: '5px',
          border: '1px dashed #dc3545'
        }}>
          {msg.body}
          {msg.deletedAt && (
            <div style={{ fontSize: '11px', color: '#999', marginTop: '4px' }}>
              Apagada em {formatTime(msg.deletedAt)}
            </div>
          )}
        </div>
      );
    }

    if (msg.media) {
      const { mimetype, url, filename } = msg.media;
      
      const invalidUrls = ['uploading...', 'uploading', 'processing', 'undefined', 'null', '', null, undefined];
      const containsInvalidKeywords = url && (
        url.includes('uploading') || 
        url.includes('processing') || 
        url.includes('undefined') || 
        url.includes('null') ||
        url.includes('temp') ||
        url.includes('blob:') ||
        url.length < 5
      );

      if (!url || invalidUrls.includes(url) || containsInvalidKeywords) {
        const mediaType = mimetype?.startsWith('audio/') ? 'áudio' : 
                         mimetype?.startsWith('image/') ? 'imagem' : 
                         mimetype?.startsWith('video/') ? 'vídeo' : 'arquivo';
        
        return (
          <div style={{
            padding: '12px',
            backgroundColor: 'rgba(255, 193, 7, 0.1)',
            borderRadius: '8px',
            border: '1px dashed #ffc107',
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            minWidth: '200px'
          }}>
            <div style={{
              width: '30px',
              height: '30px',
              borderRadius: '50%',
              backgroundColor: '#ffc107',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '14px'
            }}>
              ⏳
            </div>
            <div>
              <div style={{ fontSize: '14px', color: '#856404', fontWeight: '500' }}>
                Processando {mediaType}...
              </div>
              <div style={{ fontSize: '12px', color: '#856404', opacity: 0.8 }}>
                Aguarde o upload completar
              </div>
            </div>
          </div>
        );
      }
      
      let fullUrl = url;
      if (!url.startsWith('http')) {
        fullUrl = url.startsWith('/') 
          ? `http://localhost:3001${url}` 
          : `http://localhost:3001/${url}`;
      }
      
      // IMAGENS
      if (mimetype?.startsWith('image/')) {
        return (
          <div style={styles.mediaContainer}>
            <img
              src={fullUrl}
              alt="📷 Imagem"
              style={{
                maxWidth: '100%',
                maxHeight: '300px',
                borderRadius: '8px',
                cursor: 'pointer',
                display: 'block',
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
              }}
              onClick={() => window.open(fullUrl, '_blank')}
              onError={(e) => {
                console.error('Erro ao carregar imagem:', fullUrl);
              }}
              onLoad={() => {
                console.log('Imagem carregada:', fullUrl);
              }}
            />
            {msg.body && <div style={styles.caption}>{msg.body}</div>}
          </div>
        );
      }
      
      // VÍDEOS
      if (mimetype?.startsWith('video/')) {
        return (
          <div style={styles.mediaContainer}>
            <video
              controls
              style={{
                maxWidth: '100%',
                maxHeight: '300px',
                borderRadius: '8px',
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
              }}
              onError={() => {
                console.error('Erro ao carregar vídeo:', fullUrl);
              }}
            >
              <source src={fullUrl} type={mimetype} />
              Seu navegador não suporta vídeos
            </video>
            {msg.body && <div style={styles.caption}>{msg.body}</div>}
          </div>
        );
      }
      
      // ÁUDIOS
      if (mimetype?.startsWith('audio/') ||
          mimetype?.includes('ogg') ||
          mimetype?.includes('webm') ||
          filename?.endsWith('.ogg') ||
          filename?.endsWith('.opus') ||
          filename?.endsWith('.mp3') ||
          filename?.endsWith('.wav') ||
          filename?.endsWith('.webm')) {
        
        return (
          <div style={styles.mediaContainer}>
            <AudioPlayer url={url} filename={filename} />
            {msg.body && <div style={styles.caption}>{msg.body}</div>}
          </div>
        );
      }
      
      // DOCUMENTOS
      return (
        <div style={styles.documentContainer}>
          <div style={styles.documentIcon}>
            {mimetype?.includes('pdf') ? '📄' :
             mimetype?.includes('word') ? '📝' :
             mimetype?.includes('excel') ? '📊' : '📁'}
          </div>
          <div style={styles.documentInfo}>
            <div style={styles.documentName}>{filename || 'Documento'}</div>
            <div style={styles.documentActions}>
              {mimetype?.includes('pdf') && (
                <a
                  href={fullUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  style={styles.viewButton}
                >
                  👁️ Visualizar
                </a>
              )}
              <a
                href={fullUrl}
                download={filename}
                style={styles.downloadButton}
              >
                💾 Baixar
              </a>
            </div>
          </div>
        </div>
      );
    }
    
    return <div style={styles.messageText}>{msg.body}</div>;
  };
  
  const renderMessageStatus = (status) => {
    if (!advancedSettings.showDeliveryStatus) return null;
    
    switch(status) {
      case 'sending': return '⏳';
      case 'sent': return '✅';
      case 'delivered': return '✅✅';
      case 'read': return <span style={{color: '#4FC3F7'}}>👁️</span>;
      case 'error': return <span style={{color: '#dc3545'}}>❌</span>;
      default: return '⏳';
    }
  };

  // ====================================
  // FILTROS (Mantidos)
  // ====================================
  const filteredConversations = conversations
    .filter(conv => 
      conv.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      conv.lastMessage?.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .sort((a, b) => {
      if (a.favorite && !b.favorite) return -1;
      if (!a.favorite && b.favorite) return 1;
      return (b.timestamp || 0) - (a.timestamp || 0);
    });

  // ====================================
  // APLICAR TEMA PERSONALIZADO
  // ====================================
  const currentTheme = {
    ...PRIMEM_THEME,
    colors: {
      ...PRIMEM_THEME.colors,
      primary: advancedSettings.primaryColor,
      secondary: advancedSettings.secondaryColor,
      accent: advancedSettings.accentColor,
      background: advancedSettings.backgroundColor
    }
  };

  // ====================================
  // RENDERIZAÇÃO - LOGIN COM TEMA PERSONALIZADO
  // ====================================
  if (!isLoggedIn) {
    return (
      <div style={{
        ...styles.loginContainer,
        background: `linear-gradient(135deg, ${currentTheme.colors.primary} 0%, ${currentTheme.colors.secondary} 100%)`
      }}>
        <div style={styles.loginBox}>
          <div style={styles.logoContainer}>
            <div style={styles.logoWrapper}>
              {advancedSettings.logoUrl ? (
                <img 
                  src={advancedSettings.logoUrl} 
                  alt="Logo" 
                  style={{ maxHeight: '60px', maxWidth: '60px' }}
                  onError={(e) => {
                    e.target.style.display = 'none';
                  }}
                />
              ) : (
                <span style={styles.logoIcon}>💬</span>
              )}
              <div style={styles.logoText}>
                <span style={{...styles.logoP, color: currentTheme.colors.primary}}>{advancedSettings.companyName.charAt(0)}</span>
                <span style={{...styles.logoRimem, color: currentTheme.colors.secondary}}>{advancedSettings.companyName.substring(1)}</span>
              </div>
            </div>
            <h1 style={{...styles.title, color: currentTheme.colors.primary}}>{advancedSettings.systemName}</h1>
            <p style={{...styles.subtitle, color: currentTheme.colors.accent}}>
              Sistema v8.0 - TODAS AS MELHORIAS IMPLEMENTADAS! ⏰📚✨👥🔘📷
            </p>
          </div>
          
          <div style={styles.formGroup}>
            <label style={styles.label}>📧 E-mail</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              style={{...styles.input, borderColor: currentTheme.colors.border}}
              placeholder="seu@email.com"
              onKeyPress={(e) => e.key === 'Enter' && handleLogin()}
            />
          </div>
          
          <div style={styles.formGroup}>
            <label style={styles.label}>🔒 Senha</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              style={{...styles.input, borderColor: currentTheme.colors.border}}
              placeholder="••••••••"
              onKeyPress={(e) => e.key === 'Enter' && handleLogin()}
            />
          </div>
          
          <button 
            onClick={handleLogin} 
            style={{
              ...styles.loginButton,
              backgroundColor: currentTheme.colors.primary
            }}
          >
            {advancedSettings.loginButtonText}
          </button>
          
          <div style={styles.loginFooter}>
            <small style={styles.footerText}>
              Use: teste@teste.com / 123
            </small>
            <small style={{...styles.footerBrand, color: currentTheme.colors.accent}}>
              © 2025 {advancedSettings.companyName} - Sistema v8.0 Completo 🚀
            </small>
          </div>
        </div>
      </div>
    );
  }

  // ====================================
  // RENDERIZAÇÃO - PRINCIPAL v8.0 COM TODAS AS MELHORIAS
  // ====================================
  return (
    <div style={{...styles.container, backgroundColor: currentTheme.colors.background}}>
      {/* ===== TODOS OS MODALS v8.0 ===== */}
      <EditNameModal
        isOpen={showEditNameModal}
        onClose={() => setShowEditNameModal(false)}
        currentName={selectedChat?.name || ''}
        onSave={handleEditName}
      />

      <UserProfileModal
        isOpen={showUserProfileModal}
        onClose={() => setShowUserProfileModal(false)}
        currentUser={currentUser}
        onSave={saveUserSettings}
      />

      <AdvancedSettingsModal
        isOpen={showAdvancedSettingsModal}
        onClose={() => setShowAdvancedSettingsModal(false)}
        currentSettings={advancedSettings}
        onSave={saveAdvancedSettings}
      />

      <EmojiPicker
        isOpen={showEmojiPicker}
        onEmojiSelect={(emoji) => {
          setNewMessage(prev => prev + emoji);
          setShowEmojiPicker(false);
        }}
        onClose={() => setShowEmojiPicker(false)}
      />

      {/* 🆕 v8.0: NOVOS MODALS */}
      <ScheduledMessagesModal
        isOpen={showScheduleModal}
        onClose={() => setShowScheduleModal(false)}
        onSave={handleScheduleMessage}
        selectedChat={selectedChat}
      />

      <KnowledgeBaseModal
        isOpen={showKnowledgeModal}
        onClose={() => setShowKnowledgeModal(false)}
        onSelectMessage={handleSelectKnowledgeMessage}
      />

      <TextFormattingModal
        isOpen={showFormatModal}
        onClose={() => setShowFormatModal(false)}
        onApplyFormat={handleApplyTextFormat}
        currentText={newMessage}
      />

      <UserManagementModal
        isOpen={showUserManagementModal}
        onClose={() => setShowUserManagementModal(false)}
        currentUser={currentUser}
      />

      {/* HEADER COM TEMA */}
      <div style={{...styles.header, backgroundColor: currentTheme.colors.primary}}>
        <div style={styles.headerLeft}>
          <div style={styles.headerLogo}>
            <span style={styles.headerLogoIcon}>💬</span>
            <div>
              <h1 style={styles.headerTitle}>{advancedSettings.companyName} {advancedSettings.systemName}</h1>
              <span style={styles.userInfo}>
                👤 {userSettings.displayName || currentUser?.name} | {currentUser?.role} | v8.0 COMPLETO! ⏰📚✨👥🔘📷
              </span>
            </div>
          </div>
        </div>
        
        <div style={styles.headerRight}>
          {isConnected ? (
            <>
              <span style={styles.statusBadgeConnected}>
                ✅ WhatsApp Conectado
                {whatsappInfo && <small> ({whatsappInfo.pushname || whatsappInfo.name})</small>}
              </span>
              <button onClick={disconnectWhatsApp} style={styles.disconnectBtn}>
                🔌 Desconectar
              </button>
            </>
          ) : isConnecting ? (
            <span style={styles.statusBadgeConnecting}>🔄 Conectando...</span>
          ) : (
            <span style={styles.statusBadgeDisconnected}>❌ Desconectado</span>
          )}
          
          <button 
            onClick={() => setDarkMode(!darkMode)} 
            style={styles.themeBtn}
            title={darkMode ? "Modo Claro" : "Modo Escuro"}
          >
            {darkMode ? '☀️' : '🌙'}
          </button>
          
          <button onClick={handleLogout} style={{...styles.logoutBtn, backgroundColor: currentTheme.colors.secondary}}>
            🚪 Sair
          </button>
        </div>
      </div>

      {/* CONTEÚDO PRINCIPAL */}
      <div style={styles.mainContent}>
        {/* SIDEBAR */}
        <div style={styles.sidebar}>
          {/* TABS */}
          <div style={styles.tabs}>
            <button 
              style={{
                ...styles.tab,
                ...(activeTab === 'chats' ? {...styles.tabActive, color: currentTheme.colors.primary, borderBottomColor: currentTheme.colors.primary} : {})
              }}
              onClick={() => setActiveTab('chats')}
            >
              💬 Chats
            </button>
            <button 
              style={{
                ...styles.tab,
                ...(activeTab === 'connection' ? {...styles.tabActive, color: currentTheme.colors.primary, borderBottomColor: currentTheme.colors.primary} : {})
              }}
              onClick={() => setActiveTab('connection')}
            >
              🔌 Conexão
            </button>
            {/* 🆕 v8.0: Nova tab de Agenda */}
            <button 
              style={{
                ...styles.tab,
                ...(activeTab === 'schedule' ? {...styles.tabActive, color: currentTheme.colors.primary, borderBottomColor: currentTheme.colors.primary} : {})
              }}
              onClick={() => setActiveTab('schedule')}
            >
              ⏰ Agenda
            </button>
            <button 
              style={{
                ...styles.tab,
                ...(activeTab === 'settings' ? {...styles.tabActive, color: currentTheme.colors.primary, borderBottomColor: currentTheme.colors.primary} : {})
              }}
              onClick={() => setActiveTab('settings')}
            >
              ⚙️ Config
            </button>
          </div>

          {/* CONTEÚDO DAS TABS */}
          {activeTab === 'chats' && (
            <>
              {/* BUSCA */}
              <div style={styles.searchBox}>
                <input
                  type="text"
                  placeholder="🔍 Buscar conversas..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  style={{...styles.searchInput, borderColor: currentTheme.colors.border}}
                />
              </div>

              {/* LISTA DE CONVERSAS */}
              <div style={styles.conversationsList}>
                {filteredConversations.length > 0 ? (
                  filteredConversations.map(conv => (
                    <div
                      key={conv.id}
                      data-chat-id={conv.id}
                      style={{
                        ...styles.conversationItem,
                        ...(selectedChat?.id === conv.id ? {...styles.conversationActive, backgroundColor: `${currentTheme.colors.primary}10`, borderLeftColor: currentTheme.colors.primary} : {})
                      }}
                      onClick={() => selectChat(conv)}
                    >
                      <div style={{...styles.conversationAvatar, backgroundColor: currentTheme.colors.primary}}>
                        {conv.avatar ? (
                          <img src={conv.avatar} alt="" style={styles.avatarImage} />
                        ) : (
                          <span>{conv.name?.charAt(0)?.toUpperCase() || '?'}</span>
                        )}
                      </div>
                      
                      <div style={styles.conversationInfo}>
                        <div style={styles.conversationHeader}>
                          <span style={styles.conversationName}>
                            {conv.favorite && '⭐ '}
                            {conv.name}
                          </span>
                          <span style={styles.conversationTime}>
                            {advancedSettings.showTimestamps && formatTime(conv.timestamp)}
                          </span>
                        </div>
                        <div style={styles.conversationPreview}>
                          {conv.lastMessage?.substring(0, 50)}
                          {conv.lastMessage?.length > 50 && '...'}
                        </div>
                      </div>
                      
                      {conv.unread > 0 && (
                        <div style={{...styles.unreadBadge, backgroundColor: currentTheme.colors.secondary}}>
                          {conv.unread}
                        </div>
                      )}
                    </div>
                  ))
                ) : (
                  <div style={styles.emptyState}>
                    <p>📭 Nenhuma conversa encontrada</p>
                    <small>Conecte o WhatsApp para ver suas conversas</small>
                  </div>
                )}
              </div>
            </>
          )}

          {activeTab === 'connection' && (
            <div style={styles.connectionTab}>
              {!isConnected ? (
                <>
                  {qrCode ? (
                    <div style={styles.qrContainer}>
                      <img src={qrCode} alt="QR Code" style={styles.qrCode} />
                      <p style={styles.qrText}>
                        📱 Escaneie o QR Code com seu WhatsApp
                      </p>
                    </div>
                  ) : (
                    <div style={styles.connectContainer}>
                      <button 
                        onClick={connectWhatsApp}
                        style={{...styles.connectButton, backgroundColor: currentTheme.colors.secondary}}
                        disabled={isConnecting}
                      >
                        {isConnecting ? '🔄 Conectando...' : advancedSettings.connectButtonText}
                      </button>
                      <p style={styles.connectInfo}>
                        Clique para gerar o QR Code
                      </p>
                    </div>
                  )}
                </>
              ) : (
                <div style={styles.connectedInfo}>
                  <div style={styles.successIcon}>✅</div>
                  <h3>WhatsApp Conectado!</h3>
                  {whatsappInfo && (
                    <div style={styles.whatsappDetails}>
                      <p><strong>👤 Nome:</strong> {whatsappInfo.pushname || whatsappInfo.name}</p>
                      <p><strong>📱 Número:</strong> {whatsappInfo.wid?.user || whatsappInfo.number}</p>
                    </div>
                  )}
                  <button 
                    onClick={disconnectWhatsApp}
                    style={styles.disconnectButton}
                  >
                    🔌 Desconectar
                  </button>
                </div>
              )}
            </div>
          )}

          {/* 🆕 v8.0: TAB DE AGENDA */}
          {activeTab === 'schedule' && (
            <div style={styles.settingsTab}>
              <div style={styles.settingInfo}>
                <h4 style={{color: currentTheme.colors.primary}}>⏰ Mensagens Agendadas</h4>
                <p><strong>Total:</strong> {scheduledMessages.length} mensagens</p>
                <p><strong>Pendentes:</strong> {scheduledMessages.filter(m => new Date(m.scheduledFor) > new Date()).length}</p>
                
                <div style={{marginTop: '20px'}}>
                  <h5>📋 Próximas mensagens:</h5>
                  {scheduledMessages
                    .filter(m => new Date(m.scheduledFor) > new Date())
                    .slice(0, 5)
                    .map(msg => (
                      <div key={msg.id} style={{
                        padding: '8px',
                        backgroundColor: '#f8f9fa',
                        borderRadius: '5px',
                        marginBottom: '8px',
                        fontSize: '12px'
                      }}>
                        <div><strong>📝 {msg.message.substring(0, 30)}...</strong></div>
                        <div>📱 {msg.chatName}</div>
                        <div>📅 {new Date(msg.scheduledFor).toLocaleString('pt-BR')}</div>
                      </div>
                    ))}
                  
                  {scheduledMessages.filter(m => new Date(m.scheduledFor) > new Date()).length === 0 && (
                    <p style={{fontStyle: 'italic', color: '#666'}}>
                      Nenhuma mensagem agendada no momento
                    </p>
                  )}
                </div>
                
                <button
                  style={{
                    width: '100%',
                    padding: '12px',
                    backgroundColor: currentTheme.colors.primary,
                    color: 'white',
                    border: 'none',
                    borderRadius: '5px',
                    cursor: 'pointer',
                    marginTop: '15px'
                  }}
                  onClick={() => setShowScheduleModal(true)}
                >
                  ⏰ Nova Mensagem Agendada
                </button>
              </div>
            </div>
          )}

          {activeTab === 'settings' && (
            <div style={styles.settingsTab}>
              {/* SUB-TABS PARA CONFIGURAÇÕES */}
              <div style={styles.settingsSubTabs}>
                <button 
                  style={{
                    ...styles.settingsSubTab,
                    ...(activeSettingsTab === 'system' ? {...styles.settingsSubTabActive, color: currentTheme.colors.primary, borderBottomColor: currentTheme.colors.primary} : {})
                  }}
                  onClick={() => setActiveSettingsTab('system')}
                >
                  💻 Sistema
                </button>
                <button 
                  style={{
                    ...styles.settingsSubTab,
                    ...(activeSettingsTab === 'profile' ? {...styles.settingsSubTabActive, color: currentTheme.colors.primary, borderBottomColor: currentTheme.colors.primary} : {})
                  }}
                  onClick={() => setActiveSettingsTab('profile')}
                >
                  👤 Perfil
                </button>
                {/* 🆕 v8.0: Nova sub-tab de Usuários */}
                <button 
                  style={{
                    ...styles.settingsSubTab,
                    ...(activeSettingsTab === 'users' ? {...styles.settingsSubTabActive, color: currentTheme.colors.primary, borderBottomColor: currentTheme.colors.primary} : {})
                  }}
                  onClick={() => setActiveSettingsTab('users')}
                >
                  👥 Usuários
                </button>
                <button 
                  style={{
                    ...styles.settingsSubTab,
                    ...(activeSettingsTab === 'advanced' ? {...styles.settingsSubTabActive, color: currentTheme.colors.primary, borderBottomColor: currentTheme.colors.primary} : {})
                  }}
                  onClick={() => setActiveSettingsTab('advanced')}
                >
                  🎨 Avançado
                </button>
              </div>

              {/* CONTEÚDO DAS SUB-TABS */}
              {activeSettingsTab === 'system' && (
                <div style={styles.settingInfo}>
                  <h4 style={{color: currentTheme.colors.primary}}>💻 SISTEMA v8.0 - TODAS AS MELHORIAS IMPLEMENTADAS!</h4>
                  <p><strong>Versão:</strong> 8.0-COMPLETO-TODAS-MELHORIAS</p>
                  <p><strong>Status:</strong> {isConnected ? '🟢 Online' : '🔴 Offline'}</p>
                  
                  <p><strong>🆕 FUNCIONALIDADES v8.0:</strong></p>
                  <ul style={{color: '#28a745'}}>
                    <li>⏰ <strong>Agendamento de Mensagens:</strong> Sistema completo com envio automático</li>
                    <li>📚 <strong>Base de Conhecimento:</strong> Mensagens pré-definidas por categoria</li>
                    <li>✨ <strong>Formatação de Texto:</strong> Negrito, itálico, riscado, monospace</li>
                    <li>👥 <strong>Gestão de Usuários:</strong> Sistema completo de administração</li>
                    <li>🔘 <strong>Marcar como Não Lido:</strong> Restaurar contador de mensagens</li>
                    <li>📷 <strong>Fotos Melhoradas:</strong> Múltiplas fontes + logs detalhados</li>
                  </ul>
                  
                  <p><strong>📋 FUNCIONALIDADES ANTERIORES MANTIDAS:</strong></p>
                  <ul>
                    <li>🔐 Login e autenticação completos</li>
                    <li>📱 Conexão WhatsApp via QR</li>
                    <li>💬 Envio/recebimento mensagens com resposta melhorada</li>
                    <li>📎 Upload de arquivos (até {advancedSettings.maxFileSize}MB)</li>
                    <li>🎵 AudioPlayer avançado com controle de velocidade</li>
                    <li>🎤 Gravação e envio de áudios completa</li>
                    <li>👤 Sistema de configuração de usuário</li>
                    <li>✍️ Nome personalizado nas mensagens com toggle no chat</li>
                    <li>📝 Campo multilinhas (Shift+Enter)</li>
                    <li>🗑️ Sistema para apagar mensagens (apenas local)</li>
                    <li>😀 Emoji picker expandido com 8 categorias</li>
                    <li>🎨 Configurações avançadas de aparência</li>
                    <li>🔧 Interface reorganizada e moderna</li>
                  </ul>
                  
                  <p><strong>🏢 Sistema Empresarial Ultra Completo v8.0!</strong></p>
                  <p><strong>👤 Usuário:</strong> {userSettings.displayName || currentUser?.name}</p>
                  <p><strong>🏢 Empresa:</strong> {advancedSettings.companyName}</p>
                </div>
              )}

              {activeSettingsTab === 'profile' && (
                <div style={styles.profileTab}>
                  <h4 style={{color: currentTheme.colors.primary}}>👤 Configuração de Perfil</h4>
                  
                  <div style={styles.profileInfo}>
                    <div style={styles.profileItem}>
                      <span style={styles.profileLabel}>📧 Email:</span>
                      <span style={styles.profileValue}>{currentUser?.email}</span>
                    </div>
                    <div style={styles.profileItem}>
                      <span style={styles.profileLabel}>👤 Nome:</span>
                      <span style={styles.profileValue}>{currentUser?.name}</span>
                    </div>
                    <div style={styles.profileItem}>
                      <span style={styles.profileLabel}>✍️ Nome de Exibição:</span>
                      <span style={styles.profileValue}>{userSettings.displayName || currentUser?.displayName || currentUser?.name}</span>
                    </div>
                    <div style={styles.profileItem}>
                      <span style={styles.profileLabel}>🏢 Cargo:</span>
                      <span style={styles.profileValue}>{currentUser?.role}</span>
                    </div>
                  </div>
                  
                  <button 
                    style={{...styles.editProfileBtn, backgroundColor: currentTheme.colors.primary}}
                    onClick={() => setShowUserProfileModal(true)}
                  >
                    ✏️ Editar Perfil
                  </button>
                  
                  <div style={styles.signatureInfo}>
                    <h5 style={{color: currentTheme.colors.primary}}>✍️ Controle de Assinatura</h5>
                    <p style={{fontSize: '14px', color: '#666'}}>
                      O controle de assinatura fica no chat, ao lado do campo de mensagem.
                    </p>
                    <p style={{fontSize: '13px', color: currentTheme.colors.accent}}>
                      Azul = Ativo | Cinza = Inativo
                    </p>
                  </div>
                  
                  <div style={styles.profileHint}>
                    <p><strong>💡 Dicas v8.0:</strong></p>
                    <p>• Use ⏰ para agendar mensagens futuras</p>
                    <p>• Use 📚 para acessar mensagens pré-definidas</p>
                    <p>• Use ✨ para formatar texto (negrito, itálico, etc.)</p>
                    <p>• Use 🔘 para marcar conversas como não lidas</p>
                    <p>• Shift+Enter para nova linha, Enter para enviar</p>
                  </div>
                </div>
              )}

              {/* 🆕 v8.0: SUB-TAB DE USUÁRIOS */}
              {activeSettingsTab === 'users' && (
                <div style={styles.advancedTab}>
                  <h4 style={{color: currentTheme.colors.primary}}>👥 Gestão de Usuários</h4>
                  
                  <div style={styles.advancedInfo}>
                    <p><strong>Sistema de usuários completo:</strong></p>
                    <ul>
                      <li>👑 <strong>Administrador:</strong> Acesso total ao sistema</li>
                      <li>👨‍💼 <strong>Supervisor:</strong> Gerencia usuários e relatórios</li>
                      <li>👨‍💻 <strong>Atendente:</strong> Gerencia apenas chats</li>
                    </ul>
                    
                    <p style={{color: currentTheme.colors.accent, fontSize: '12px', marginTop: '15px'}}>
                      🔐 Controle total de permissões e usuários ilimitados
                    </p>
                  </div>
                  
                  <button 
                    style={{...styles.advancedConfigBtn, backgroundColor: currentTheme.colors.primary}}
                    onClick={() => setShowUserManagementModal(true)}
                  >
                    👥 Abrir Gestão de Usuários
                  </button>
                </div>
              )}

              {activeSettingsTab === 'advanced' && (
                <div style={styles.advancedTab}>
                  <h4 style={{color: currentTheme.colors.primary}}>🎨 Configurações Avançadas</h4>
                  
                  <div style={styles.advancedPreview}>
                    <h5>🎨 Preview das Cores Atuais:</h5>
                    <div style={styles.colorPreviewGrid}>
                      <div style={{
                        ...styles.colorPreviewItem,
                        backgroundColor: currentTheme.colors.primary,
                        color: 'white'
                      }}>
                        Cor Primária
                      </div>
                      <div style={{
                        ...styles.colorPreviewItem,
                        backgroundColor: currentTheme.colors.secondary,
                        color: 'white'
                      }}>
                        Cor Secundária
                      </div>
                      <div style={{
                        ...styles.colorPreviewItem,
                        backgroundColor: currentTheme.colors.accent,
                        color: 'white'
                      }}>
                        Cor de Destaque
                      </div>
                    </div>
                  </div>
                  
                  <button 
                    style={{...styles.advancedConfigBtn, backgroundColor: currentTheme.colors.primary}}
                    onClick={() => setShowAdvancedSettingsModal(true)}
                  >
                    🎨 Abrir Configurações Avançadas
                  </button>
                  
                  <div style={styles.advancedInfo}>
                    <h5>⚙️ Configurações Disponíveis:</h5>
                    <ul>
                      <li>🎨 <strong>Aparência:</strong> Cores personalizadas do sistema</li>
                      <li>🏢 <strong>Marca:</strong> Nome da empresa, logo, sistema</li>
                      <li>🖥️ <strong>Interface:</strong> Textos dos botões e campos</li>
                      <li>⚡ <strong>Comportamento:</strong> Funcionalidades e limites</li>
                    </ul>
                    <p style={{color: currentTheme.colors.accent, fontSize: '12px'}}>
                      💾 Todas as configurações são salvas automaticamente no navegador
                    </p>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* ÁREA DE CHAT */}
        <div style={styles.chatArea}>
          {selectedChat ? (
            <>
              {/* HEADER DO CHAT COM NOVAS FUNCIONALIDADES v8.0 */}
              <div style={styles.chatHeader}>
                <div style={styles.chatHeaderLeft}>
                  <div style={{...styles.chatAvatar, backgroundColor: currentTheme.colors.primary}}>
                    {selectedChat.avatar ? (
                      <img src={selectedChat.avatar} alt="" style={styles.avatarImage} />
                    ) : (
                      <span>{selectedChat.name?.charAt(0)?.toUpperCase()}</span>
                    )}
                  </div>
                  <div style={styles.chatHeaderInfo}>
                    <h3 style={{...styles.chatName, color: currentTheme.colors.primary}}>{selectedChat.name}</h3>
                    <span style={styles.chatStatus}>🟢 Online</span>
                  </div>
                </div>
                
                {/* AÇÕES DO CHAT COM NOVAS FUNCIONALIDADES v8.0 */}
                <div style={styles.chatHeaderActions}>
                  {/* 🆕 v8.0: Botão Base de Conhecimento */}
                  <button 
                    style={{...styles.headerActionBtn, backgroundColor: currentTheme.colors.primary, color: 'white', borderRadius: '5px', padding: '8px 12px'}}
                    onClick={() => setShowKnowledgeModal(true)}
                    title="Base de Conhecimento"
                  >
                    📚 Base
                  </button>
                  
                  {/* 🆕 v8.0: Botão Marcar como Não Lido */}
                  <button 
                    style={{...styles.headerActionBtn, backgroundColor: '#ffc107', color: 'white', borderRadius: '5px', padding: '8px 12px'}}
                    onClick={() => markAsUnread(selectedChat.id)}
                    title="Marcar como não lido"
                  >
                    🔘 Não Lido
                  </button>
                  
                  <button 
                    style={styles.headerActionBtn}
                    onClick={() => toggleFavorite(selectedChat.id)}
                    title="Favoritar"
                  >
                    {selectedChat.favorite ? '⭐' : '☆'}
                  </button>
                  
                  <button 
                    style={styles.headerActionBtn} 
                    title="Buscar"
                  >
                    🔍
                  </button>
                  
                  <button 
                    style={{...styles.editNameBtn, backgroundColor: currentTheme.colors.primary}}
                    onClick={() => setShowEditNameModal(true)}
                    title="Editar nome do contato"
                  >
                    ✏️ Editar
                  </button>
                  
                  <button 
                    style={styles.blockBtn}
                    onClick={handleBlockContact}
                    title="Bloquear contato"
                  >
                    🚫 Block
                  </button>
                </div>
              </div>

              {/* MENSAGENS */}
              <div style={styles.messagesContainer}>
                {messages[selectedChat.id]?.map((msg, index) => {
                  const prevMsg = messages[selectedChat.id][index - 1];
                  const showDate = !prevMsg || formatDate(msg.timestamp) !== formatDate(prevMsg.timestamp);
                  
                  return (
                    <React.Fragment key={msg.id}>
                      {showDate && advancedSettings.showTimestamps && (
                        <div style={styles.dateDivider}>
                          <span>📅 {formatDate(msg.timestamp)}</span>
                        </div>
                      )}
                      
                      <div 
                        style={{
                          ...styles.messageWrapper,
                          justifyContent: msg.fromMe ? 'flex-end' : 'flex-start'
                        }}
                        onMouseEnter={(e) => {
                          const actions = e.currentTarget.querySelector('.message-actions');
                          if (actions) actions.style.display = 'flex';
                        }}
                        onMouseLeave={(e) => {
                          const actions = e.currentTarget.querySelector('.message-actions');
                          if (actions) actions.style.display = 'none';
                        }}
                      >
                        <div style={{
                          ...styles.messageBubble,
                          ...(msg.fromMe ? styles.messageSent : styles.messageReceived)
                        }}>
                          {replyTo?.id === msg.id && (
                            <div style={styles.replyIndicator}>
                              💬 Respondendo a esta mensagem...
                            </div>
                          )}
                          
                          {!msg.fromMe && (
                            <div style={styles.senderName}>👤 {msg.from}</div>
                          )}
                          
                          {msg.fromMe && msg.senderName && signatureEnabled && (
                            <div style={{
                              ...styles.senderName,
                              backgroundColor: 'rgba(43, 76, 140, 0.1)',
                              color: '#2B4C8C',
                              border: '1px solid rgba(43, 76, 140, 0.2)'
                            }}>
                              ✍️ {msg.senderName}
                            </div>
                          )}
                          
                          {msg.replyTo && (
                            <div style={styles.replyPreviewInMessage}>
                              📝 Respondendo: "{msg.replyTo.body?.substring(0, 30)}..."
                            </div>
                          )}
                          
                          {renderMessageContent(msg)}
                          
                          <div style={styles.messageFooter}>
                            {advancedSettings.showTimestamps && (
                              <span style={styles.messageTime}>
                                🕐 {formatTime(msg.timestamp)}
                              </span>
                            )}
                            {msg.fromMe && (
                              <span style={styles.messageStatus}>
                                {renderMessageStatus(msg.status)}
                              </span>
                            )}
                          </div>
                          
                          {/* AÇÕES DA MENSAGEM */}
                          <div className="message-actions" style={styles.messageActions}>
                            <button 
                              style={styles.actionBtn}
                              onClick={() => setReplyTo(msg)}
                              title="Responder (inclui texto original)"
                            >
                              💬
                            </button>
                            {msg.fromMe && !msg.isDeleted && (
                              <button 
                                style={styles.actionBtn}
                                onClick={() => deleteMessageForEveryone(msg.id)}
                                title="Apagar (apenas marcação local)"
                              >
                                🗑️
                              </button>
                            )}
                          </div>
                        </div>
                      </div>
                    </React.Fragment>
                  );
                })}
                <div ref={messagesEndRef} />
              </div>

              {/* INTERFACE DE GRAVAÇÃO DE ÁUDIO */}
              {showAudioRecorder && (
                <AudioRecorder
                  onRecordingComplete={handleRecordingComplete}
                  onCancel={handleCancelRecording}
                />
              )}

              {/* 🆕 v8.0: INPUT DE MENSAGEM COM TODAS AS NOVAS FUNCIONALIDADES */}
              <div style={styles.inputContainer}>
                {selectedFile && (
                  <div style={styles.filePreview}>
                    <span>📎 {selectedFile.name}</span>
                    <button 
                      onClick={() => setSelectedFile(null)}
                      style={styles.removeFileBtn}
                    >
                      ❌
                    </button>
                  </div>
                )}
                
                {replyTo && (
                  <div style={styles.replyPreview}>
                    <span>📝 Respondendo: "{replyTo.body?.substring(0, 50)}{replyTo.body?.length > 50 ? '...' : ''}"</span>
                    <button 
                      onClick={() => setReplyTo(null)}
                      style={styles.cancelReplyBtn}
                    >
                      ❌
                    </button>
                  </div>
                )}
                
                <div style={styles.inputRow}>
                  <button 
                    style={styles.attachBtn}
                    onClick={() => fileInputRef.current?.click()}
                    title={advancedSettings.attachButtonText}
                  >
                    📎
                  </button>
                  
                  <input
                    type="file"
                    ref={fileInputRef}
                    onChange={handleFileSelect}
                    style={{ display: 'none' }}
                    accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.xls,.xlsx"
                  />
                  
                  <button 
                    style={styles.audioBtn}
                    onClick={handleStartRecording}
                    title="Gravar áudio"
                    disabled={showAudioRecorder}
                  >
                    🎤
                  </button>
                  
                  <button 
                    style={styles.emojiBtn}
                    onClick={() => setShowEmojiPicker(true)}
                    title="Emojis"
                  >
                    😀
                  </button>
                  
                  {/* 🆕 v8.0: Botão de Agendamento */}
                  <button
                    style={{...styles.scheduleBtn, backgroundColor: '#17a2b8'}}
                    onClick={() => setShowScheduleModal(true)}
                    title="Agendar mensagem"
                  >
                    ⏰
                  </button>
                  
                  {/* 🆕 v8.0: Botão de Formatação */}
                  <button
                    style={{...styles.formatBtn, backgroundColor: '#6f42c1'}}
                    onClick={() => setShowFormatModal(true)}
                    title="Formatação de texto"
                  >
                    ✨
                  </button>
                  
                  {/* Botão de assinatura */}
                  <button
                    style={{
                      ...styles.signatureToggleBtn,
                      backgroundColor: signatureEnabled ? currentTheme.colors.primary : '#6c757d',
                      color: 'white'
                    }}
                    onClick={toggleSignature}
                    title={signatureEnabled ? 'Assinatura ATIVA - Clique para desativar' : 'Assinatura INATIVA - Clique para ativar'}
                  >
                    ✍️
                  </button>
                  
                  <textarea
                    ref={messageInputRef}
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder={selectedFile ? "📝 Adicione uma legenda... (Shift+Enter para nova linha)" : "💬 Digite uma mensagem... (Shift+Enter para nova linha)"}
                    style={{...styles.messageTextarea, borderColor: currentTheme.colors.border}}
                    disabled={isUploading || showAudioRecorder}
                    rows={1}
                  />
                  
                  <button 
                    onClick={sendMessage}
                    style={{
                      ...styles.sendButton,
                      backgroundColor: currentTheme.colors.primary
                    }}
                    disabled={(!newMessage.trim() && !selectedFile) || isUploading || showAudioRecorder}
                    title="Enviar"
                  >
                    {isUploading ? '⏳' : selectedFile ? '📤 Arquivo' : advancedSettings.sendButtonText}
                  </button>
                </div>
                
                {/* 🆕 v8.0: HINT MELHORADO COM TODAS AS FUNCIONALIDADES */}
                <div style={styles.inputHint}>
                  <small>
                    💡 Shift+Enter = nova linha | Enter = enviar | 
                    ⏰ = agendar | ✨ = formatar | 📚 = base conhecimento | 
                    Assinatura: {signatureEnabled ? 
                      <span style={{color: currentTheme.colors.primary, fontWeight: 'bold'}}>✅ ATIVA</span> : 
                      <span style={{color: '#6c757d', fontWeight: 'bold'}}>❌ INATIVA</span>
                    }
                  </small>
                </div>
              </div>
            </>
          ) : (
            <div style={styles.noChatSelected}>
              <div style={styles.emptyIcon}>💬</div>
              <h2 style={{color: currentTheme.colors.primary}}>Selecione uma conversa</h2>
              <p>Escolha um chat para começar a conversar</p>
              
              {/* 🆕 v8.0: Informações das novas funcionalidades */}
              <div style={{marginTop: '30px', textAlign: 'left', maxWidth: '400px'}}>
                <h3 style={{color: currentTheme.colors.primary}}>🚀 Funcionalidades v8.0:</h3>
                <ul style={{fontSize: '14px', color: '#666'}}>
                  <li>⏰ <strong>Agendamento:</strong> Programe mensagens futuras</li>
                  <li>📚 <strong>Base de Conhecimento:</strong> Mensagens pré-definidas</li>
                  <li>✨ <strong>Formatação:</strong> Negrito, itálico, riscado, monospace</li>
                  <li>👥 <strong>Gestão de Usuários:</strong> Administração completa</li>
                  <li>🔘 <strong>Marcar Não Lido:</strong> Restaurar contadores</li>
                  <li>📷 <strong>Fotos Melhoradas:</strong> Sistema aprimorado</li>
                </ul>
              </div>
              
              {!isConnected && (
                <button 
                  onClick={() => setActiveTab('connection')}
                  style={{...styles.connectPromptBtn, backgroundColor: currentTheme.colors.primary, marginTop: '20px'}}
                >
                  🔌 Conectar WhatsApp
                </button>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

// ====================================
// 🆕 v8.0: ESTILOS COMPLETOS COM TODAS AS NOVAS FUNCIONALIDADES
// ====================================
const styles = {
  // Container Principal
  container: {
    display: 'flex',
    flexDirection: 'column',
    height: '100vh',
    backgroundColor: '#f0f2f5',
    fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'
  },
  
  // Login
  loginContainer: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    minHeight: '100vh'
  },
  
  loginBox: {
    backgroundColor: 'white',
    padding: '40px',
    borderRadius: '20px',
    boxShadow: '0 20px 60px rgba(0,0,0,0.3)',
    width: '450px',
    maxWidth: '90%'
  },
  
  logoContainer: {
    textAlign: 'center',
    marginBottom: '30px'
  },
  
  logoWrapper: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    gap: '15px',
    marginBottom: '20px'
  },
  
  logoIcon: {
    fontSize: '50px'
  },
  
  logoText: {
    display: 'flex',
    alignItems: 'center',
    fontSize: '36px',
    fontWeight: 'bold'
  },
  
  logoP: {
    marginRight: '2px'
  },
  
  logoRimem: {
    // cor será aplicada dinamicamente
  },
  
  title: {
    margin: '10px 0',
    fontSize: '24px',
    fontWeight: 'bold'
  },
  
  subtitle: {
    fontSize: '14px',
    margin: '5px 0'
  },
  
  formGroup: {
    marginBottom: '20px'
  },
  
  label: {
    display: 'block',
    marginBottom: '8px',
    color: '#555',
    fontWeight: '500',
    fontSize: '14px'
  },
  
  input: {
    width: '100%',
    padding: '12px 15px',
    border: '2px solid #ddd',
    borderRadius: '10px',
    fontSize: '16px',
    transition: 'border-color 0.3s',
    boxSizing: 'border-box'
  },
  
  loginButton: {
    width: '100%',
    padding: '14px',
    color: 'white',
    border: 'none',
    borderRadius: '10px',
    fontSize: '16px',
    fontWeight: 'bold',
    cursor: 'pointer',
    transition: 'all 0.3s',
    marginTop: '10px'
  },
  
  loginFooter: {
    textAlign: 'center',
    marginTop: '20px'
  },
  
  footerText: {
    color: '#999',
    fontSize: '12px',
    display: 'block',
    marginBottom: '5px'
  },
  
  footerBrand: {
    fontSize: '11px',
    display: 'block',
    marginTop: '10px',
    paddingTop: '10px',
    borderTop: '1px solid #eee'
  },
  
  // Header
  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    color: 'white',
    padding: '12px 20px',
    boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
  },
  
  headerLeft: {
    display: 'flex',
    alignItems: 'center',
    gap: '20px'
  },
  
  headerLogo: {
    display: 'flex',
    alignItems: 'center',
    gap: '12px'
  },
  
  headerLogoIcon: {
    fontSize: '32px'
  },
  
  headerTitle: {
    fontSize: '18px',
    fontWeight: 'bold',
    margin: 0,
    letterSpacing: '0.5px'
  },
  
  userInfo: {
    fontSize: '13px',
    opacity: 0.9
  },
  
  headerRight: {
    display: 'flex',
    alignItems: 'center',
    gap: '15px'
  },
  
  statusBadgeConnected: {
    padding: '6px 12px',
    backgroundColor: 'rgba(40, 167, 69, 0.2)',
    color: '#28a745',
    borderRadius: '20px',
    fontSize: '14px',
    fontWeight: '500'
  },
  
  statusBadgeConnecting: {
    padding: '6px 12px',
    backgroundColor: 'rgba(255, 193, 7, 0.2)',
    color: '#ffc107',
    borderRadius: '20px',
    fontSize: '14px',
    fontWeight: '500'
  },
  
  statusBadgeDisconnected: {
    padding: '6px 12px',
    backgroundColor: 'rgba(220, 53, 69, 0.2)',
    color: '#dc3545',
    borderRadius: '20px',
    fontSize: '14px',
    fontWeight: '500'
  },
  
  disconnectBtn: {
    padding: '6px 12px',
    backgroundColor: 'rgba(255,255,255,0.2)',
    color: 'white',
    border: '1px solid rgba(255,255,255,0.3)',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px',
    transition: 'all 0.3s'
  },
  
  themeBtn: {
    padding: '6px 10px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '20px',
    transition: 'transform 0.3s'
  },
  
  logoutBtn: {
    padding: '6px 12px',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: '500',
    transition: 'all 0.3s'
  },
  
  // Layout Principal
  mainContent: {
    display: 'flex',
    flex: 1,
    overflow: 'hidden'
  },
  
  // Sidebar
  sidebar: {
    width: '380px',
    backgroundColor: 'white',
    borderRight: '1px solid #dee2e6',
    display: 'flex',
    flexDirection: 'column'
  },
  
  tabs: {
    display: 'flex',
    borderBottom: '1px solid #dee2e6'
  },
  
  tab: {
    flex: 1,
    padding: '12px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '12px',
    color: '#666',
    transition: 'all 0.3s',
    borderBottom: '2px solid transparent'
  },
  
  tabActive: {
    borderBottom: '2px solid',
    fontWeight: 'bold'
  },
  
  searchBox: {
    padding: '10px',
    borderBottom: '1px solid #dee2e6'
  },
  
  searchInput: {
    width: '100%',
    padding: '10px 15px',
    border: '1px solid #dee2e6',
    borderRadius: '20px',
    fontSize: '14px',
    boxSizing: 'border-box',
    transition: 'all 0.3s'
  },
  
  conversationsList: {
    flex: 1,
    overflowY: 'auto'
  },
  
  conversationItem: {
    display: 'flex',
    alignItems: 'center',
    padding: '12px',
    cursor: 'pointer',
    transition: 'background-color 0.2s',
    position: 'relative',
    borderBottom: '1px solid #dee2e6'
  },
  
  conversationActive: {
    borderLeft: '3px solid'
  },
  
  conversationAvatar: {
    width: '50px',
    height: '50px',
    borderRadius: '50%',
    color: 'white',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: '20px',
    marginRight: '12px',
    flexShrink: 0
  },
  
  avatarImage: {
    width: '100%',
    height: '100%',
    borderRadius: '50%',
    objectFit: 'cover'
  },
  
  conversationInfo: {
    flex: 1,
    minWidth: 0
  },
  
  conversationHeader: {
    display: 'flex',
    justifyContent: 'space-between',
    marginBottom: '4px'
  },
  
  conversationName: {
    fontWeight: '500',
    fontSize: '16px',
    color: '#333'
  },
  
  conversationTime: {
    fontSize: '12px',
    color: '#999'
  },
  
  conversationPreview: {
    fontSize: '14px',
    color: '#666',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  
  unreadBadge: {
    position: 'absolute',
    right: '15px',
    top: '50%',
    transform: 'translateY(-50%)',
    color: 'white',
    borderRadius: '10px',
    padding: '2px 8px',
    fontSize: '12px',
    fontWeight: 'bold'
  },
  
  // Área de Chat
  chatArea: {
    flex: 1,
    display: 'flex',
    flexDirection: 'column',
    backgroundColor: '#e5ddd5',
    position: 'relative'
  },
  
  chatHeader: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '10px 20px',
    backgroundColor: 'white',
    borderBottom: '1px solid #dee2e6'
  },
  
  chatHeaderLeft: {
    display: 'flex',
    alignItems: 'center'
  },
  
  chatAvatar: {
    width: '40px',
    height: '40px',
    borderRadius: '50%',
    color: 'white',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: '12px'
  },
  
  chatHeaderInfo: {
    display: 'flex',
    flexDirection: 'column'
  },
  
  chatName: {
    margin: 0,
    fontSize: '16px',
    fontWeight: '500'
  },
  
  chatStatus: {
    fontSize: '13px',
    color: '#666'
  },
  
  chatHeaderActions: {
    display: 'flex',
    gap: '10px',
    alignItems: 'center'
  },
  
  headerActionBtn: {
    padding: '8px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '20px',
    color: '#666',
    transition: 'color 0.2s'
  },

  editNameBtn: {
    padding: '8px 12px',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px',
    transition: 'all 0.2s',
    display: 'flex',
    alignItems: 'center',
    gap: '5px'
  },
  
  blockBtn: {
    padding: '8px 12px',
    backgroundColor: '#dc3545',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px',
    transition: 'all 0.2s',
    display: 'flex',
    alignItems: 'center',
    gap: '5px'
  },
  
  // Mensagens
  messagesContainer: {
    flex: 1,
    overflowY: 'auto',
    padding: '20px',
    backgroundImage: 'url("data:image/svg+xml,%3Csvg width="100" height="100" xmlns="http://www.w3.org/2000/svg"%3E%3Cdefs%3E%3Cpattern id="pattern" x="0" y="0" width="100" height="100" patternUnits="userSpaceOnUse"%3E%3Ccircle cx="50" cy="50" r="1" fill="%23ccc" opacity="0.3"/%3E%3C/pattern%3E%3C/defs%3E%3Crect width="100" height="100" fill="url(%23pattern)"/%3E%3C/svg%3E")'
  },
  
  dateDivider: {
    textAlign: 'center',
    margin: '20px 0',
    position: 'relative'
  },
  
  messageWrapper: {
    display: 'flex',
    marginBottom: '10px',
    position: 'relative'
  },
  
  messageBubble: {
    maxWidth: '65%',
    padding: '8px 12px',
    borderRadius: '7px',
    position: 'relative',
    wordWrap: 'break-word'
  },
  
  messageReceived: {
    backgroundColor: 'white',
    borderTopLeftRadius: 0
  },
  
  messageSent: {
    backgroundColor: '#DCF8C6',
    borderTopRightRadius: 0
  },
  
  senderName: {
    fontSize: '14px',
    fontWeight: 'bold',
    marginBottom: '4px',
    padding: '3px 6px',
    borderRadius: '4px',
    display: 'inline-block'
  },
  
  messageText: {
    fontSize: '14px',
    lineHeight: '1.4',
    whiteSpace: 'pre-wrap'
  },
  
  messageFooter: {
    display: 'flex',
    justifyContent: 'flex-end',
    alignItems: 'center',
    gap: '4px',
    marginTop: '4px'
  },
  
  messageTime: {
    fontSize: '11px',
    color: '#999'
  },
  
  messageStatus: {
    fontSize: '14px'
  },
  
  messageActions: {
    position: 'absolute',
    top: '-20px',
    right: '0',
    display: 'none',
    gap: '5px',
    backgroundColor: 'white',
    padding: '2px 5px',
    borderRadius: '5px',
    boxShadow: '0 2px 5px rgba(0,0,0,0.1)'
  },
  
  actionBtn: {
    padding: '2px 6px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '14px',
    borderRadius: '3px',
    transition: 'background-color 0.2s'
  },
  
  replyIndicator: {
    padding: '4px 8px',
    backgroundColor: 'rgba(102, 126, 234, 0.1)',
    borderLeft: '3px solid #667eea',
    marginBottom: '8px',
    fontSize: '12px',
    color: '#667eea'
  },
  
  replyPreviewInMessage: {
    padding: '6px 8px',
    backgroundColor: 'rgba(43, 76, 140, 0.1)',
    borderLeft: '3px solid #2B4C8C',
    marginBottom: '8px',
    fontSize: '12px',
    color: '#2B4C8C',
    fontStyle: 'italic'
  },
  
  replyPreview: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '8px',
    backgroundColor: '#DCF8C6',
    borderRadius: '5px',
    marginBottom: '10px',
    fontSize: '14px'
  },
  
  cancelReplyBtn: {
    padding: '4px 8px',
    backgroundColor: '#666',
    color: 'white',
    border: 'none',
    borderRadius: '3px',
    cursor: 'pointer'
  },
  
  // Mídia
  mediaContainer: {
    marginTop: '5px'
  },
  
  documentContainer: {
    display: 'flex',
    alignItems: 'center',
    padding: '10px',
    backgroundColor: 'rgba(0,0,0,0.05)',
    borderRadius: '5px',
    marginTop: '5px',
    minWidth: '250px'
  },
  
  documentIcon: {
    fontSize: '30px',
    marginRight: '10px'
  },
  
  documentInfo: {
    flex: 1
  },
  
  documentName: {
    fontSize: '14px',
    fontWeight: '500',
    marginBottom: '6px',
    wordBreak: 'break-word'
  },
  
  documentActions: {
    display: 'flex',
    gap: '10px'
  },
  
  downloadButton: {
    fontSize: '12px',
    color: '#667eea',
    textDecoration: 'none',
    padding: '2px 6px',
    borderRadius: '3px',
    backgroundColor: 'rgba(102, 126, 234, 0.1)',
    display: 'inline-block',
    cursor: 'pointer',
    transition: 'background-color 0.2s'
  },
  
  viewButton: {
    fontSize: '12px',
    color: '#25D366',
    textDecoration: 'none',
    padding: '2px 6px',
    borderRadius: '3px',
    backgroundColor: 'rgba(37, 211, 102, 0.1)',
    display: 'inline-block',
    cursor: 'pointer',
    transition: 'background-color 0.2s'
  },
  
  caption: {
    marginTop: '5px',
    fontSize: '14px'
  },
  
  // Input
  inputContainer: {
    backgroundColor: 'white',
    borderTop: '1px solid #dee2e6',
    padding: '10px',
    position: 'relative'
  },
  
  filePreview: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '8px',
    backgroundColor: '#f0f2f5',
    borderRadius: '5px',
    marginBottom: '10px'
  },
  
  removeFileBtn: {
    padding: '4px 8px',
    backgroundColor: '#ff4757',
    color: 'white',
    border: 'none',
    borderRadius: '3px',
    cursor: 'pointer'
  },
  
  inputRow: {
    display: 'flex',
    alignItems: 'flex-end',
    gap: '8px'
  },
  
  attachBtn: {
    padding: '8px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '20px'
  },
  
  audioBtn: {
    padding: '8px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '20px',
    transition: 'all 0.3s'
  },
  
  emojiBtn: {
    padding: '8px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '20px'
  },
  
  // 🆕 v8.0: Novos botões
  scheduleBtn: {
    padding: '8px 12px',
    border: 'none',
    borderRadius: '20px',
    cursor: 'pointer',
    fontSize: '16px',
    fontWeight: 'bold',
    transition: 'all 0.3s',
    color: 'white',
    minWidth: '40px'
  },
  
  formatBtn: {
    padding: '8px 12px',
    border: 'none',
    borderRadius: '20px',
    cursor: 'pointer',
    fontSize: '16px',
    fontWeight: 'bold',
    transition: 'all 0.3s',
    color: 'white',
    minWidth: '40px'
  },
  
  signatureToggleBtn: {
    padding: '8px 12px',
    border: 'none',
    borderRadius: '20px',
    cursor: 'pointer',
    fontSize: '16px',
    fontWeight: 'bold',
    transition: 'all 0.3s',
    minWidth: '40px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center'
  },
  
  messageTextarea: {
    flex: 1,
    padding: '10px',
    border: '1px solid #dee2e6',
    borderRadius: '20px',
    fontSize: '14px',
    outline: 'none',
    resize: 'none',
    minHeight: '40px',
    maxHeight: '200px',
    lineHeight: '1.4',
    fontFamily: 'inherit'
  },
  
  sendButton: {
    padding: '8px 16px',
    color: 'white',
    border: 'none',
    borderRadius: '20px',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: 'bold',
    minHeight: '40px'
  },
  
  inputHint: {
    textAlign: 'center',
    marginTop: '5px',
    color: '#666'
  },
  
  // Estados Vazios
  emptyState: {
    textAlign: 'center',
    padding: '40px 20px',
    color: '#999'
  },
  
  noChatSelected: {
    flex: 1,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    color: '#999'
  },
  
  emptyIcon: {
    fontSize: '80px',
    marginBottom: '20px',
    opacity: 0.5
  },
  
  connectPromptBtn: {
    marginTop: '20px',
    padding: '10px 20px',
    color: 'white',
    border: 'none',
    borderRadius: '20px',
    cursor: 'pointer',
    fontSize: '16px'
  },
  
  // Tabs de Conexão
  connectionTab: {
    padding: '20px',
    textAlign: 'center'
  },
  
  qrContainer: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    padding: '20px'
  },
  
  qrCode: {
    width: '280px',
    height: '280px',
    padding: '10px',
    backgroundColor: 'white',
    borderRadius: '10px',
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
  },
  
  qrText: {
    marginTop: '20px',
    color: '#666',
    fontSize: '14px'
  },
  
  connectContainer: {
    padding: '40px 20px'
  },
  
  connectButton: {
    padding: '15px 30px',
    color: 'white',
    border: 'none',
    borderRadius: '30px',
    fontSize: '16px',
    fontWeight: 'bold',
    cursor: 'pointer'
  },
  
  connectInfo: {
    marginTop: '15px',
    color: '#666',
    fontSize: '14px'
  },
  
  connectedInfo: {
    padding: '20px',
    textAlign: 'center'
  },
  
  successIcon: {
    fontSize: '60px',
    marginBottom: '20px'
  },
  
  whatsappDetails: {
    textAlign: 'left',
    backgroundColor: '#f0f2f5',
    padding: '15px',
    borderRadius: '10px',
    margin: '20px 0'
  },
  
  disconnectButton: {
    padding: '10px 20px',
    backgroundColor: '#ff4757',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    marginTop: '20px'
  },
  
  // Configurações
  settingsTab: {
    padding: '0'
  },
  
  settingsSubTabs: {
    display: 'flex',
    borderBottom: '1px solid #dee2e6',
    backgroundColor: '#f8f9fa'
  },
  
  settingsSubTab: {
    flex: 1,
    padding: '12px 6px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '11px',
    color: '#666',
    transition: 'all 0.3s',
    borderBottom: '2px solid transparent'
  },
  
  settingsSubTabActive: {
    borderBottom: '2px solid',
    fontWeight: 'bold',
    backgroundColor: 'white'
  },
  
  sett