// client/src/App.js
// =====================================
// PRIMEM WHATSAPP v7.1 - CORRE√á√ïES APLICADAS
// ‚úÖ 1. Bot√£o de assinatura MOVIDO para o chat (ao lado do campo de mensagem)
// ‚úÖ 2. Erro 404 do delete CORRIGIDO (apenas marca√ß√£o local, sem API)
// ‚úÖ 3. Bot√£o "remover do hist√≥rico local" REMOVIDO
// ‚úÖ 4. Fundo amarelo da assinatura REMOVIDO (agora azul suave)
// ‚úÖ 5. Fun√ß√£o de responder CORRIGIDA (inclui texto original)
// ‚úÖ 6. Carregamento de fotos dos contatos MELHORADO (m√∫ltiplas fontes + logs)
// =====================================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import io from 'socket.io-client';

// ====================================
// AUDIOPLAYER COM VELOCIDADE (Mantido da v7.0)
// ====================================
const AudioPlayer = React.memo(({ url, filename }) => {
  const audioRef = useRef(null);
  const progressRef = useRef(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [duration, setDuration] = useState(0);
  const [currentTime, setCurrentTime] = useState(0);
  const [isLoaded, setIsLoaded] = useState(false);
  const [error, setError] = useState(false);
  const [playbackRate, setPlaybackRate] = useState(1);
  const [showSpeedMenu, setShowSpeedMenu] = useState(false);
  const speedMenuRef = useRef(null);
  
  const speedOptions = [
    { value: 0.5, label: '0.5x' },
    { value: 0.75, label: '0.75x' },
    { value: 1, label: '1x' },
    { value: 1.25, label: '1.25x' },
    { value: 1.5, label: '1.5x' },
    { value: 2, label: '2x' }
  ];

  const audioUrl = React.useMemo(() => {
    if (!url) return '';
    
    const invalidUrls = ['uploading...', 'uploading', 'processing', 'undefined', 'null', '', null, undefined];
    const containsInvalidKeywords = url && (
      url.includes('uploading') || 
      url.includes('processing') || 
      url.includes('undefined') || 
      url.includes('null') ||
      url.includes('temp') ||
      url.includes('blob:') ||
      url.length < 5
    );
    
    if (!url || invalidUrls.includes(url) || containsInvalidKeywords) {
      return '';
    }
    
    let finalUrl = url;
    if (!url.startsWith('http')) {
      finalUrl = url.startsWith('/') 
        ? `http://localhost:3001${url}` 
        : `http://localhost:3001/${url}`;
    }
    
    return finalUrl;
  }, [url]);

  if (!audioUrl || audioUrl === '') {
    return (
      <div style={audioPlayerStyles.container}>
        <div style={{
          ...audioPlayerStyles.fallback,
          backgroundColor: 'rgba(255,193,7,0.1)',
          color: '#856404',
          textAlign: 'center',
          padding: '15px'
        }}>
          Processando √°udio...
        </div>
      </div>
    );
  }

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (speedMenuRef.current && !speedMenuRef.current.contains(event.target)) {
        setShowSpeedMenu(false);
      }
    };
    
    if (showSpeedMenu) {
      document.addEventListener('mousedown', handleClickOutside);
      return () => document.removeEventListener('mousedown', handleClickOutside);
    }
  }, [showSpeedMenu]);

  useEffect(() => {
    if (!audioRef.current || !audioUrl) return;

    const audio = audioRef.current;
    
    const handleLoadedMetadata = () => {
      setDuration(audio.duration);
      setIsLoaded(true);
      setError(false);
      audio.playbackRate = playbackRate;
    };

    const handleCanPlay = () => {
      setIsLoaded(true);
      setError(false);
      audio.playbackRate = playbackRate;
    };

    const handleTimeUpdate = () => {
      setCurrentTime(audio.currentTime);
    };

    const handleEnded = () => {
      setIsPlaying(false);
      setCurrentTime(0);
    };

    const handleError = (e) => {
      setError(true);
      setIsLoaded(false);
    };

    const handleLoadStart = () => {
      setError(false);
    };

    audio.addEventListener('loadedmetadata', handleLoadedMetadata);
    audio.addEventListener('canplay', handleCanPlay);
    audio.addEventListener('timeupdate', handleTimeUpdate);
    audio.addEventListener('ended', handleEnded);
    audio.addEventListener('error', handleError);
    audio.addEventListener('loadstart', handleLoadStart);

    audio.crossOrigin = "anonymous";
    audio.preload = "metadata";
    audio.src = audioUrl;

    return () => {
      audio.removeEventListener('loadedmetadata', handleLoadedMetadata);
      audio.removeEventListener('canplay', handleCanPlay);
      audio.removeEventListener('timeupdate', handleTimeUpdate);
      audio.removeEventListener('ended', handleEnded);
      audio.removeEventListener('error', handleError);
      audio.removeEventListener('loadstart', handleLoadStart);
    };
  }, [audioUrl, playbackRate]);

  useEffect(() => {
    if (audioRef.current && isLoaded) {
      audioRef.current.playbackRate = playbackRate;
    }
  }, [playbackRate, isLoaded]);

  const togglePlay = async () => {
    if (!audioRef.current || !isLoaded) return;

    try {
      if (isPlaying) {
        audioRef.current.pause();
        setIsPlaying(false);
      } else {
        await audioRef.current.play();
        setIsPlaying(true);
      }
    } catch (error) {
      setError(true);
    }
  };

  const handleProgressClick = (e) => {
    if (!audioRef.current || !progressRef.current || !duration) return;

    const rect = progressRef.current.getBoundingClientRect();
    const clickX = e.clientX - rect.left;
    const percentage = clickX / rect.width;
    const newTime = percentage * duration;

    audioRef.current.currentTime = newTime;
    setCurrentTime(newTime);
  };

  const changeSpeed = (newSpeed) => {
    setPlaybackRate(newSpeed);
    setShowSpeedMenu(false);
  };

  const formatTime = (time) => {
    if (!time || !isFinite(time)) return '0:00';
    
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  if (error) {
    return (
      <div style={audioPlayerStyles.container}>
        <div style={audioPlayerStyles.fallback}>
          <span>Audio {filename || '√Åudio'}</span>
          <audio controls style={{ width: '100%', marginTop: '8px' }}>
            <source src={audioUrl} type="audio/ogg; codecs=opus" />
            <source src={audioUrl} type="audio/ogg" />
            <source src={audioUrl} type="audio/mpeg" />
            <source src={audioUrl} />
          </audio>
        </div>
      </div>
    );
  }

  return (
    <div style={audioPlayerStyles.container}>
      <audio 
        ref={audioRef}
        style={{ display: 'none' }}
        crossOrigin="anonymous"
      />
      
      <div style={audioPlayerStyles.player}>
        <button 
          onClick={togglePlay}
          style={audioPlayerStyles.playButton}
          disabled={!isLoaded}
        >
          {!isLoaded ? '‚è≥' : isPlaying ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}
        </button>
        
        <div style={audioPlayerStyles.info}>
          <div style={audioPlayerStyles.filename}>
            üéµ {filename || '√Åudio'}
          </div>
          
          <div style={audioPlayerStyles.controls}>
            <span style={audioPlayerStyles.time}>
              {formatTime(currentTime)}
            </span>
            
            <div 
              ref={progressRef}
              style={audioPlayerStyles.progressBar}
              onClick={handleProgressClick}
            >
              <div 
                style={{
                  ...audioPlayerStyles.progress,
                  width: duration ? `${(currentTime / duration) * 100}%` : '0%'
                }}
              />
            </div>
            
            <span style={audioPlayerStyles.time}>
              {formatTime(duration)}
            </span>
          </div>
        </div>
        
        <div style={audioPlayerStyles.speedControl} ref={speedMenuRef}>
          <button
            style={audioPlayerStyles.speedButton}
            onClick={() => setShowSpeedMenu(!showSpeedMenu)}
            title="Velocidade de reprodu√ß√£o"
            disabled={!isLoaded}
          >
            {playbackRate}x
          </button>
          
          {showSpeedMenu && (
            <div style={audioPlayerStyles.speedMenu}>
              {speedOptions.map(option => (
                <button
                  key={option.value}
                  style={{
                    ...audioPlayerStyles.speedOption,
                    ...(playbackRate === option.value ? audioPlayerStyles.speedOptionActive : {})
                  }}
                  onClick={() => changeSpeed(option.value)}
                >
                  {option.label}
                </button>
              ))}
            </div>
          )}
        </div>
        
        <a
          href={audioUrl}
          target="_blank"
          rel="noopener noreferrer"
          style={audioPlayerStyles.downloadLink}
        >
          üíæ
        </a>
      </div>
    </div>
  );
});

const audioPlayerStyles = {
  container: {
    padding: '10px',
    backgroundColor: 'rgba(0,0,0,0.05)',
    borderRadius: '10px',
    minWidth: '280px',
    maxWidth: '400px'
  },
  player: {
    display: 'flex',
    alignItems: 'center',
    gap: '10px'
  },
  playButton: {
    background: '#25D366',
    border: 'none',
    borderRadius: '50%',
    width: '40px',
    height: '40px',
    cursor: 'pointer',
    fontSize: '16px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    color: 'white'
  },
  info: {
    flex: 1,
    minWidth: 0
  },
  filename: {
    fontSize: '12px',
    fontWeight: 'bold',
    marginBottom: '4px',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  controls: {
    display: 'flex',
    alignItems: 'center',
    gap: '8px'
  },
  time: {
    fontSize: '11px',
    color: '#666',
    minWidth: '35px'
  },
  progressBar: {
    flex: 1,
    height: '4px',
    backgroundColor: '#ddd',
    borderRadius: '2px',
    cursor: 'pointer',
    position: 'relative'
  },
  progress: {
    height: '100%',
    backgroundColor: '#25D366',
    borderRadius: '2px',
    transition: 'width 0.1s ease'
  },
  speedControl: {
    position: 'relative'
  },
  speedButton: {
    background: '#667eea',
    border: 'none',
    borderRadius: '15px',
    padding: '4px 8px',
    cursor: 'pointer',
    fontSize: '11px',
    color: 'white',
    fontWeight: 'bold',
    minWidth: '35px',
    transition: 'all 0.2s'
  },
  speedMenu: {
    position: 'absolute',
    bottom: '30px',
    right: '0',
    backgroundColor: 'white',
    border: '1px solid #ddd',
    borderRadius: '5px',
    boxShadow: '0 2px 8px rgba(0,0,0,0.15)',
    zIndex: 100,
    minWidth: '60px'
  },
  speedOption: {
    display: 'block',
    width: '100%',
    padding: '8px 12px',
    background: 'none',
    border: 'none',
    cursor: 'pointer',
    fontSize: '12px',
    textAlign: 'left',
    transition: 'background-color 0.2s'
  },
  speedOptionActive: {
    backgroundColor: '#667eea',
    color: 'white'
  },
  downloadLink: {
    color: '#667eea',
    textDecoration: 'none',
    fontSize: '16px',
    padding: '4px'
  },
  fallback: {
    textAlign: 'center',
    padding: '10px'
  }
};

// ====================================
// COMPONENTE DE GRAVA√á√ÉO DE √ÅUDIO (Mantido da v7.0)
// ====================================
const AudioRecorder = ({ onRecordingComplete, onCancel }) => {
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const [recordedBlob, setRecordedBlob] = useState(null);
  const [isPlaying, setIsPlaying] = useState(false);
  
  const mediaRecorderRef = useRef(null);
  const chunksRef = useRef([]);
  const timerRef = useRef(null);
  const audioRef = useRef(null);
  
  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          sampleRate: 44100
        } 
      });
      
      chunksRef.current = [];
      
      const mediaRecorder = new MediaRecorder(stream, {
        mimeType: 'audio/webm;codecs=opus'
      });
      
      mediaRecorderRef.current = mediaRecorder;
      
      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunksRef.current.push(event.data);
        }
      };
      
      mediaRecorder.onstop = () => {
        const blob = new Blob(chunksRef.current, { 
          type: 'audio/webm;codecs=opus' 
        });
        
        setRecordedBlob(blob);
        stream.getTracks().forEach(track => track.stop());
      };
      
      mediaRecorder.start();
      setIsRecording(true);
      setRecordingTime(0);
      
      timerRef.current = setInterval(() => {
        setRecordingTime(prev => {
          const newTime = prev + 1;
          if (newTime >= 300) {
            stopRecording();
          }
          return newTime;
        });
      }, 1000);
      
    } catch (error) {
      alert('N√£o foi poss√≠vel acessar o microfone. Verifique as permiss√µes.');
    }
  };
  
  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      
      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
    }
  };
  
  const playRecording = () => {
    if (recordedBlob && audioRef.current) {
      const url = URL.createObjectURL(recordedBlob);
      audioRef.current.src = url;
      audioRef.current.play();
      setIsPlaying(true);
      
      audioRef.current.onended = () => {
        setIsPlaying(false);
        URL.revokeObjectURL(url);
      };
    }
  };
  
  const stopPlaying = () => {
    if (audioRef.current) {
      audioRef.current.pause();
      audioRef.current.currentTime = 0;
      setIsPlaying(false);
    }
  };
  
  const sendRecording = () => {
    if (recordedBlob) {
      const audioFile = new File([recordedBlob], `audio-${Date.now()}.webm`, {
        type: 'audio/webm;codecs=opus'
      });
      
      onRecordingComplete(audioFile);
    }
  };
  
  const cancelRecording = () => {
    if (isRecording) {
      stopRecording();
    }
    
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
    
    setRecordedBlob(null);
    setRecordingTime(0);
    onCancel();
  };
  
  useEffect(() => {
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
      if (mediaRecorderRef.current) {
        mediaRecorderRef.current.stop();
      }
    };
  }, []);
  
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };
  
  return (
    <div style={recorderStyles.container}>
      <audio ref={audioRef} style={{ display: 'none' }} />
      
      {!recordedBlob ? (
        <div style={recorderStyles.recordingInterface}>
          <div style={recorderStyles.header}>
            <span style={recorderStyles.title}>üé§ Gravar √Åudio</span>
            <button style={recorderStyles.closeBtn} onClick={cancelRecording}>‚ùå</button>
          </div>
          
          <div style={recorderStyles.recordingArea}>
            {isRecording ? (
              <div style={recorderStyles.recordingActive}>
                <div style={recorderStyles.recordingIndicator}>
                  <div style={recorderStyles.pulsingDot}></div>
                  <span style={recorderStyles.recordingText}>Gravando...</span>
                </div>
                <div style={recorderStyles.timer}>{formatTime(recordingTime)}</div>
                <button style={recorderStyles.stopBtn} onClick={stopRecording}>
                  ‚èπÔ∏è Parar
                </button>
              </div>
            ) : (
              <div style={recorderStyles.recordingInactive}>
                <button style={recorderStyles.startBtn} onClick={startRecording}>
                  üéôÔ∏è Iniciar Grava√ß√£o
                </button>
                <small style={recorderStyles.hint}>
                  Clique para gravar sua mensagem de voz
                </small>
              </div>
            )}
          </div>
        </div>
      ) : (
        <div style={recorderStyles.previewInterface}>
          <div style={recorderStyles.header}>
            <span style={recorderStyles.title}>üéµ √Åudio Gravado</span>
            <button style={recorderStyles.closeBtn} onClick={cancelRecording}>‚ùå</button>
          </div>
          
          <div style={recorderStyles.previewArea}>
            <div style={recorderStyles.audioInfo}>
              <span style={recorderStyles.duration}>‚è±Ô∏è Tempo: {formatTime(recordingTime)}</span>
              <span style={recorderStyles.size}>
                üìÅ Tamanho: {(recordedBlob.size / 1024).toFixed(1)} KB
              </span>
            </div>
            
            <div style={recorderStyles.previewControls}>
              <button 
                style={recorderStyles.playBtn} 
                onClick={isPlaying ? stopPlaying : playRecording}
              >
                {isPlaying ? '‚èπÔ∏è Parar' : '‚ñ∂Ô∏è Ouvir'}
              </button>
            </div>
            
            <div style={recorderStyles.actionButtons}>
              <button style={recorderStyles.discardBtn} onClick={cancelRecording}>
                üóëÔ∏è Descartar
              </button>
              <button style={recorderStyles.sendBtn} onClick={sendRecording}>
                üì§ Enviar
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

const recorderStyles = {
  container: {
    position: 'absolute',
    bottom: '70px',
    left: '10px',
    right: '10px',
    backgroundColor: 'white',
    borderRadius: '10px',
    boxShadow: '0 4px 20px rgba(0, 0, 0, 0.2)',
    border: '1px solid #ddd',
    zIndex: 100
  },
  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '15px 20px',
    borderBottom: '1px solid #eee'
  },
  title: {
    fontWeight: 'bold',
    color: '#2B4C8C',
    fontSize: '16px'
  },
  closeBtn: {
    background: 'none',
    border: 'none',
    fontSize: '18px',
    cursor: 'pointer',
    color: '#666',
    padding: '5px'
  },
  recordingInterface: {
    padding: '0'
  },
  recordingArea: {
    padding: '20px',
    textAlign: 'center'
  },
  recordingActive: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    gap: '15px'
  },
  recordingIndicator: {
    display: 'flex',
    alignItems: 'center',
    gap: '10px'
  },
  pulsingDot: {
    width: '12px',
    height: '12px',
    backgroundColor: '#dc3545',
    borderRadius: '50%',
    animation: 'pulse 1s infinite'
  },
  recordingText: {
    color: '#dc3545',
    fontWeight: 'bold'
  },
  timer: {
    fontSize: '24px',
    fontWeight: 'bold',
    color: '#2B4C8C',
    fontFamily: 'monospace'
  },
  stopBtn: {
    padding: '10px 20px',
    backgroundColor: '#dc3545',
    color: 'white',
    border: 'none',
    borderRadius: '20px',
    cursor: 'pointer',
    fontSize: '16px',
    fontWeight: 'bold'
  },
  recordingInactive: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    gap: '10px'
  },
  startBtn: {
    padding: '15px 30px',
    backgroundColor: '#2B4C8C',
    color: 'white',
    border: 'none',
    borderRadius: '25px',
    cursor: 'pointer',
    fontSize: '16px',
    fontWeight: 'bold'
  },
  hint: {
    color: '#666',
    fontSize: '12px'
  },
  previewInterface: {
    padding: '0'
  },
  previewArea: {
    padding: '20px'
  },
  audioInfo: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '10px 15px',
    backgroundColor: '#f8f9fa',
    borderRadius: '5px',
    marginBottom: '15px',
    fontSize: '14px'
  },
  duration: {
    color: '#2B4C8C'
  },
  size: {
    color: '#666'
  },
  previewControls: {
    textAlign: 'center',
    marginBottom: '20px'
  },
  playBtn: {
    padding: '10px 20px',
    backgroundColor: '#25D366',
    color: 'white',
    border: 'none',
    borderRadius: '20px',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: 'bold'
  },
  actionButtons: {
    display: 'flex',
    gap: '10px',
    justifyContent: 'center'
  },
  discardBtn: {
    padding: '10px 20px',
    backgroundColor: '#6c757d',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px'
  },
  sendBtn: {
    padding: '10px 20px',
    backgroundColor: '#2B4C8C',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: 'bold'
  }
};

// Anima√ß√£o CSS para o pulso
const pulseAnimation = `
@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.3; }
  100% { opacity: 1; }
}
`;

if (typeof document !== 'undefined') {
  const style = document.createElement('style');
  style.textContent = pulseAnimation;
  document.head.appendChild(style);
}

// ====================================
// EMOJI PICKER EXPANDIDO (Mantido da v7.0)
// ====================================
const EmojiPicker = ({ isOpen, onEmojiSelect, onClose }) => {
  const [activeCategory, setActiveCategory] = useState('smileys');
  
  const emojiCategories = {
    smileys: {
      name: 'üòÄ Rostos',
      emojis: [
        'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 'üôÉ',
        'üòâ', 'üòä', 'üòá', 'ü•∞', 'üòç', 'ü§©', 'üòò', 'üòó', '‚ò∫Ô∏è', 'üòö',
        'üòô', 'ü•≤', 'üòã', 'üòõ', 'üòú', 'ü§™', 'üòù', 'ü§ë', 'ü§ó', 'ü§≠',
        'ü§´', 'ü§î', 'ü§ê', 'ü§®', 'üòê', 'üòë', 'üò∂', 'üòè', 'üòí', 'üôÑ',
        'üò¨', 'ü§•', 'üòî', 'üò™', 'ü§§', 'üò¥', 'üò∑', 'ü§í', 'ü§ï', 'ü§¢',
        'ü§Æ', 'ü§ß', 'ü•µ', 'ü•∂', 'ü•¥', 'üòµ', 'ü§Ø', 'ü§†', 'ü•≥', 'ü•∏'
      ]
    },
    people: {
      name: 'üë§ Pessoas',
      emojis: [
        'üë∂', 'üßí', 'üë¶', 'üëß', 'üßë', 'üë±', 'üë®', 'üßî', 'üë±‚Äç‚ôÇÔ∏è', 'üë®‚Äçü¶∞',
        'üë®‚Äçü¶±', 'üë®‚Äçü¶≥', 'üë®‚Äçü¶≤', 'üë©', 'üë±‚Äç‚ôÄÔ∏è', 'üë©‚Äçü¶∞', 'üë©‚Äçü¶±', 'üë©‚Äçü¶≥', 'üë©‚Äçü¶≤', 'üßì',
        'üë¥', 'üëµ', 'üôç', 'üôç‚Äç‚ôÇÔ∏è', 'üôç‚Äç‚ôÄÔ∏è', 'üôé', 'üôé‚Äç‚ôÇÔ∏è', 'üôé‚Äç‚ôÄÔ∏è', 'üôÖ', 'üôÖ‚Äç‚ôÇÔ∏è',
        'üôÖ‚Äç‚ôÄÔ∏è', 'üôÜ', 'üôÜ‚Äç‚ôÇÔ∏è', 'üôÜ‚Äç‚ôÄÔ∏è', 'üíÅ', 'üíÅ‚Äç‚ôÇÔ∏è', 'üíÅ‚Äç‚ôÄÔ∏è', 'üôã', 'üôã‚Äç‚ôÇÔ∏è', 'üôã‚Äç‚ôÄÔ∏è',
        'üßè', 'üßè‚Äç‚ôÇÔ∏è', 'üßè‚Äç‚ôÄÔ∏è', 'üôá', 'üôá‚Äç‚ôÇÔ∏è', 'üôá‚Äç‚ôÄÔ∏è', 'ü§¶', 'ü§¶‚Äç‚ôÇÔ∏è', 'ü§¶‚Äç‚ôÄÔ∏è', 'ü§∑'
      ]
    },
    nature: {
      name: 'üåø Natureza',
      emojis: [
        'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ',
        'ü¶Å', 'üêÆ', 'üê∑', 'üêΩ', 'üê∏', 'üêµ', 'üôà', 'üôâ', 'üôä', 'üêí',
        'üêî', 'üêß', 'üê¶', 'üê§', 'üê£', 'üê•', 'ü¶Ü', 'ü¶Ö', 'ü¶â', 'ü¶á',
        'üê∫', 'üêó', 'üê¥', 'ü¶Ñ', 'üêù', 'üêõ', 'ü¶ã', 'üêå', 'üêû', 'üêú',
        'ü¶ü', 'ü¶ó', 'üï∑Ô∏è', 'üï∏Ô∏è', 'ü¶Ç', 'üê¢', 'üêç', 'ü¶é', 'ü¶ñ', 'ü¶ï'
      ]
    },
    food: {
      name: 'üçï Comida',
      emojis: [
        'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'ü´ê', 'üçà',
        'üçí', 'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù', 'üçÖ', 'üçÜ', 'ü•ë', 'ü•¶',
        'ü•¨', 'ü•í', 'üå∂Ô∏è', 'ü´ë', 'üåΩ', 'ü•ï', 'ü´í', 'üßÑ', 'üßÖ', 'ü•î',
        'üç†', 'ü•ê', 'ü•ñ', 'üçû', 'ü•®', 'ü•Ø', 'üßÄ', 'ü•ö', 'üç≥', 'üßà',
        'ü•û', 'üßá', 'ü•ì', 'ü•©', 'üçó', 'üçñ', 'ü¶¥', 'üå≠', 'üçî', 'üçü',
        'üçï', 'ü•™', 'ü•ô', 'üßÜ', 'üåÆ', 'üåØ', 'ü´î', 'ü•ó', 'ü•ò', 'ü´ï'
      ]
    },
    activities: {
      name: '‚öΩ Atividades',
      emojis: [
        '‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±',
        'ü™Ä', 'üèì', 'üè∏', 'üèí', 'üèë', 'ü•ç', 'üèè', '‚õ≥', 'ü™Å', 'üèπ',
        'üé£', 'ü§ø', 'ü•ä', 'ü•ã', 'üéΩ', 'üõπ', 'üõ∑', '‚õ∏Ô∏è', 'ü•å', 'üéø',
        '‚õ∑Ô∏è', 'üèÇ', 'ü™Ç', 'üèãÔ∏è', 'ü§º', 'ü§∏', '‚õπÔ∏è', 'ü§∫', 'ü§æ', 'üèåÔ∏è',
        'üèá', 'üßò', 'üèÑ', 'üèä', 'ü§Ω', 'üö£', 'üßó', 'üöµ', 'üö¥', 'üèÜ'
      ]
    },
    travel: {
      name: 'üöó Viagem',
      emojis: [
        'üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèéÔ∏è', 'üöì', 'üöë', 'üöí', 'üöê',
        'üõª', 'üöö', 'üöõ', 'üöú', 'ü¶Ø', 'ü¶Ω', 'ü¶º', 'üõ¥', 'üö≤', 'üõµ',
        'üèçÔ∏è', 'üõ∫', 'üö®', 'üöî', 'üöç', 'üöò', 'üöñ', 'üö°', 'üö†', 'üöü',
        'üöÉ', 'üöã', 'üöû', 'üöù', 'üöÑ', 'üöÖ', 'üöà', 'üöÇ', 'üöÜ', 'üöá',
        'üöä', 'üöâ', '‚úàÔ∏è', 'üõ´', 'üõ¨', 'üõ©Ô∏è', 'üí∫', 'üõ∞Ô∏è', 'üöÄ', 'üõ∏'
      ]
    },
    objects: {
      name: 'üì± Objetos',
      emojis: [
        '‚åö', 'üì±', 'üì≤', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ®Ô∏è', 'üñ±Ô∏è', 'üñ≤Ô∏è', 'üïπÔ∏è',
        'üóúÔ∏è', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 'üìº', 'üì∑', 'üì∏', 'üìπ', 'üé•',
        'üìΩÔ∏è', 'üéûÔ∏è', 'üìû', '‚òéÔ∏è', 'üìü', 'üì†', 'üì∫', 'üìª', 'üéôÔ∏è', 'üéöÔ∏è',
        'üéõÔ∏è', 'üß≠', '‚è±Ô∏è', '‚è≤Ô∏è', '‚è∞', 'üï∞Ô∏è', '‚åõ', '‚è≥', 'üì°', 'üîã',
        'üîå', 'üí°', 'üî¶', 'üïØÔ∏è', 'ü™î', 'üßØ', 'üõ¢Ô∏è', 'üí∏', 'üíµ', 'üí¥'
      ]
    },
    symbols: {
      name: '‚ù§Ô∏è S√≠mbolos',
      emojis: [
        '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî',
        '‚ù£Ô∏è', 'üíï', 'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', 'üíü', '‚òÆÔ∏è',
        '‚úùÔ∏è', '‚ò™Ô∏è', 'üïâÔ∏è', '‚ò∏Ô∏è', '‚ú°Ô∏è', 'üîØ', 'üïé', '‚òØÔ∏è', '‚ò¶Ô∏è', 'üõê',
        '‚õé', '‚ôà', '‚ôâ', '‚ôä', '‚ôã', '‚ôå', '‚ôç', '‚ôé', '‚ôè', '‚ôê',
        '‚ôë', '‚ôí', '‚ôì', 'üÜî', '‚öõÔ∏è', 'üâë', '‚ò¢Ô∏è', '‚ò£Ô∏è', 'üì¥', 'üì≥'
      ]
    },
    flags: {
      name: 'üè≥Ô∏è Bandeiras',
      emojis: [
        'üè≥Ô∏è', 'üè¥', 'üèÅ', 'üö©', 'üè≥Ô∏è‚Äçüåà', 'üè≥Ô∏è‚Äç‚ößÔ∏è', 'üè¥‚Äç‚ò†Ô∏è', 'üá¶üá´', 'üá¶üáΩ', 'üá¶üá±',
        'üáßüá∑', 'üá∫üá∏', 'üá¨üáß', 'üá´üá∑', 'üá©üá™', 'üáÆüáπ', 'üá™üá∏', 'üáµüáπ', 'üáØüáµ', 'üá∞üá∑',
        'üá®üá≥', 'üáÆüá≥', 'üá∑üá∫', 'üá®üá¶', 'üá¶üá∫', 'üá¶üá∑', 'üá≤üáΩ', 'üá®üá±', 'üá®üá¥', 'üáµüá™',
        'üá∫üáæ', 'üáµüáæ', 'üáßüá¥', 'üá™üá®', 'üáªüá™', 'üá¨üáæ', 'üá∏üá∑', 'üá´üá∞', 'üá¨üá´', 'üáßüáª'
      ]
    }
  };

  if (!isOpen) return null;

  return (
    <div style={emojiPickerStyles.overlay} onClick={onClose}>
      <div style={emojiPickerStyles.container} onClick={(e) => e.stopPropagation()}>
        <div style={emojiPickerStyles.header}>
          <h3 style={emojiPickerStyles.title}>üòä Emojis</h3>
          <button style={emojiPickerStyles.closeBtn} onClick={onClose}>‚ùå</button>
        </div>

        <div style={emojiPickerStyles.categories}>
          {Object.entries(emojiCategories).map(([key, category]) => (
            <button
              key={key}
              style={{
                ...emojiPickerStyles.categoryBtn,
                ...(activeCategory === key ? emojiPickerStyles.categoryBtnActive : {})
              }}
              onClick={() => setActiveCategory(key)}
            >
              {category.name.split(' ')[0]}
            </button>
          ))}
        </div>

        <div style={emojiPickerStyles.emojiGrid}>
          {emojiCategories[activeCategory].emojis.map((emoji, index) => (
            <button
              key={index}
              style={emojiPickerStyles.emojiBtn}
              onClick={() => {
                onEmojiSelect(emoji);
                onClose();
              }}
            >
              {emoji}
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};

const emojiPickerStyles = {
  overlay: {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000
  },
  container: {
    backgroundColor: 'white',
    borderRadius: '15px',
    boxShadow: '0 10px 30px rgba(0, 0, 0, 0.3)',
    width: '480px',
    maxWidth: '90vw',
    maxHeight: '600px',
    overflow: 'hidden'
  },
  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '15px 20px',
    borderBottom: '1px solid #eee',
    backgroundColor: '#f8f9fa'
  },
  title: {
    margin: 0,
    color: '#2B4C8C',
    fontSize: '18px'
  },
  closeBtn: {
    background: 'none',
    border: 'none',
    fontSize: '18px',
    cursor: 'pointer',
    padding: '5px'
  },
  categories: {
    display: 'flex',
    overflowX: 'auto',
    padding: '10px',
    borderBottom: '1px solid #eee',
    backgroundColor: '#f8f9fa'
  },
  categoryBtn: {
    background: 'none',
    border: 'none',
    padding: '8px 12px',
    fontSize: '14px',
    cursor: 'pointer',
    borderRadius: '20px',
    whiteSpace: 'nowrap',
    transition: 'all 0.2s',
    color: '#666'
  },
  categoryBtnActive: {
    backgroundColor: '#2B4C8C',
    color: 'white'
  },
  emojiGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(8, 1fr)',
    gap: '5px',
    padding: '15px',
    maxHeight: '400px',
    overflowY: 'auto'
  },
  emojiBtn: {
    background: 'none',
    border: 'none',
    fontSize: '24px',
    cursor: 'pointer',
    padding: '8px',
    borderRadius: '8px',
    transition: 'all 0.2s',
    aspectRatio: '1'
  }
};

// ====================================
// MODAL PARA EDITAR NOME COMPLETO (Mantido)
// ====================================
const EditNameModal = ({ isOpen, onClose, currentName, onSave }) => {
  const [newName, setNewName] = useState(currentName || '');
  const inputRef = useRef(null);

  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
      inputRef.current.select();
    }
  }, [isOpen]);

  useEffect(() => {
    setNewName(currentName || '');
  }, [currentName]);

  const handleSave = () => {
    if (newName.trim()) {
      onSave(newName.trim());
      onClose();
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSave();
    } else if (e.key === 'Escape') {
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div style={modalStyles.overlay} onClick={onClose}>
      <div style={modalStyles.modal} onClick={(e) => e.stopPropagation()}>
        <div style={modalStyles.header}>
          <h3 style={modalStyles.title}>‚úèÔ∏è Editar Nome do Contato</h3>
          <button style={modalStyles.closeBtn} onClick={onClose}>‚ùå</button>
        </div>
        
        <div style={modalStyles.body}>
          <label style={modalStyles.label}>Novo nome:</label>
          <input
            ref={inputRef}
            type="text"
            value={newName}
            onChange={(e) => setNewName(e.target.value)}
            onKeyPress={handleKeyPress}
            style={modalStyles.input}
            placeholder="Digite o nome do contato..."
            maxLength={50}
          />
          <small style={modalStyles.hint}>
            Este nome ser√° exibido apenas para voc√™
          </small>
        </div>
        
        <div style={modalStyles.footer}>
          <button style={modalStyles.cancelBtn} onClick={onClose}>
            Cancelar
          </button>
          <button 
            style={modalStyles.saveBtn} 
            onClick={handleSave}
            disabled={!newName.trim()}
          >
            üíæ Salvar
          </button>
        </div>
      </div>
    </div>
  );
};

// ====================================
// MODAL DE CONFIGURA√á√ÉO AVAN√áADA (Mantido da v7.0)
// ====================================
const AdvancedSettingsModal = ({ isOpen, onClose, currentSettings, onSave }) => {
  const [settings, setSettings] = useState({
    // Cores do sistema
    primaryColor: '#2B4C8C',
    secondaryColor: '#C97A4A',
    accentColor: '#8B9DC3',
    backgroundColor: '#f0f2f5',
    
    // Logo e branding
    companyName: 'PRIMEM COMEX',
    systemName: 'WHATSAPP BUSINESS',
    logoUrl: '',
    
    // Textos dos bot√µes
    loginButtonText: 'ENTRAR NO SISTEMA',
    sendButtonText: 'Enviar',
    attachButtonText: 'Anexar',
    connectButtonText: 'Conectar WhatsApp',
    
    // Configura√ß√µes de mensagens
    showTimestamps: true,
    showDeliveryStatus: true,
    enableSounds: true,
    defaultEmojiSkin: 'üëã',
    
    // Outras configura√ß√µes
    maxFileSize: 16, // MB
    autoDownloadMedia: true,
    compactMode: false,
    
    ...currentSettings
  });

  const [activeSettingsTab, setActiveSettingsTab] = useState('appearance');

  useEffect(() => {
    if (isOpen && currentSettings) {
      setSettings(prev => ({ ...prev, ...currentSettings }));
    }
  }, [isOpen, currentSettings]);

  const handleSave = () => {
    onSave(settings);
    onClose();
  };

  const updateSetting = (key, value) => {
    setSettings(prev => ({ ...prev, [key]: value }));
  };

  if (!isOpen) return null;

  return (
    <div style={modalStyles.overlay} onClick={onClose}>
      <div style={{...modalStyles.modal, minWidth: '700px', maxHeight: '80vh'}} onClick={(e) => e.stopPropagation()}>
        <div style={modalStyles.header}>
          <h3 style={modalStyles.title}>‚öôÔ∏è Configura√ß√µes Avan√ßadas</h3>
          <button style={modalStyles.closeBtn} onClick={onClose}>‚ùå</button>
        </div>
        
        <div style={modalStyles.body}>
          {/* Sub-tabs para configura√ß√µes */}
          <div style={advancedSettingsStyles.tabs}>
            <button 
              style={{
                ...advancedSettingsStyles.tab,
                ...(activeSettingsTab === 'appearance' ? advancedSettingsStyles.tabActive : {})
              }}
              onClick={() => setActiveSettingsTab('appearance')}
            >
              üé® Apar√™ncia
            </button>
            <button 
              style={{
                ...advancedSettingsStyles.tab,
                ...(activeSettingsTab === 'branding' ? advancedSettingsStyles.tabActive : {})
              }}
              onClick={() => setActiveSettingsTab('branding')}
            >
              üè¢ Marca
            </button>
            <button 
              style={{
                ...advancedSettingsStyles.tab,
                ...(activeSettingsTab === 'interface' ? advancedSettingsStyles.tabActive : {})
              }}
              onClick={() => setActiveSettingsTab('interface')}
            >
              üñ•Ô∏è Interface
            </button>
            <button 
              style={{
                ...advancedSettingsStyles.tab,
                ...(activeSettingsTab === 'behavior' ? advancedSettingsStyles.tabActive : {})
              }}
              onClick={() => setActiveSettingsTab('behavior')}
            >
              ‚ö° Comportamento
            </button>
          </div>

          <div style={advancedSettingsStyles.content}>
            {activeSettingsTab === 'appearance' && (
              <div>
                <h4>üé® Cores do Sistema</h4>
                <div style={advancedSettingsStyles.colorGrid}>
                  <div style={advancedSettingsStyles.colorItem}>
                    <label>Cor Prim√°ria:</label>
                    <div style={advancedSettingsStyles.colorInputContainer}>
                      <input
                        type="color"
                        value={settings.primaryColor}
                        onChange={(e) => updateSetting('primaryColor', e.target.value)}
                        style={advancedSettingsStyles.colorInput}
                      />
                      <span style={advancedSettingsStyles.colorValue}>{settings.primaryColor}</span>
                    </div>
                  </div>
                  
                  <div style={advancedSettingsStyles.colorItem}>
                    <label>Cor Secund√°ria:</label>
                    <div style={advancedSettingsStyles.colorInputContainer}>
                      <input
                        type="color"
                        value={settings.secondaryColor}
                        onChange={(e) => updateSetting('secondaryColor', e.target.value)}
                        style={advancedSettingsStyles.colorInput}
                      />
                      <span style={advancedSettingsStyles.colorValue}>{settings.secondaryColor}</span>
                    </div>
                  </div>
                  
                  <div style={advancedSettingsStyles.colorItem}>
                    <label>Cor de Destaque:</label>
                    <div style={advancedSettingsStyles.colorInputContainer}>
                      <input
                        type="color"
                        value={settings.accentColor}
                        onChange={(e) => updateSetting('accentColor', e.target.value)}
                        style={advancedSettingsStyles.colorInput}
                      />
                      <span style={advancedSettingsStyles.colorValue}>{settings.accentColor}</span>
                    </div>
                  </div>
                  
                  <div style={advancedSettingsStyles.colorItem}>
                    <label>Cor de Fundo:</label>
                    <div style={advancedSettingsStyles.colorInputContainer}>
                      <input
                        type="color"
                        value={settings.backgroundColor}
                        onChange={(e) => updateSetting('backgroundColor', e.target.value)}
                        style={advancedSettingsStyles.colorInput}
                      />
                      <span style={advancedSettingsStyles.colorValue}>{settings.backgroundColor}</span>
                    </div>
                  </div>
                </div>
                
                <div style={advancedSettingsStyles.preview}>
                  <h5>üì± Preview:</h5>
                  <div style={{
                    ...advancedSettingsStyles.previewCard,
                    backgroundColor: settings.primaryColor,
                    color: 'white'
                  }}>
                    <span>Header com cor prim√°ria</span>
                  </div>
                  <div style={{
                    ...advancedSettingsStyles.previewCard,
                    backgroundColor: settings.secondaryColor,
                    color: 'white'
                  }}>
                    <span>Bot√£o com cor secund√°ria</span>
                  </div>
                </div>
              </div>
            )}

            {activeSettingsTab === 'branding' && (
              <div>
                <h4>üè¢ Marca da Empresa</h4>
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>Nome da Empresa:</label>
                  <input
                    type="text"
                    value={settings.companyName}
                    onChange={(e) => updateSetting('companyName', e.target.value)}
                    style={modalStyles.input}
                    placeholder="PRIMEM COMEX"
                  />
                </div>
                
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>Nome do Sistema:</label>
                  <input
                    type="text"
                    value={settings.systemName}
                    onChange={(e) => updateSetting('systemName', e.target.value)}
                    style={modalStyles.input}
                    placeholder="WHATSAPP BUSINESS"
                  />
                </div>
                
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>URL do Logo:</label>
                  <input
                    type="url"
                    value={settings.logoUrl}
                    onChange={(e) => updateSetting('logoUrl', e.target.value)}
                    style={modalStyles.input}
                    placeholder="https://exemplo.com/logo.png"
                  />
                  <small style={modalStyles.hint}>
                    URL da imagem do logo (deixe vazio para usar padr√£o)
                  </small>
                </div>

                {settings.logoUrl && (
                  <div style={advancedSettingsStyles.logoPreview}>
                    <h5>üñºÔ∏è Preview do Logo:</h5>
                    <img 
                      src={settings.logoUrl} 
                      alt="Logo Preview" 
                      style={advancedSettingsStyles.logoImg}
                      onError={(e) => {
                        e.target.style.display = 'none';
                      }}
                    />
                  </div>
                )}
              </div>
            )}

            {activeSettingsTab === 'interface' && (
              <div>
                <h4>üñ•Ô∏è Textos da Interface</h4>
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>Bot√£o de Login:</label>
                  <input
                    type="text"
                    value={settings.loginButtonText}
                    onChange={(e) => updateSetting('loginButtonText', e.target.value)}
                    style={modalStyles.input}
                    placeholder="ENTRAR NO SISTEMA"
                  />
                </div>
                
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>Bot√£o de Enviar:</label>
                  <input
                    type="text"
                    value={settings.sendButtonText}
                    onChange={(e) => updateSetting('sendButtonText', e.target.value)}
                    style={modalStyles.input}
                    placeholder="Enviar"
                  />
                </div>
                
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>Bot√£o de Anexar:</label>
                  <input
                    type="text"
                    value={settings.attachButtonText}
                    onChange={(e) => updateSetting('attachButtonText', e.target.value)}
                    style={modalStyles.input}
                    placeholder="Anexar"
                  />
                </div>
                
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>Bot√£o Conectar WhatsApp:</label>
                  <input
                    type="text"
                    value={settings.connectButtonText}
                    onChange={(e) => updateSetting('connectButtonText', e.target.value)}
                    style={modalStyles.input}
                    placeholder="Conectar WhatsApp"
                  />
                </div>
              </div>
            )}

            {activeSettingsTab === 'behavior' && (
              <div>
                <h4>‚ö° Comportamento do Sistema</h4>
                <div style={advancedSettingsStyles.switchGroup}>
                  <div style={advancedSettingsStyles.switchItem}>
                    <label>üïê Mostrar hor√°rios nas mensagens</label>
                    <input
                      type="checkbox"
                      checked={settings.showTimestamps}
                      onChange={(e) => updateSetting('showTimestamps', e.target.checked)}
                      style={advancedSettingsStyles.switch}
                    />
                  </div>
                  
                  <div style={advancedSettingsStyles.switchItem}>
                    <label>‚úÖ Mostrar status de entrega</label>
                    <input
                      type="checkbox"
                      checked={settings.showDeliveryStatus}
                      onChange={(e) => updateSetting('showDeliveryStatus', e.target.checked)}
                      style={advancedSettingsStyles.switch}
                    />
                  </div>
                  
                  <div style={advancedSettingsStyles.switchItem}>
                    <label>üîä Sons de notifica√ß√£o</label>
                    <input
                      type="checkbox"
                      checked={settings.enableSounds}
                      onChange={(e) => updateSetting('enableSounds', e.target.checked)}
                      style={advancedSettingsStyles.switch}
                    />
                  </div>
                  
                  <div style={advancedSettingsStyles.switchItem}>
                    <label>üì• Download autom√°tico de m√≠dia</label>
                    <input
                      type="checkbox"
                      checked={settings.autoDownloadMedia}
                      onChange={(e) => updateSetting('autoDownloadMedia', e.target.checked)}
                      style={advancedSettingsStyles.switch}
                    />
                  </div>
                  
                  <div style={advancedSettingsStyles.switchItem}>
                    <label>üì± Modo compacto</label>
                    <input
                      type="checkbox"
                      checked={settings.compactMode}
                      onChange={(e) => updateSetting('compactMode', e.target.checked)}
                      style={advancedSettingsStyles.switch}
                    />
                  </div>
                </div>
                
                <div style={advancedSettingsStyles.formGroup}>
                  <label style={modalStyles.label}>üìÅ Tamanho m√°ximo de arquivo (MB):</label>
                  <input
                    type="number"
                    value={settings.maxFileSize}
                    onChange={(e) => updateSetting('maxFileSize', parseInt(e.target.value))}
                    style={modalStyles.input}
                    min="1"
                    max="100"
                  />
                </div>
              </div>
            )}
          </div>
        </div>
        
        <div style={modalStyles.footer}>
          <button style={modalStyles.cancelBtn} onClick={onClose}>
            Cancelar
          </button>
          <button style={modalStyles.saveBtn} onClick={handleSave}>
            üíæ Salvar Configura√ß√µes
          </button>
        </div>
      </div>
    </div>
  );
};

const advancedSettingsStyles = {
  tabs: {
    display: 'flex',
    borderBottom: '1px solid #eee',
    marginBottom: '20px'
  },
  tab: {
    flex: 1,
    padding: '10px 8px',
    background: 'none',
    border: 'none',
    cursor: 'pointer',
    fontSize: '12px',
    color: '#666',
    transition: 'all 0.3s',
    borderBottom: '2px solid transparent'
  },
  tabActive: {
    color: '#2B4C8C',
    borderBottom: '2px solid #2B4C8C',
    fontWeight: 'bold'
  },
  content: {
    maxHeight: '400px',
    overflowY: 'auto',
    padding: '10px 0'
  },
  colorGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
    gap: '15px',
    marginBottom: '20px'
  },
  colorItem: {
    display: 'flex',
    flexDirection: 'column',
    gap: '8px'
  },
  colorInputContainer: {
    display: 'flex',
    alignItems: 'center',
    gap: '10px'
  },
  colorInput: {
    width: '50px',
    height: '30px',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer'
  },
  colorValue: {
    fontSize: '12px',
    color: '#666',
    fontFamily: 'monospace'
  },
  preview: {
    marginTop: '20px',
    padding: '15px',
    backgroundColor: '#f8f9fa',
    borderRadius: '8px'
  },
  previewCard: {
    padding: '10px',
    borderRadius: '5px',
    marginBottom: '8px',
    textAlign: 'center'
  },
  formGroup: {
    marginBottom: '20px'
  },
  switchGroup: {
    display: 'flex',
    flexDirection: 'column',
    gap: '15px',
    marginBottom: '20px'
  },
  switchItem: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '10px',
    backgroundColor: '#f8f9fa',
    borderRadius: '8px'
  },
  switch: {
    width: '50px',
    height: '25px',
    cursor: 'pointer'
  },
  logoPreview: {
    marginTop: '15px',
    textAlign: 'center'
  },
  logoImg: {
    maxWidth: '200px',
    maxHeight: '100px',
    borderRadius: '8px',
    border: '1px solid #ddd'
  }
};

// MODAL DE CONFIGURA√á√ÉO DE USU√ÅRIO (Mantido da v7.0)
const UserProfileModal = ({ isOpen, onClose, currentUser, onSave }) => {
  const [profileData, setProfileData] = useState({
    name: '',
    email: '',
    displayName: '',
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (isOpen && currentUser) {
      setProfileData({
        name: currentUser.name || '',
        email: currentUser.email || '',
        displayName: currentUser.displayName || currentUser.name || '',
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
      setErrors({});
    }
  }, [isOpen, currentUser]);

  const validateForm = () => {
    const newErrors = {};
    
    if (!profileData.name.trim()) {
      newErrors.name = 'Nome √© obrigat√≥rio';
    }
    
    if (!profileData.email.trim()) {
      newErrors.email = 'Email √© obrigat√≥rio';
    } else if (!/\S+@\S+\.\S+/.test(profileData.email)) {
      newErrors.email = 'Email inv√°lido';
    }
    
    if (!profileData.displayName.trim()) {
      newErrors.displayName = 'Nome de exibi√ß√£o √© obrigat√≥rio';
    }
    
    if (profileData.newPassword) {
      if (profileData.newPassword.length < 3) {
        newErrors.newPassword = 'Nova senha deve ter pelo menos 3 caracteres';
      }
      
      if (profileData.newPassword !== profileData.confirmPassword) {
        newErrors.confirmPassword = 'Senhas n√£o coincidem';
      }
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSave = () => {
    if (validateForm()) {
      onSave(profileData);
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div style={modalStyles.overlay} onClick={onClose}>
      <div style={{...modalStyles.modal, minWidth: '500px'}} onClick={(e) => e.stopPropagation()}>
        <div style={modalStyles.header}>
          <h3 style={modalStyles.title}>üë§ Configura√ß√£o de Usu√°rio</h3>
          <button style={modalStyles.closeBtn} onClick={onClose}>‚ùå</button>
        </div>
        
        <div style={modalStyles.body}>
          <div style={modalStyles.formGroup}>
            <label style={modalStyles.label}>Nome completo:</label>
            <input
              type="text"
              value={profileData.name}
              onChange={(e) => setProfileData(prev => ({...prev, name: e.target.value}))}
              style={{...modalStyles.input, ...(errors.name ? modalStyles.inputError : {})}}
              placeholder="Seu nome completo..."
            />
            {errors.name && <span style={modalStyles.error}>{errors.name}</span>}
          </div>

          <div style={modalStyles.formGroup}>
            <label style={modalStyles.label}>Email:</label>
            <input
              type="email"
              value={profileData.email}
              onChange={(e) => setProfileData(prev => ({...prev, email: e.target.value}))}
              style={{...modalStyles.input, ...(errors.email ? modalStyles.inputError : {})}}
              placeholder="seu@email.com"
            />
            {errors.email && <span style={modalStyles.error}>{errors.email}</span>}
          </div>

          <div style={modalStyles.formGroup}>
            <label style={modalStyles.label}>Nome de exibi√ß√£o nas mensagens:</label>
            <input
              type="text"
              value={profileData.displayName}
              onChange={(e) => setProfileData(prev => ({...prev, displayName: e.target.value}))}
              style={{...modalStyles.input, ...(errors.displayName ? modalStyles.inputError : {})}}
              placeholder="Como seu nome aparecer√° nas mensagens..."
            />
            {errors.displayName && <span style={modalStyles.error}>{errors.displayName}</span>}
            <small style={modalStyles.hint}>
              Este nome aparecer√° nas mensagens que voc√™ enviar
            </small>
          </div>

          <div style={modalStyles.separator}>
            <h4 style={modalStyles.sectionTitle}>Alterar Senha (Opcional)</h4>
          </div>

          <div style={modalStyles.formGroup}>
            <label style={modalStyles.label}>Nova senha:</label>
            <div style={modalStyles.passwordContainer}>
              <input
                type={showPassword ? "text" : "password"}
                value={profileData.newPassword}
                onChange={(e) => setProfileData(prev => ({...prev, newPassword: e.target.value}))}
                style={{...modalStyles.input, ...(errors.newPassword ? modalStyles.inputError : {}), paddingRight: '40px'}}
                placeholder="Digite a nova senha..."
              />
              <button
                type="button"
                style={modalStyles.passwordToggle}
                onClick={() => setShowPassword(!showPassword)}
              >
                {showPassword ? 'üôà' : 'üëÅÔ∏è'}
              </button>
            </div>
            {errors.newPassword && <span style={modalStyles.error}>{errors.newPassword}</span>}
          </div>

          {profileData.newPassword && (
            <div style={modalStyles.formGroup}>
              <label style={modalStyles.label}>Confirmar nova senha:</label>
              <input
                type={showPassword ? "text" : "password"}
                value={profileData.confirmPassword}
                onChange={(e) => setProfileData(prev => ({...prev, confirmPassword: e.target.value}))}
                style={{...modalStyles.input, ...(errors.confirmPassword ? modalStyles.inputError : {})}}
                placeholder="Confirme a nova senha..."
              />
              {errors.confirmPassword && <span style={modalStyles.error}>{errors.confirmPassword}</span>}
            </div>
          )}
        </div>
        
        <div style={modalStyles.footer}>
          <button style={modalStyles.cancelBtn} onClick={onClose}>
            Cancelar
          </button>
          <button style={modalStyles.saveBtn} onClick={handleSave}>
            üíæ Salvar Perfil
          </button>
        </div>
      </div>
    </div>
  );
};

// Estilos do Modal expandidos
const modalStyles = {
  overlay: {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000
  },
  modal: {
    backgroundColor: 'white',
    borderRadius: '10px',
    boxShadow: '0 10px 30px rgba(0, 0, 0, 0.3)',
    minWidth: '400px',
    maxWidth: '500px',
    width: '90%',
    maxHeight: '90vh',
    overflowY: 'auto'
  },
  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '20px 20px 0 20px',
    borderBottom: '1px solid #eee',
    paddingBottom: '15px',
    marginBottom: '20px'
  },
  title: {
    margin: 0,
    color: '#2B4C8C',
    fontSize: '18px'
  },
  closeBtn: {
    background: 'none',
    border: 'none',
    fontSize: '20px',
    cursor: 'pointer',
    color: '#666',
    padding: '5px'
  },
  body: {
    padding: '0 20px'
  },
  formGroup: {
    marginBottom: '20px'
  },
  label: {
    display: 'block',
    marginBottom: '8px',
    fontWeight: '500',
    color: '#333',
    fontSize: '14px'
  },
  input: {
    width: '100%',
    padding: '12px',
    border: '2px solid #ddd',
    borderRadius: '5px',
    fontSize: '14px',
    transition: 'border-color 0.3s',
    boxSizing: 'border-box'
  },
  inputError: {
    borderColor: '#dc3545'
  },
  hint: {
    display: 'block',
    marginTop: '5px',
    color: '#666',
    fontSize: '12px'
  },
  error: {
    display: 'block',
    color: '#dc3545',
    fontSize: '12px',
    marginTop: '5px'
  },
  separator: {
    margin: '25px 0',
    paddingTop: '15px',
    borderTop: '1px solid #eee'
  },
  sectionTitle: {
    margin: '0 0 15px 0',
    color: '#2B4C8C',
    fontSize: '16px'
  },
  passwordContainer: {
    position: 'relative'
  },
  passwordToggle: {
    position: 'absolute',
    right: '10px',
    top: '50%',
    transform: 'translateY(-50%)',
    background: 'none',
    border: 'none',
    cursor: 'pointer',
    fontSize: '16px',
    color: '#666'
  },
  footer: {
    display: 'flex',
    justifyContent: 'flex-end',
    gap: '10px',
    padding: '20px',
    borderTop: '1px solid #eee',
    marginTop: '20px'
  },
  cancelBtn: {
    padding: '10px 20px',
    backgroundColor: '#6c757d',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px'
  },
  saveBtn: {
    padding: '10px 20px',
    backgroundColor: '#2B4C8C',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: '500'
  }
};

// ====================================
// CONFIGURA√á√ÉO DE TEMA PRIMEM v7.1
// ====================================
const PRIMEM_THEME = {
  colors: {
    primary: '#2B4C8C',
    secondary: '#C97A4A', 
    accent: '#8B9DC3',
    success: '#28a745',
    danger: '#dc3545',
    warning: '#ffc107',
    light: '#f8f9fa',
    dark: '#343a40',
    white: '#ffffff',
    background: '#f0f2f5',
    text: '#333333',
    border: '#dee2e6'
  }
};

// ====================================
// COMPONENTE PRINCIPAL v7.1 COM CORRE√á√ïES
// ====================================
export default function PrimemWhatsApp() {
  // Estados - Autentica√ß√£o
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [email, setEmail] = useState('teste@teste.com');
  const [password, setPassword] = useState('123');
  const [currentUser, setCurrentUser] = useState(null);
  
  // ESTADOS PARA CONFIGURA√á√ÉO DE USU√ÅRIO
  const [showUserProfileModal, setShowUserProfileModal] = useState(false);
  const [userSettings, setUserSettings] = useState({
    displayName: '',
    theme: 'light',
    notifications: true
  });
  
  // ESTADOS PARA CONFIGURA√á√ïES AVAN√áADAS
  const [showAdvancedSettingsModal, setShowAdvancedSettingsModal] = useState(false);
  const [advancedSettings, setAdvancedSettings] = useState({
    primaryColor: '#2B4C8C',
    secondaryColor: '#C97A4A',
    accentColor: '#8B9DC3',
    backgroundColor: '#f0f2f5',
    companyName: 'PRIMEM COMEX',
    systemName: 'WHATSAPP BUSINESS',
    loginButtonText: 'ENTRAR NO SISTEMA',
    sendButtonText: 'Enviar',
    attachButtonText: 'Anexar',
    connectButtonText: 'Conectar WhatsApp',
    showTimestamps: true,
    showDeliveryStatus: true,
    enableSounds: true,
    maxFileSize: 16,
    autoDownloadMedia: true,
    compactMode: false
  });
  
  // Estados - WhatsApp
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [qrCode, setQrCode] = useState('');
  const [whatsappInfo, setWhatsappInfo] = useState(null);
  
  // Estados - Interface
  const [activeTab, setActiveTab] = useState('chats');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedChat, setSelectedChat] = useState(null);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  
  // ESTADOS PARA SUB-TABS DAS CONFIGURA√á√ïES
  const [activeSettingsTab, setActiveSettingsTab] = useState('system');
  
  // Estados - Modal
  const [showEditNameModal, setShowEditNameModal] = useState(false);
  
  // Estados - Grava√ß√£o de √Åudio
  const [showAudioRecorder, setShowAudioRecorder] = useState(false);
  
  // ‚úÖ CORRE√á√ÉO v7.1: ESTADO PARA ASSINATURA MOVIDO PARA √ÅREA DO CHAT
  const [signatureEnabled, setSignatureEnabled] = useState(true);
  
  // Estados - Chat
  const [conversations, setConversations] = useState([]);
  const [messages, setMessages] = useState({});
  const [newMessage, setNewMessage] = useState('');
  const [selectedFile, setSelectedFile] = useState(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [isUploading, setIsUploading] = useState(false);
  const [replyTo, setReplyTo] = useState(null);
  
  // Refer√™ncias
  const socketRef = useRef(null);
  const messagesEndRef = useRef(null);
  const fileInputRef = useRef(null);
  const messageInputRef = useRef(null);
  
  const API_URL = 'http://localhost:3001';

  // CARREGAR CONFIGURA√á√ïES DO USU√ÅRIO E AVAN√áADAS
  useEffect(() => {
    const savedSettings = localStorage.getItem('primem_user_settings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        setUserSettings(parsed);
      } catch (error) {
        console.warn('Erro ao carregar configura√ß√µes:', error);
      }
    }
    
    const savedAdvancedSettings = localStorage.getItem('primem_advanced_settings');
    if (savedAdvancedSettings) {
      try {
        const parsed = JSON.parse(savedAdvancedSettings);
        setAdvancedSettings(prev => ({ ...prev, ...parsed }));
      } catch (error) {
        console.warn('Erro ao carregar configura√ß√µes avan√ßadas:', error);
      }
    }
    
    const savedSignature = localStorage.getItem('primem_signature_enabled');
    if (savedSignature !== null) {
      setSignatureEnabled(JSON.parse(savedSignature));
    }
  }, []);

  // SALVAR CONFIGURA√á√ïES DO USU√ÅRIO
  const saveUserSettings = (newSettings) => {
    try {
      const updatedSettings = { ...userSettings, ...newSettings };
      setUserSettings(updatedSettings);
      localStorage.setItem('primem_user_settings', JSON.stringify(updatedSettings));
      
      if (currentUser) {
        const updatedUser = { ...currentUser, ...newSettings };
        setCurrentUser(updatedUser);
        localStorage.setItem('primem_current_user', JSON.stringify(updatedUser));
      }
      
      alert('Perfil salvo com sucesso!');
    } catch (error) {
      console.error('Erro ao salvar configura√ß√µes:', error);
      alert('Erro ao salvar configura√ß√µes');
    }
  };

  // SALVAR CONFIGURA√á√ïES AVAN√áADAS
  const saveAdvancedSettings = (newSettings) => {
    try {
      const updatedSettings = { ...advancedSettings, ...newSettings };
      setAdvancedSettings(updatedSettings);
      localStorage.setItem('primem_advanced_settings', JSON.stringify(updatedSettings));
      alert('Configura√ß√µes avan√ßadas salvas com sucesso!');
    } catch (error) {
      console.error('Erro ao salvar configura√ß√µes avan√ßadas:', error);
      alert('Erro ao salvar configura√ß√µes avan√ßadas');
    }
  };

  // ‚úÖ CORRE√á√ÉO v7.1: TOGGLE ASSINATURA
  const toggleSignature = () => {
    const newSignatureState = !signatureEnabled;
    setSignatureEnabled(newSignatureState);
    localStorage.setItem('primem_signature_enabled', JSON.stringify(newSignatureState));
  };

  // ====================================
  // SOCKET.IO - CONFIGURA√á√ÉO COMPLETA (Mantido)
  // ====================================
  useEffect(() => {
    if (isLoggedIn && !socketRef.current) {
      const socket = io(API_URL, {
        transports: ['websocket'],
        reconnection: true,
        reconnectionAttempts: 10,
        reconnectionDelay: 1000,
      });
      
      socketRef.current = socket;
      
      socket.on('connect', () => {
        console.log('Socket conectado:', socket.id);
        loadInitialData();
      });
      
      socket.on('disconnect', () => {
        console.log('Socket desconectado');
        setIsConnected(false);
      });
      
      socket.on('whatsapp:qr', (data) => {
        console.log('QR Code recebido');
        setQrCode(data.qrCode);
        setIsConnecting(true);
      });
      
      socket.on('whatsapp:ready', (data) => {
        console.log('WhatsApp conectado:', data);
        setIsConnected(true);
        setIsConnecting(false);
        setQrCode('');
        setWhatsappInfo(data.info);
        loadChats();
      });
      
      socket.on('whatsapp:authenticated', () => {
        console.log('WhatsApp autenticado');
        setIsConnected(true);
        setIsConnecting(false);
        setQrCode('');
      });
      
      socket.on('whatsapp:disconnected', () => {
        console.log('WhatsApp desconectado');
        setIsConnected(false);
        setWhatsappInfo(null);
      });
      
      socket.on('whatsapp:message_received', handleIncomingMessage);
      socket.on('whatsapp:message_sent', handleSentMessage);
      
      socket.on('whatsapp:chats', (data) => {
        console.log('Chats recebidos:', data);
        setConversations(data.chats || []);
      });
      
      socket.on('whatsapp:messages', (data) => {
        console.log('Hist√≥rico recebido:', data);
        if (data.chatId && data.messages) {
          setMessages(prev => ({
            ...prev,
            [data.chatId]: data.messages
          }));
        }
      });
      
      return () => {
        console.log('Desconectando Socket.IO...');
        socket.disconnect();
        socketRef.current = null;
      };
    }
  }, [isLoggedIn]);

  // Auto scroll
  useEffect(() => {
    scrollToBottom();
  }, [messages, selectedChat]);

  // Auto resize do textarea
  const adjustTextareaHeight = useCallback(() => {
    if (messageInputRef.current) {
      const textarea = messageInputRef.current;
      textarea.style.height = 'auto';
      const scrollHeight = textarea.scrollHeight;
      const maxHeight = 200;
      textarea.style.height = Math.min(scrollHeight, maxHeight) + 'px';
    }
  }, []);

  useEffect(() => {
    adjustTextareaHeight();
  }, [newMessage, adjustTextareaHeight]);

  // ====================================
  // FUN√á√ïES - AUTENTICA√á√ÉO (Mantidas)
  // ====================================
  const handleLogin = async () => {
    try {
      const response = await fetch(`${API_URL}/api/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password })
      });
      
      const data = await response.json();
      
      if (data.success) {
        console.log('Login bem-sucedido:', data.user);
        
        const savedUser = localStorage.getItem('primem_current_user');
        let userData = data.user;
        
        if (savedUser) {
          try {
            const parsed = JSON.parse(savedUser);
            userData = { ...data.user, ...parsed };
          } catch (error) {
            console.warn('Erro ao carregar dados salvos do usu√°rio');
          }
        }
        
        if (!userData.displayName) {
          userData.displayName = userData.name;
        }
        
        setCurrentUser(userData);
        setUserSettings(prev => ({
          ...prev,
          displayName: userData.displayName || userData.name
        }));
        
        setIsLoggedIn(true);
        localStorage.setItem('primem_current_user', JSON.stringify(userData));
        
      } else {
        alert('Erro: ' + data.message);
      }
    } catch (error) {
      console.error('Erro no login:', error);
      alert('Erro ao fazer login. Verifique se o servidor est√° rodando.');
    }
  };
  
  const handleLogout = () => {
    if (socketRef.current) {
      socketRef.current.disconnect();
    }
    setIsLoggedIn(false);
    setCurrentUser(null);
    setIsConnected(false);
    setConversations([]);
    setMessages({});
    console.log('Logout realizado');
  };

  // ====================================
  // FUN√á√ïES - WHATSAPP (Mantidas)
  // ====================================
  const connectWhatsApp = async () => {
    try {
      setIsConnecting(true);
      const response = await fetch(`${API_URL}/api/whatsapp/connect`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      const data = await response.json();
      console.log('Conectando WhatsApp:', data);
    } catch (error) {
      console.error('Erro ao conectar:', error);
      setIsConnecting(false);
      alert('Erro ao conectar WhatsApp');
    }
  };
  
  const disconnectWhatsApp = async () => {
    try {
      const response = await fetch(`${API_URL}/api/whatsapp/disconnect`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      const data = await response.json();
      console.log('WhatsApp desconectado:', data);
    } catch (error) {
      console.error('Erro ao desconectar:', error);
    }
  };

  // ====================================
  // FUN√á√ïES - DADOS (Mantidas)
  // ====================================
  const loadInitialData = () => {
    if (socketRef.current) {
      socketRef.current.emit('request:status');
    }
  };
  
  const loadChats = async () => {
    try {
      const response = await fetch(`${API_URL}/api/whatsapp/chats`);
      const data = await response.json();
      
      if (data.success) {
        setConversations(data.chats || []);
      }
    } catch (error) {
      console.error('Erro ao carregar chats:', error);
    }
  };
  
  const loadMessages = async (chatId) => {
    try {
      const response = await fetch(`${API_URL}/api/whatsapp/messages/${chatId}`);
      const data = await response.json();
      
      if (data.success) {
        const serverMessages = data.messages || [];
        
        setMessages(prev => {
          const existingMessages = prev[chatId] || [];
          
          const existingMap = new Map();
          existingMessages.forEach(msg => {
            existingMap.set(msg.id, msg);
          });
          
          serverMessages.forEach(msg => {
            if (!existingMap.has(msg.id)) {
              existingMap.set(msg.id, {
                ...msg,
                timestamp: new Date(msg.timestamp),
                type: msg.fromMe ? 'sent' : 'received'
              });
            }
          });
          
          const mergedMessages = Array.from(existingMap.values())
            .sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
          
          return {
            ...prev,
            [chatId]: mergedMessages
          };
        });
      }
    } catch (error) {
      console.error('Erro ao carregar mensagens:', error);
    }
  };

  // ====================================
  // ‚úÖ CORRE√á√ÉO v7.1: FUN√á√ïES DE MENSAGENS COM FOTOS MELHORADAS
  // ====================================
  const handleIncomingMessage = (messageData) => {
    console.log('Mensagem recebida completa:', messageData);
    
    if (messageData.hasMedia && messageData.media) {
      const { url } = messageData.media;
      
      const invalidUrls = ['uploading...', 'uploading', 'processing', 'undefined', 'null', '', null, undefined];
      const containsInvalidKeywords = url && (
        url.includes('uploading') || 
        url.includes('processing') || 
        url.includes('undefined') || 
        url.includes('null') ||
        url.includes('temp') ||
        url.includes('blob:') ||
        url.length < 5
      );
      
      if (!url || invalidUrls.includes(url) || containsInvalidKeywords) {
        console.log('MENSAGEM COM M√çDIA INV√ÅLIDA REJEITADA:', url);
        return;
      }
    }
    
    const chatId = messageData.from;
    
    // ‚úÖ CORRE√á√ÉO v7.1: MELHOR TRATAMENTO DE FOTOS DOS CONTATOS
    const contactPhoto = messageData.contact?.profilePicUrl || 
                        messageData.contact?.avatar || 
                        messageData.profilePicUrl || 
                        messageData.avatar ||
                        messageData.contact?.profilePic ||
                        null;
    
    console.log('Foto do contato detectada:', contactPhoto);
    
    setConversations(prev => {
      const exists = prev.find(c => c.id === chatId);
      if (!exists) {
        return [{
          id: chatId,
          name: messageData.contact?.name || messageData.notifyName || chatId,
          lastMessage: messageData.body || '[M√≠dia]',
          timestamp: messageData.timestamp,
          unread: 1,
          avatar: contactPhoto
        }, ...prev];
      }
      
      return prev.map(conv => 
        conv.id === chatId
          ? { 
              ...conv, 
              lastMessage: messageData.body || '[M√≠dia]',
              timestamp: messageData.timestamp,
              unread: (conv.unread || 0) + 1,
              avatar: contactPhoto || conv.avatar,
              name: messageData.contact?.name || messageData.notifyName || conv.name
            }
          : conv
      );
    });
    
    setMessages(prev => {
      const existingMessages = prev[chatId] || [];
      
      const messageExists = existingMessages.some(msg => msg.id === messageData.id);
      if (messageExists) {
        console.log('Mensagem duplicada ignorada:', messageData.id);
        return prev;
      }
      
      const newMessage = {
        ...messageData,
        timestamp: new Date(messageData.timestamp),
        type: 'received'
      };
      
      return {
        ...prev,
        [chatId]: [...existingMessages, newMessage]
      };
    });
    
    playNotificationSound();
  };
  
  const handleSentMessage = (data) => {
    console.log('Mensagem enviada confirmada:', data);
    
    if (data.hasMedia && data.media) {
      const { url } = data.media;
      
      const invalidUrls = ['uploading...', 'uploading', 'processing', 'undefined', 'null', '', null, undefined];
      const containsInvalidKeywords = url && (
        url.includes('uploading') || 
        url.includes('processing') || 
        url.includes('undefined') || 
        url.includes('null') ||
        url.includes('temp') ||
        url.includes('blob:') ||
        url.length < 5
      );
      
      if (!url || invalidUrls.includes(url) || containsInvalidKeywords) {
        console.log('CONFIRMA√á√ÉO COM M√çDIA INV√ÅLIDA REJEITADA:', url);
        return;
      }
    }
    
    const chatId = data.to;
    
    setConversations(prev => 
      prev.map(conv => 
        conv.id === chatId
          ? { 
              ...conv, 
              lastMessage: data.body || '[M√≠dia]',
              timestamp: data.timestamp
            }
          : conv
      )
    );
    
    setMessages(prev => {
      const existingMessages = prev[chatId] || [];
      
      const messageExists = existingMessages.some(msg => msg.id === data.id);
      if (messageExists) {
        console.log('Mensagem enviada duplicada ignorada:', data.id);
        return prev;
      }
      
      const senderName = signatureEnabled ? (userSettings.displayName || currentUser?.displayName || currentUser?.name || 'Voc√™') : '';
      
      const newMessage = {
        id: data.id || Date.now(),
        body: data.body,
        fromMe: true,
        timestamp: new Date(data.timestamp || Date.now()),
        status: 'sent',
        media: data.media,
        hasMedia: data.hasMedia,
        type: 'sent',
        senderName: senderName
      };
      
      return {
        ...prev,
        [chatId]: [...existingMessages, newMessage]
      };
    });
  };
  
  // ====================================
  // ‚úÖ CORRE√á√ÉO v7.1: FUN√á√ÉO sendMessage COM RESPOSTA MELHORADA
  // ====================================
  const sendMessage = async () => {
    if (!newMessage.trim() && !selectedFile) return;
    if (!selectedChat) return;
    
    const senderName = signatureEnabled ? (userSettings.displayName || currentUser?.displayName || currentUser?.name || 'Voc√™') : '';
    
    // ‚úÖ CORRE√á√ÉO v7.1: FUN√á√ÉO DE RESPONDER MELHORADA - INCLUI TEXTO ORIGINAL
    let messageForWhatsApp = newMessage.trim();
    
    if (replyTo && replyTo.body) {
      const originalText = replyTo.body.length > 50 ? 
        replyTo.body.substring(0, 50) + '...' : 
        replyTo.body;
      messageForWhatsApp = `üìù Respondendo: "${originalText}"\n\n${messageForWhatsApp}`;
    }
    
    if (messageForWhatsApp && signatureEnabled && senderName) {
      messageForWhatsApp = `*${senderName}:*\n${messageForWhatsApp}`;
    }
    
    const tempMessageId = 'temp_' + Date.now();
    const now = new Date();
    
    if (!selectedFile) {
      const localMessage = {
        id: tempMessageId,
        body: newMessage,
        fromMe: true,
        timestamp: now,
        status: 'sending',
        type: 'sent',
        senderName: senderName,
        replyTo: replyTo // Adicionar refer√™ncia √† mensagem respondida
      };
      
      setMessages(prev => ({
        ...prev,
        [selectedChat.id]: [...(prev[selectedChat.id] || []), localMessage]
      }));
    }
    
    const messageToSend = messageForWhatsApp;
    const fileToSend = selectedFile;
    setNewMessage('');
    setSelectedFile(null);
    // ‚úÖ CORRE√á√ÉO v7.1: LIMPAR RESPOSTA AP√ìS ENVIAR
    setReplyTo(null);
    
    if (messageInputRef.current) {
      messageInputRef.current.style.height = 'auto';
    }
    
    try {
      if (fileToSend) {
        let phoneNumber = selectedChat.id;
        
        if (phoneNumber.includes('@')) {
          phoneNumber = phoneNumber.split('@')[0];
        }
        
        const formData = new FormData();
        formData.append('file', fileToSend);
        formData.append('number', phoneNumber);
        formData.append('to', phoneNumber);
        formData.append('chatId', selectedChat.id);
        formData.append('caption', messageToSend);
        
        setIsUploading(true);
        
        const response = await fetch(`${API_URL}/api/whatsapp/send-media`, {
          method: 'POST',
          body: formData
        });
        
        const data = await response.json();
        
        if (data.success && data.file && data.file.url && !data.file.url.includes('uploading')) {
          const serverMessage = {
            id: data.messageId || `sent_${Date.now()}`,
            body: newMessage,
            fromMe: true,
            timestamp: new Date(),
            status: 'sent',
            media: {
              filename: data.file.filename,
              mimetype: data.file.mimetype,
              size: data.file.size,
              url: data.file.url
            },
            hasMedia: true,
            type: 'sent',
            senderName: senderName
          };
          
          setMessages(prev => ({
            ...prev,
            [selectedChat.id]: [...(prev[selectedChat.id] || []), serverMessage]
          }));
          
          setConversations(prev => 
            prev.map(conv => 
              conv.id === selectedChat.id
                ? { 
                    ...conv, 
                    lastMessage: newMessage || 'Arquivo',
                    timestamp: new Date()
                  }
                : conv
            )
          );
        } else {
          console.error('Dados inv√°lidos do servidor:', data);
          alert('Erro: Arquivo n√£o foi processado corretamente');
        }
        
        setUploadProgress(0);
        setIsUploading(false);
      } else {
        const response = await fetch(`${API_URL}/api/whatsapp/send`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            to: selectedChat.id,
            message: messageToSend
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          setMessages(prev => ({
            ...prev,
            [selectedChat.id]: prev[selectedChat.id].map(msg => 
              msg.id === tempMessageId 
                ? { ...msg, id: data.messageId, status: 'sent' }
                : msg
            )
          }));
        }
      }
    } catch (error) {
      console.error('Erro ao enviar:', error);
      
      if (!selectedFile) {
        setMessages(prev => ({
          ...prev,
          [selectedChat.id]: prev[selectedChat.id].map(msg => 
            msg.id === tempMessageId 
              ? { ...msg, status: 'error' }
              : msg
          )
        }));
      }
      
      alert('Erro ao enviar mensagem');
      setIsUploading(false);
    }
  };

  // HANDLER para teclas especiais no textarea
  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      if (e.shiftKey) {
        return;
      } else {
        e.preventDefault();
        sendMessage();
      }
    }
  };

  // ====================================
  // ‚úÖ CORRE√á√ÉO v7.1: FUN√á√ÉO PARA APAGAR MENSAGEM CORRIGIDA (SEM API 404)
  // ====================================
  const deleteMessageForEveryone = async (messageId) => {
    if (!selectedChat || !messageId) return;
    
    const confirmDelete = window.confirm('Tem certeza que deseja apagar esta mensagem para todos?');
    if (!confirmDelete) return;
    
    try {
      // ‚úÖ CORRE√á√ÉO v7.1: APENAS MARCA√á√ÉO LOCAL, SEM CHAMADA PARA API INEXISTENTE
      setMessages(prev => ({
        ...prev,
        [selectedChat.id]: prev[selectedChat.id].map(msg => 
          msg.id === messageId 
            ? { 
                ...msg, 
                isDeleted: true, 
                originalBody: msg.body, // Preservar texto original
                body: 'üö´ Esta mensagem foi apagada', 
                deletedAt: new Date() 
              }
            : msg
        )
      }));
      
      console.log('Mensagem marcada como apagada localmente:', messageId);
      
      // Nota: Em produ√ß√£o, aqui voc√™ poderia tentar chamar uma API real de delete
      // mas por enquanto mantemos apenas a marca√ß√£o local
      
    } catch (error) {
      console.error('Erro ao apagar mensagem:', error);
      alert('Erro ao apagar mensagem');
    }
  };

  // ====================================
  // FUN√á√ïES - A√á√ïES DO CHAT REORGANIZADAS (Mantidas)
  // ====================================
  const handleEditName = (newName) => {
    if (!selectedChat || !newName.trim()) return;
    
    setSelectedChat(prev => ({
      ...prev,
      name: newName.trim(),
      customName: newName.trim()
    }));
    
    setConversations(prev => 
      prev.map(conv => 
        conv.id === selectedChat.id 
          ? { ...conv, name: newName.trim(), customName: newName.trim() }
          : conv
      )
    );
    
    setShowEditNameModal(false);
  };

  const handleBlockContact = () => {
    if (!selectedChat) return;
    
    const confirmBlock = window.confirm(`Tem certeza que deseja bloquear ${selectedChat.name}?`);
    
    if (confirmBlock) {
      alert(`${selectedChat.name} foi bloqueado! (Funcionalidade em desenvolvimento)`);
    }
  };

  // ====================================
  // FUN√á√ïES - GRAVA√á√ÉO DE √ÅUDIO (Mantidas)
  // ====================================
  const handleStartRecording = () => {
    setShowAudioRecorder(true);
  };
  
  const handleRecordingComplete = async (audioFile) => {
    if (!audioFile || !selectedChat || audioFile.size === 0) {
      alert('Erro: Dados de √°udio inv√°lidos');
      return;
    }
    
    setShowAudioRecorder(false);
    
    try {
      let phoneNumber = selectedChat.id;
      
      if (phoneNumber && phoneNumber.includes('@')) {
        phoneNumber = phoneNumber.split('@')[0];
      }
      
      if (!phoneNumber || phoneNumber === 'undefined' || phoneNumber === 'null') {
        alert('Erro: N√∫mero do chat inv√°lido');
        return;
      }
      
      const formData = new FormData();
      formData.append('file', audioFile);
      formData.append('number', phoneNumber);
      formData.append('to', phoneNumber);
      formData.append('chatId', selectedChat.id);
      formData.append('caption', '');
      
      setIsUploading(true);
      
      const response = await fetch(`${API_URL}/api/whatsapp/send-media`, {
        method: 'POST',
        body: formData
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erro ${response.status}: ${errorText}`);
      }
      
      const data = await response.json();
      
      if (!data.success || !data.file || !data.file.url) {
        throw new Error(data.message || 'Servidor n√£o retornou informa√ß√µes do arquivo');
      }
      
      const invalidTerms = ['uploading', 'processing', 'undefined', 'null'];
      const hasInvalidTerm = invalidTerms.some(term => 
        data.file.url.includes(term)
      );
      
      if (hasInvalidTerm) {
        throw new Error('Servidor retornou URL inv√°lida para o √°udio');
      }
      
      const senderName = signatureEnabled ? (userSettings.displayName || currentUser?.displayName || currentUser?.name || 'Voc√™') : '';
      
      const audioMessage = {
        id: data.messageId || `audio_${Date.now()}`,
        body: '',
        fromMe: true,
        timestamp: new Date(),
        status: 'sent',
        media: {
          filename: data.file.filename || audioFile.name,
          mimetype: data.file.mimetype || audioFile.type,
          size: data.file.size || audioFile.size,
          url: data.file.url
        },
        hasMedia: true,
        type: 'sent',
        senderName: senderName
      };
      
      setMessages(prev => ({
        ...prev,
        [selectedChat.id]: [...(prev[selectedChat.id] || []), audioMessage]
      }));
      
      setConversations(prev => 
        prev.map(conv => 
          conv.id === selectedChat.id
            ? { ...conv, lastMessage: '√Åudio', timestamp: new Date() }
            : conv
        )
      );
      
      setIsUploading(false);
      
    } catch (error) {
      console.error('ERRO COMPLETO ao enviar √°udio:', error);
      setIsUploading(false);
      alert(`Erro ao enviar √°udio: ${error.message}`);
    }
  };
  
  const handleCancelRecording = () => {
    setShowAudioRecorder(false);
  };

  // ====================================
  // FUN√á√ïES - UTILIDADES (Mantidas)
  // ====================================
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };
  
  const playNotificationSound = () => {
    if (advancedSettings.enableSounds) {
      const audio = new Audio('data:audio/wav;base64,UklGRlYFAABXQVZFZm10IBAAAAABAAEAIlYAAESsAAACABAAZGF0YTIAAAA=');
      audio.play().catch(() => {});
    }
  };
  
  const formatTime = (timestamp) => {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    return date.toLocaleTimeString('pt-BR', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };
  
  const formatDate = (timestamp) => {
    if (!timestamp) return '';
    const date = new Date(timestamp);
    const today = new Date();
    
    if (date.toDateString() === today.toDateString()) {
      return 'Hoje';
    }
    
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    if (date.toDateString() === yesterday.toDateString()) {
      return 'Ontem';
    }
    
    return date.toLocaleDateString('pt-BR');
  };
  
  const handleFileSelect = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > advancedSettings.maxFileSize * 1024 * 1024) {
        alert(`Arquivo muito grande! M√°ximo: ${advancedSettings.maxFileSize}MB`);
        return;
      }
      setSelectedFile(file);
    }
  };
  
  const selectChat = (chat) => {
    setSelectedChat(chat);
    loadMessages(chat.id);
    
    setConversations(prev =>
      prev.map(c => c.id === chat.id ? { ...c, unread: 0 } : c)
    );
  };
  
  // ‚úÖ CORRE√á√ÉO v7.1: BOT√ÉO "REMOVER DO HIST√ìRICO LOCAL" REMOVIDO - FUN√á√ÉO SIMPLIFICADA
  const deleteMessage = (messageId) => {
    if (!selectedChat) return;
    
    const confirmDelete = window.confirm('Remover esta mensagem do hist√≥rico local?');
    if (!confirmDelete) return;
    
    setMessages(prev => ({
      ...prev,
      [selectedChat.id]: prev[selectedChat.id].filter(m => m.id !== messageId)
    }));
  };
  
  const toggleFavorite = (chatId) => {
    setConversations(prev =>
      prev.map(c => c.id === chatId ? { ...c, favorite: !c.favorite } : c)
    );
  };

  // ====================================
  // RENDERIZA√á√ÉO DE M√çDIA ULTRA PROTEGIDA (Mantida com melhorias visuais)
  // ====================================
  const renderMessageContent = (msg) => {
    // ‚úÖ CORRE√á√ÉO v7.1: VISUAL MELHORADO PARA MENSAGENS APAGADAS
    if (msg.isDeleted) {
      return (
        <div style={{
          ...styles.messageText,
          fontStyle: 'italic',
          color: '#666',
          backgroundColor: 'rgba(220, 53, 69, 0.1)',
          padding: '8px',
          borderRadius: '5px',
          border: '1px dashed #dc3545'
        }}>
          {msg.body}
          {msg.deletedAt && (
            <div style={{ fontSize: '11px', color: '#999', marginTop: '4px' }}>
              Apagada em {formatTime(msg.deletedAt)}
            </div>
          )}
        </div>
      );
    }

    if (msg.media) {
      const { mimetype, url, filename } = msg.media;
      
      const invalidUrls = ['uploading...', 'uploading', 'processing', 'undefined', 'null', '', null, undefined];
      const containsInvalidKeywords = url && (
        url.includes('uploading') || 
        url.includes('processing') || 
        url.includes('undefined') || 
        url.includes('null') ||
        url.includes('temp') ||
        url.includes('blob:') ||
        url.length < 5
      );

      if (!url || invalidUrls.includes(url) || containsInvalidKeywords) {
        const mediaType = mimetype?.startsWith('audio/') ? '√°udio' : 
                         mimetype?.startsWith('image/') ? 'imagem' : 
                         mimetype?.startsWith('video/') ? 'v√≠deo' : 'arquivo';
        
        return (
          <div style={{
            padding: '12px',
            backgroundColor: 'rgba(255, 193, 7, 0.1)',
            borderRadius: '8px',
            border: '1px dashed #ffc107',
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            minWidth: '200px'
          }}>
            <div style={{
              width: '30px',
              height: '30px',
              borderRadius: '50%',
              backgroundColor: '#ffc107',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '14px'
            }}>
              ‚è≥
            </div>
            <div>
              <div style={{ fontSize: '14px', color: '#856404', fontWeight: '500' }}>
                Processando {mediaType}...
              </div>
              <div style={{ fontSize: '12px', color: '#856404', opacity: 0.8 }}>
                Aguarde o upload completar
              </div>
            </div>
          </div>
        );
      }
      
      let fullUrl = url;
      if (!url.startsWith('http')) {
        fullUrl = url.startsWith('/') 
          ? `http://localhost:3001${url}` 
          : `http://localhost:3001/${url}`;
      }
      
      // IMAGENS
      if (mimetype?.startsWith('image/')) {
        return (
          <div style={styles.mediaContainer}>
            <img
              src={fullUrl}
              alt="üì∑ Imagem"
              style={{
                maxWidth: '100%',
                maxHeight: '300px',
                borderRadius: '8px',
                cursor: 'pointer',
                display: 'block',
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
              }}
              onClick={() => window.open(fullUrl, '_blank')}
              onError={(e) => {
                console.error('Erro ao carregar imagem:', fullUrl);
              }}
              onLoad={() => {
                console.log('Imagem carregada:', fullUrl);
              }}
            />
            {msg.body && <div style={styles.caption}>{msg.body}</div>}
          </div>
        );
      }
      
      // V√çDEOS
      if (mimetype?.startsWith('video/')) {
        return (
          <div style={styles.mediaContainer}>
            <video
              controls
              style={{
                maxWidth: '100%',
                maxHeight: '300px',
                borderRadius: '8px',
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
              }}
              onError={() => {
                console.error('Erro ao carregar v√≠deo:', fullUrl);
              }}
            >
              <source src={fullUrl} type={mimetype} />
              Seu navegador n√£o suporta v√≠deos
            </video>
            {msg.body && <div style={styles.caption}>{msg.body}</div>}
          </div>
        );
      }
      
      // √ÅUDIOS
      if (mimetype?.startsWith('audio/') ||
          mimetype?.includes('ogg') ||
          mimetype?.includes('webm') ||
          filename?.endsWith('.ogg') ||
          filename?.endsWith('.opus') ||
          filename?.endsWith('.mp3') ||
          filename?.endsWith('.wav') ||
          filename?.endsWith('.webm')) {
        
        return (
          <div style={styles.mediaContainer}>
            <AudioPlayer url={url} filename={filename} />
            {msg.body && <div style={styles.caption}>{msg.body}</div>}
          </div>
        );
      }
      
      // DOCUMENTOS
      return (
        <div style={styles.documentContainer}>
          <div style={styles.documentIcon}>
            {mimetype?.includes('pdf') ? 'üìÑ' :
             mimetype?.includes('word') ? 'üìù' :
             mimetype?.includes('excel') ? 'üìä' : 'üìÅ'}
          </div>
          <div style={styles.documentInfo}>
            <div style={styles.documentName}>{filename || 'Documento'}</div>
            <div style={styles.documentActions}>
              {mimetype?.includes('pdf') && (
                <a
                  href={fullUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  style={styles.viewButton}
                >
                  üëÅÔ∏è Visualizar
                </a>
              )}
              <a
                href={fullUrl}
                download={filename}
                style={styles.downloadButton}
              >
                üíæ Baixar
              </a>
            </div>
          </div>
        </div>
      );
    }
    
    return <div style={styles.messageText}>{msg.body}</div>;
  };
  
  const renderMessageStatus = (status) => {
    if (!advancedSettings.showDeliveryStatus) return null;
    
    switch(status) {
      case 'sending': return '‚è≥';
      case 'sent': return '‚úÖ';
      case 'delivered': return '‚úÖ‚úÖ';
      case 'read': return <span style={{color: '#4FC3F7'}}>üëÅÔ∏è</span>;
      case 'error': return <span style={{color: '#dc3545'}}>‚ùå</span>;
      default: return '‚è≥';
    }
  };

  // ====================================
  // FILTROS (Mantidos)
  // ====================================
  const filteredConversations = conversations
    .filter(conv => 
      conv.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      conv.lastMessage?.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .sort((a, b) => {
      if (a.favorite && !b.favorite) return -1;
      if (!a.favorite && b.favorite) return 1;
      return (b.timestamp || 0) - (a.timestamp || 0);
    });

  // ====================================
  // APLICAR TEMA PERSONALIZADO
  // ====================================
  const currentTheme = {
    ...PRIMEM_THEME,
    colors: {
      ...PRIMEM_THEME.colors,
      primary: advancedSettings.primaryColor,
      secondary: advancedSettings.secondaryColor,
      accent: advancedSettings.accentColor,
      background: advancedSettings.backgroundColor
    }
  };

  // ====================================
  // RENDERIZA√á√ÉO - LOGIN COM TEMA PERSONALIZADO
  // ====================================
  if (!isLoggedIn) {
    return (
      <div style={{
        ...styles.loginContainer,
        background: `linear-gradient(135deg, ${currentTheme.colors.primary} 0%, ${currentTheme.colors.secondary} 100%)`
      }}>
        <div style={styles.loginBox}>
          <div style={styles.logoContainer}>
            <div style={styles.logoWrapper}>
              {advancedSettings.logoUrl ? (
                <img 
                  src={advancedSettings.logoUrl} 
                  alt="Logo" 
                  style={{ maxHeight: '60px', maxWidth: '60px' }}
                  onError={(e) => {
                    e.target.style.display = 'none';
                  }}
                />
              ) : (
                <span style={styles.logoIcon}>üí¨</span>
              )}
              <div style={styles.logoText}>
                <span style={{...styles.logoP, color: currentTheme.colors.primary}}>{advancedSettings.companyName.charAt(0)}</span>
                <span style={{...styles.logoRimem, color: currentTheme.colors.secondary}}>{advancedSettings.companyName.substring(1)}</span>
              </div>
            </div>
            <h1 style={{...styles.title, color: currentTheme.colors.primary}}>{advancedSettings.systemName}</h1>
            <p style={{...styles.subtitle, color: currentTheme.colors.accent}}>
              Sistema v7.1 - CORRE√á√ïES APLICADAS: Bot√£o Assinatura no Chat + Delete Local + Responder Melhorado
            </p>
          </div>
          
          <div style={styles.formGroup}>
            <label style={styles.label}>üìß E-mail</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              style={{...styles.input, borderColor: currentTheme.colors.border}}
              placeholder="seu@email.com"
              onKeyPress={(e) => e.key === 'Enter' && handleLogin()}
            />
          </div>
          
          <div style={styles.formGroup}>
            <label style={styles.label}>üîí Senha</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              style={{...styles.input, borderColor: currentTheme.colors.border}}
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              onKeyPress={(e) => e.key === 'Enter' && handleLogin()}
            />
          </div>
          
          <button 
            onClick={handleLogin} 
            style={{
              ...styles.loginButton,
              backgroundColor: currentTheme.colors.primary
            }}
          >
            {advancedSettings.loginButtonText}
          </button>
          
          <div style={styles.loginFooter}>
            <small style={styles.footerText}>
              Use: teste@teste.com / 123
            </small>
            <small style={{...styles.footerBrand, color: currentTheme.colors.accent}}>
              ¬© 2025 {advancedSettings.companyName} - Sistema v7.1 com Corre√ß√µes Aplicadas
            </small>
          </div>
        </div>
      </div>
    );
  }

  // ====================================
  // RENDERIZA√á√ÉO - PRINCIPAL v7.1 COM CORRE√á√ïES APLICADAS
  // ====================================
  return (
    <div style={{...styles.container, backgroundColor: currentTheme.colors.background}}>
      {/* MODALS */}
      <EditNameModal
        isOpen={showEditNameModal}
        onClose={() => setShowEditNameModal(false)}
        currentName={selectedChat?.name || ''}
        onSave={handleEditName}
      />

      <UserProfileModal
        isOpen={showUserProfileModal}
        onClose={() => setShowUserProfileModal(false)}
        currentUser={currentUser}
        onSave={saveUserSettings}
      />

      <AdvancedSettingsModal
        isOpen={showAdvancedSettingsModal}
        onClose={() => setShowAdvancedSettingsModal(false)}
        currentSettings={advancedSettings}
        onSave={saveAdvancedSettings}
      />

      <EmojiPicker
        isOpen={showEmojiPicker}
        onEmojiSelect={(emoji) => {
          setNewMessage(prev => prev + emoji);
          setShowEmojiPicker(false);
        }}
        onClose={() => setShowEmojiPicker(false)}
      />

      {/* HEADER COM TEMA */}
      <div style={{...styles.header, backgroundColor: currentTheme.colors.primary}}>
        <div style={styles.headerLeft}>
          <div style={styles.headerLogo}>
            <span style={styles.headerLogoIcon}>üí¨</span>
            <div>
              <h1 style={styles.headerTitle}>{advancedSettings.companyName} {advancedSettings.systemName}</h1>
              <span style={styles.userInfo}>
                üë§ {userSettings.displayName || currentUser?.name} | {currentUser?.role} | v7.1 CORRE√á√ïES APLICADAS
              </span>
            </div>
          </div>
        </div>
        
        <div style={styles.headerRight}>
          {isConnected ? (
            <>
              <span style={styles.statusBadgeConnected}>
                ‚úÖ WhatsApp Conectado
                {whatsappInfo && <small> ({whatsappInfo.pushname || whatsappInfo.name})</small>}
              </span>
              <button onClick={disconnectWhatsApp} style={styles.disconnectBtn}>
                üîå Desconectar
              </button>
            </>
          ) : isConnecting ? (
            <span style={styles.statusBadgeConnecting}>üîÑ Conectando...</span>
          ) : (
            <span style={styles.statusBadgeDisconnected}>‚ùå Desconectado</span>
          )}
          
          <button 
            onClick={() => setDarkMode(!darkMode)} 
            style={styles.themeBtn}
            title={darkMode ? "Modo Claro" : "Modo Escuro"}
          >
            {darkMode ? '‚òÄÔ∏è' : 'üåô'}
          </button>
          
          <button onClick={handleLogout} style={{...styles.logoutBtn, backgroundColor: currentTheme.colors.secondary}}>
            üö™ Sair
          </button>
        </div>
      </div>

      {/* CONTE√öDO PRINCIPAL */}
      <div style={styles.mainContent}>
        {/* SIDEBAR */}
        <div style={styles.sidebar}>
          {/* TABS */}
          <div style={styles.tabs}>
            <button 
              style={{
                ...styles.tab,
                ...(activeTab === 'chats' ? {...styles.tabActive, color: currentTheme.colors.primary, borderBottomColor: currentTheme.colors.primary} : {})
              }}
              onClick={() => setActiveTab('chats')}
            >
              üí¨ Chats
            </button>
            <button 
              style={{
                ...styles.tab,
                ...(activeTab === 'connection' ? {...styles.tabActive, color: currentTheme.colors.primary, borderBottomColor: currentTheme.colors.primary} : {})
              }}
              onClick={() => setActiveTab('connection')}
            >
              üîå Conex√£o
            </button>
            <button 
              style={{
                ...styles.tab,
                ...(activeTab === 'settings' ? {...styles.tabActive, color: currentTheme.colors.primary, borderBottomColor: currentTheme.colors.primary} : {})
              }}
              onClick={() => setActiveTab('settings')}
            >
              ‚öôÔ∏è Config
            </button>
          </div>

          {/* CONTE√öDO DAS TABS */}
          {activeTab === 'chats' && (
            <>
              {/* BUSCA */}
              <div style={styles.searchBox}>
                <input
                  type="text"
                  placeholder="üîç Buscar conversas..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  style={{...styles.searchInput, borderColor: currentTheme.colors.border}}
                />
              </div>

              {/* LISTA DE CONVERSAS */}
              <div style={styles.conversationsList}>
                {filteredConversations.length > 0 ? (
                  filteredConversations.map(conv => (
                    <div
                      key={conv.id}
                      style={{
                        ...styles.conversationItem,
                        ...(selectedChat?.id === conv.id ? {...styles.conversationActive, backgroundColor: `${currentTheme.colors.primary}10`, borderLeftColor: currentTheme.colors.primary} : {})
                      }}
                      onClick={() => selectChat(conv)}
                    >
                      <div style={{...styles.conversationAvatar, backgroundColor: currentTheme.colors.primary}}>
                        {conv.avatar ? (
                          <img src={conv.avatar} alt="" style={styles.avatarImage} />
                        ) : (
                          <span>{conv.name?.charAt(0)?.toUpperCase() || '?'}</span>
                        )}
                      </div>
                      
                      <div style={styles.conversationInfo}>
                        <div style={styles.conversationHeader}>
                          <span style={styles.conversationName}>
                            {conv.favorite && '‚≠ê '}
                            {conv.name}
                          </span>
                          <span style={styles.conversationTime}>
                            {advancedSettings.showTimestamps && formatTime(conv.timestamp)}
                          </span>
                        </div>
                        <div style={styles.conversationPreview}>
                          {conv.lastMessage?.substring(0, 50)}
                          {conv.lastMessage?.length > 50 && '...'}
                        </div>
                      </div>
                      
                      {conv.unread > 0 && (
                        <div style={{...styles.unreadBadge, backgroundColor: currentTheme.colors.secondary}}>
                          {conv.unread}
                        </div>
                      )}
                    </div>
                  ))
                ) : (
                  <div style={styles.emptyState}>
                    <p>üì≠ Nenhuma conversa encontrada</p>
                    <small>Conecte o WhatsApp para ver suas conversas</small>
                  </div>
                )}
              </div>
            </>
          )}

          {activeTab === 'connection' && (
            <div style={styles.connectionTab}>
              {!isConnected ? (
                <>
                  {qrCode ? (
                    <div style={styles.qrContainer}>
                      <img src={qrCode} alt="QR Code" style={styles.qrCode} />
                      <p style={styles.qrText}>
                        üì± Escaneie o QR Code com seu WhatsApp
                      </p>
                    </div>
                  ) : (
                    <div style={styles.connectContainer}>
                      <button 
                        onClick={connectWhatsApp}
                        style={{...styles.connectButton, backgroundColor: currentTheme.colors.secondary}}
                        disabled={isConnecting}
                      >
                        {isConnecting ? 'üîÑ Conectando...' : advancedSettings.connectButtonText}
                      </button>
                      <p style={styles.connectInfo}>
                        Clique para gerar o QR Code
                      </p>
                    </div>
                  )}
                </>
              ) : (
                <div style={styles.connectedInfo}>
                  <div style={styles.successIcon}>‚úÖ</div>
                  <h3>WhatsApp Conectado!</h3>
                  {whatsappInfo && (
                    <div style={styles.whatsappDetails}>
                      <p><strong>üë§ Nome:</strong> {whatsappInfo.pushname || whatsappInfo.name}</p>
                      <p><strong>üì± N√∫mero:</strong> {whatsappInfo.wid?.user || whatsappInfo.number}</p>
                    </div>
                  )}
                  <button 
                    onClick={disconnectWhatsApp}
                    style={styles.disconnectButton}
                  >
                    üîå Desconectar
                  </button>
                </div>
              )}
            </div>
          )}

          {activeTab === 'settings' && (
            <div style={styles.settingsTab}>
              {/* SUB-TABS PARA CONFIGURA√á√ïES */}
              <div style={styles.settingsSubTabs}>
                <button 
                  style={{
                    ...styles.settingsSubTab,
                    ...(activeSettingsTab === 'system' ? {...styles.settingsSubTabActive, color: currentTheme.colors.primary, borderBottomColor: currentTheme.colors.primary} : {})
                  }}
                  onClick={() => setActiveSettingsTab('system')}
                >
                  üíª Sistema
                </button>
                <button 
                  style={{
                    ...styles.settingsSubTab,
                    ...(activeSettingsTab === 'profile' ? {...styles.settingsSubTabActive, color: currentTheme.colors.primary, borderBottomColor: currentTheme.colors.primary} : {})
                  }}
                  onClick={() => setActiveSettingsTab('profile')}
                >
                  üë§ Perfil
                </button>
                <button 
                  style={{
                    ...styles.settingsSubTab,
                    ...(activeSettingsTab === 'advanced' ? {...styles.settingsSubTabActive, color: currentTheme.colors.primary, borderBottomColor: currentTheme.colors.primary} : {})
                  }}
                  onClick={() => setActiveSettingsTab('advanced')}
                >
                  üé® Avan√ßado
                </button>
              </div>

              {/* CONTE√öDO DAS SUB-TABS */}
              {activeSettingsTab === 'system' && (
                <div style={styles.settingInfo}>
                  <h4 style={{color: currentTheme.colors.primary}}>üíª SISTEMA v7.1 COM CORRE√á√ïES APLICADAS!</h4>
                  <p><strong>Vers√£o:</strong> 7.1-CORRE√á√ïES-APLICADAS</p>
                  <p><strong>Status:</strong> {isConnected ? 'üü¢ Online' : 'üî¥ Offline'}</p>
                  <p><strong>üÜï CORRE√á√ïES v7.1:</strong></p>
                  <ul style={{color: '#28a745'}}>
                    <li>‚úÖ Bot√£o de assinatura MOVIDO para o chat (ao lado do campo)</li>
                    <li>‚úÖ Erro 404 do delete CORRIGIDO (apenas marca√ß√£o local)</li>
                    <li>‚úÖ Bot√£o "remover hist√≥rico local" REMOVIDO</li>
                    <li>‚úÖ Fundo amarelo da assinatura REMOVIDO (agora azul suave)</li>
                    <li>‚úÖ Fun√ß√£o responder CORRIGIDA (inclui texto original)</li>
                    <li>‚úÖ Fotos dos contatos MELHORADAS (m√∫ltiplas fontes + logs)</li>
                  </ul>
                  <p><strong>üìã FUNCIONALIDADES ATIVAS:</strong></p>
                  <ul>
                    <li>üîê Login e autentica√ß√£o completos</li>
                    <li>üì± Conex√£o WhatsApp via QR</li>
                    <li>üí¨ Envio/recebimento mensagens</li>
                    <li>üìé Upload de arquivos (at√© {advancedSettings.maxFileSize}MB)</li>
                    <li>üéµ AudioPlayer avan√ßado com controle de velocidade</li>
                    <li>üé§ Grava√ß√£o e envio de √°udios completa</li>
                    <li>üë§ Sistema de configura√ß√£o de usu√°rio</li>
                    <li>‚úçÔ∏è Nome personalizado nas mensagens com toggle no chat</li>
                    <li>üìù Campo multilinhas (Shift+Enter)</li>
                    <li>üóëÔ∏è Sistema para apagar mensagens (apenas local)</li>
                    <li>üòÄ Emoji picker expandido com 8 categorias</li>
                    <li>üì∑ Fotos de perfil dos contatos WhatsApp</li>
                    <li>üé® Configura√ß√µes avan√ßadas de apar√™ncia</li>
                    <li>üîß Interface reorganizada e moderna</li>
                  </ul>
                  <p><strong>üè¢ Sistema Empresarial Ultra Completo com Corre√ß√µes v7.1!</strong></p>
                  <p><strong>üë§ Usu√°rio:</strong> {userSettings.displayName || currentUser?.name}</p>
                  <p><strong>üè¢ Empresa:</strong> {advancedSettings.companyName}</p>
                </div>
              )}

              {activeSettingsTab === 'profile' && (
                <div style={styles.profileTab}>
                  <h4 style={{color: currentTheme.colors.primary}}>üë§ Configura√ß√£o de Perfil</h4>
                  
                  <div style={styles.profileInfo}>
                    <div style={styles.profileItem}>
                      <span style={styles.profileLabel}>üìß Email:</span>
                      <span style={styles.profileValue}>{currentUser?.email}</span>
                    </div>
                    <div style={styles.profileItem}>
                      <span style={styles.profileLabel}>üë§ Nome:</span>
                      <span style={styles.profileValue}>{currentUser?.name}</span>
                    </div>
                    <div style={styles.profileItem}>
                      <span style={styles.profileLabel}>‚úçÔ∏è Nome de Exibi√ß√£o:</span>
                      <span style={styles.profileValue}>{userSettings.displayName || currentUser?.displayName || currentUser?.name}</span>
                    </div>
                    <div style={styles.profileItem}>
                      <span style={styles.profileLabel}>üè¢ Cargo:</span>
                      <span style={styles.profileValue}>{currentUser?.role}</span>
                    </div>
                  </div>
                  
                  <button 
                    style={{...styles.editProfileBtn, backgroundColor: currentTheme.colors.primary}}
                    onClick={() => setShowUserProfileModal(true)}
                  >
                    ‚úèÔ∏è Editar Perfil
                  </button>
                  
                  {/* ‚úÖ CORRE√á√ÉO v7.1: ASSINATURA REMOVIDA DAQUI - AGORA FICA NO CHAT */}
                  <div style={styles.signatureInfo}>
                    <h5 style={{color: currentTheme.colors.primary}}>‚úçÔ∏è Controle de Assinatura</h5>
                    <p style={{fontSize: '14px', color: '#666'}}>
                      ‚úÖ <strong>CORRE√á√ÉO v7.1:</strong> O controle de assinatura foi <strong>movido para o chat</strong>!
                    </p>
                    <p style={{fontSize: '13px', color: currentTheme.colors.accent}}>
                      Agora voc√™ encontra o bot√£o de ativar/desativar assinatura ao lado do campo de mensagem, 
                      facilitando o controle em tempo real.
                    </p>
                  </div>
                  
                  <div style={styles.profileHint}>
                    <p><strong>üí° Dicas v7.1:</strong></p>
                    <p>‚Ä¢ O bot√£o de assinatura agora fica no chat (ao lado do campo de mensagem)</p>
                    <p>‚Ä¢ Azul = Ativo | Cinza = Inativo</p>
                    <p>‚Ä¢ Use Shift+Enter para nova linha, Enter para enviar</p>
                    <p>‚Ä¢ Fun√ß√£o "responder" agora inclui o texto original</p>
                    <p>‚Ä¢ Apagar mensagens agora s√≥ funciona localmente (sem erro 404)</p>
                  </div>
                </div>
              )}

              {activeSettingsTab === 'advanced' && (
                <div style={styles.advancedTab}>
                  <h4 style={{color: currentTheme.colors.primary}}>üé® Configura√ß√µes Avan√ßadas</h4>
                  
                  <div style={styles.advancedPreview}>
                    <h5>üé® Preview das Cores Atuais:</h5>
                    <div style={styles.colorPreviewGrid}>
                      <div style={{
                        ...styles.colorPreviewItem,
                        backgroundColor: currentTheme.colors.primary,
                        color: 'white'
                      }}>
                        Cor Prim√°ria
                      </div>
                      <div style={{
                        ...styles.colorPreviewItem,
                        backgroundColor: currentTheme.colors.secondary,
                        color: 'white'
                      }}>
                        Cor Secund√°ria
                      </div>
                      <div style={{
                        ...styles.colorPreviewItem,
                        backgroundColor: currentTheme.colors.accent,
                        color: 'white'
                      }}>
                        Cor de Destaque
                      </div>
                    </div>
                  </div>
                  
                  <button 
                    style={{...styles.advancedConfigBtn, backgroundColor: currentTheme.colors.primary}}
                    onClick={() => setShowAdvancedSettingsModal(true)}
                  >
                    üé® Abrir Configura√ß√µes Avan√ßadas
                  </button>
                  
                  <div style={styles.advancedInfo}>
                    <h5>‚öôÔ∏è Configura√ß√µes Dispon√≠veis:</h5>
                    <ul>
                      <li>üé® <strong>Apar√™ncia:</strong> Cores personalizadas do sistema</li>
                      <li>üè¢ <strong>Marca:</strong> Nome da empresa, logo, sistema</li>
                      <li>üñ•Ô∏è <strong>Interface:</strong> Textos dos bot√µes e campos</li>
                      <li>‚ö° <strong>Comportamento:</strong> Funcionalidades e limites</li>
                    </ul>
                    <p style={{color: currentTheme.colors.accent, fontSize: '12px'}}>
                      üíæ Todas as configura√ß√µes s√£o salvas automaticamente no navegador
                    </p>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* √ÅREA DE CHAT */}
        <div style={styles.chatArea}>
          {selectedChat ? (
            <>
              {/* HEADER DO CHAT */}
              <div style={styles.chatHeader}>
                <div style={styles.chatHeaderLeft}>
                  <div style={{...styles.chatAvatar, backgroundColor: currentTheme.colors.primary}}>
                    {selectedChat.avatar ? (
                      <img src={selectedChat.avatar} alt="" style={styles.avatarImage} />
                    ) : (
                      <span>{selectedChat.name?.charAt(0)?.toUpperCase()}</span>
                    )}
                  </div>
                  <div style={styles.chatHeaderInfo}>
                    <h3 style={{...styles.chatName, color: currentTheme.colors.primary}}>{selectedChat.name}</h3>
                    <span style={styles.chatStatus}>üü¢ Online</span>
                  </div>
                </div>
                
                {/* A√á√ïES DO CHAT */}
                <div style={styles.chatHeaderActions}>
                  <button 
                    style={styles.headerActionBtn}
                    onClick={() => toggleFavorite(selectedChat.id)}
                    title="Favoritar"
                  >
                    {selectedChat.favorite ? '‚≠ê' : '‚òÜ'}
                  </button>
                  <button 
                    style={styles.headerActionBtn} 
                    title="Buscar"
                  >
                    üîç
                  </button>
                  <button 
                    style={{...styles.editNameBtn, backgroundColor: currentTheme.colors.primary}}
                    onClick={() => setShowEditNameModal(true)}
                    title="Editar nome do contato"
                  >
                    ‚úèÔ∏è Editar
                  </button>
                  <button 
                    style={styles.blockBtn}
                    onClick={handleBlockContact}
                    title="Bloquear contato"
                  >
                    üö´ Block
                  </button>
                </div>
              </div>

              {/* MENSAGENS */}
              <div style={styles.messagesContainer}>
                {messages[selectedChat.id]?.map((msg, index) => {
                  const prevMsg = messages[selectedChat.id][index - 1];
                  const showDate = !prevMsg || formatDate(msg.timestamp) !== formatDate(prevMsg.timestamp);
                  
                  return (
                    <React.Fragment key={msg.id}>
                      {showDate && advancedSettings.showTimestamps && (
                        <div style={styles.dateDivider}>
                          <span>üìÖ {formatDate(msg.timestamp)}</span>
                        </div>
                      )}
                      
                      <div 
                        style={{
                          ...styles.messageWrapper,
                          justifyContent: msg.fromMe ? 'flex-end' : 'flex-start'
                        }}
                        onMouseEnter={(e) => {
                          const actions = e.currentTarget.querySelector('.message-actions');
                          if (actions) actions.style.display = 'flex';
                        }}
                        onMouseLeave={(e) => {
                          const actions = e.currentTarget.querySelector('.message-actions');
                          if (actions) actions.style.display = 'none';
                        }}
                      >
                        <div style={{
                          ...styles.messageBubble,
                          ...(msg.fromMe ? styles.messageSent : styles.messageReceived)
                        }}>
                          {replyTo?.id === msg.id && (
                            <div style={styles.replyIndicator}>
                              üí¨ Respondendo a esta mensagem...
                            </div>
                          )}
                          
                          {!msg.fromMe && (
                            <div style={styles.senderName}>üë§ {msg.from}</div>
                          )}
                          
                          {/* ‚úÖ CORRE√á√ÉO v7.1: NOME PERSONALIZADO COM VERIFICA√á√ÉO DE ASSINATURA - VISUAL AZUL SUAVE */}
                          {msg.fromMe && msg.senderName && signatureEnabled && (
                            <div style={{
                              ...styles.senderName,
                              backgroundColor: 'rgba(43, 76, 140, 0.1)', // ‚úÖ AZUL SUAVE EM VEZ DE AMARELO
                              color: '#2B4C8C', // ‚úÖ TEXTO AZUL
                              border: '1px solid rgba(43, 76, 140, 0.2)'
                            }}>
                              ‚úçÔ∏è {msg.senderName}
                            </div>
                          )}
                          
                          {/* ‚úÖ CORRE√á√ÉO v7.1: PREVIEW DE RESPOSTA MELHORADO */}
                          {msg.replyTo && (
                            <div style={styles.replyPreviewInMessage}>
                              üìù Respondendo: "{msg.replyTo.body?.substring(0, 30)}..."
                            </div>
                          )}
                          
                          {renderMessageContent(msg)}
                          
                          <div style={styles.messageFooter}>
                            {advancedSettings.showTimestamps && (
                              <span style={styles.messageTime}>
                                üïê {formatTime(msg.timestamp)}
                              </span>
                            )}
                            {msg.fromMe && (
                              <span style={styles.messageStatus}>
                                {renderMessageStatus(msg.status)}
                              </span>
                            )}
                          </div>
                          
                          {/* ‚úÖ CORRE√á√ÉO v7.1: A√á√ïES SIMPLIFICADAS - S√ì APAGAR PARA TODOS */}
                          <div className="message-actions" style={styles.messageActions}>
                            <button 
                              style={styles.actionBtn}
                              onClick={() => setReplyTo(msg)}
                              title="Responder (inclui texto original)"
                            >
                              üí¨
                            </button>
                            {msg.fromMe && !msg.isDeleted && (
                              <button 
                                style={styles.actionBtn}
                                onClick={() => deleteMessageForEveryone(msg.id)}
                                title="Apagar (apenas marca√ß√£o local)"
                              >
                                üóëÔ∏è
                              </button>
                            )}
                          </div>
                        </div>
                      </div>
                    </React.Fragment>
                  );
                })}
                <div ref={messagesEndRef} />
              </div>

              {/* INTERFACE DE GRAVA√á√ÉO DE √ÅUDIO */}
              {showAudioRecorder && (
                <AudioRecorder
                  onRecordingComplete={handleRecordingComplete}
                  onCancel={handleCancelRecording}
                />
              )}

              {/* ‚úÖ CORRE√á√ÉO v7.1: INPUT DE MENSAGEM COM BOT√ÉO DE ASSINATURA */}
              <div style={styles.inputContainer}>
                {selectedFile && (
                  <div style={styles.filePreview}>
                    <span>üìé {selectedFile.name}</span>
                    <button 
                      onClick={() => setSelectedFile(null)}
                      style={styles.removeFileBtn}
                    >
                      ‚ùå
                    </button>
                  </div>
                )}
                
                {/* ‚úÖ CORRE√á√ÉO v7.1: PREVIEW DE RESPOSTA MELHORADO */}
                {replyTo && (
                  <div style={styles.replyPreview}>
                    <span>üìù Respondendo: "{replyTo.body?.substring(0, 50)}{replyTo.body?.length > 50 ? '...' : ''}"</span>
                    <button 
                      onClick={() => setReplyTo(null)}
                      style={styles.cancelReplyBtn}
                    >
                      ‚ùå
                    </button>
                  </div>
                )}
                
                <div style={styles.inputRow}>
                  <button 
                    style={styles.attachBtn}
                    onClick={() => fileInputRef.current?.click()}
                    title={advancedSettings.attachButtonText}
                  >
                    üìé
                  </button>
                  
                  <input
                    type="file"
                    ref={fileInputRef}
                    onChange={handleFileSelect}
                    style={{ display: 'none' }}
                    accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.xls,.xlsx"
                  />
                  
                  <button 
                    style={styles.audioBtn}
                    onClick={handleStartRecording}
                    title="Gravar √°udio"
                    disabled={showAudioRecorder}
                  >
                    üé§
                  </button>
                  
                  <button 
                    style={styles.emojiBtn}
                    onClick={() => setShowEmojiPicker(true)}
                    title="Emojis"
                  >
                    üòÄ
                  </button>
                  
                  {/* ‚úÖ CORRE√á√ÉO v7.1: BOT√ÉO DE ASSINATURA MOVIDO PARA C√Å */}
                  <button
                    style={{
                      ...styles.signatureToggleBtn,
                      backgroundColor: signatureEnabled ? currentTheme.colors.primary : '#6c757d',
                      color: 'white'
                    }}
                    onClick={toggleSignature}
                    title={signatureEnabled ? 'Assinatura ATIVA - Clique para desativar' : 'Assinatura INATIVA - Clique para ativar'}
                  >
                    ‚úçÔ∏è
                  </button>
                  
                  <textarea
                    ref={messageInputRef}
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder={selectedFile ? "üìù Adicione uma legenda... (Shift+Enter para nova linha)" : "üí¨ Digite uma mensagem... (Shift+Enter para nova linha)"}
                    style={{...styles.messageTextarea, borderColor: currentTheme.colors.border}}
                    disabled={isUploading || showAudioRecorder}
                    rows={1}
                  />
                  
                  <button 
                    onClick={sendMessage}
                    style={{
                      ...styles.sendButton,
                      backgroundColor: currentTheme.colors.primary
                    }}
                    disabled={(!newMessage.trim() && !selectedFile) || isUploading || showAudioRecorder}
                    title="Enviar"
                  >
                    {isUploading ? '‚è≥' : selectedFile ? 'üì§ Arquivo' : advancedSettings.sendButtonText}
                  </button>
                </div>
                
                {/* ‚úÖ CORRE√á√ÉO v7.1: HINT MELHORADO COM STATUS DA ASSINATURA */}
                <div style={styles.inputHint}>
                  <small>
                    üí° Shift+Enter para nova linha | Enter para enviar | 
                    Assinatura: {signatureEnabled ? 
                      <span style={{color: currentTheme.colors.primary, fontWeight: 'bold'}}>‚úÖ ATIVA</span> : 
                      <span style={{color: '#6c757d', fontWeight: 'bold'}}>‚ùå INATIVA</span>
                    }
                  </small>
                </div>
              </div>
            </>
          ) : (
            <div style={styles.noChatSelected}>
              <div style={styles.emptyIcon}>üí¨</div>
              <h2 style={{color: currentTheme.colors.primary}}>Selecione uma conversa</h2>
              <p>Escolha um chat para come√ßar a conversar</p>
              {!isConnected && (
                <button 
                  onClick={() => setActiveTab('connection')}
                  style={{...styles.connectPromptBtn, backgroundColor: currentTheme.colors.primary}}
                >
                  üîå Conectar WhatsApp
                </button>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

// ====================================
// ESTILOS COMPLETOS v7.1 COM CORRE√á√ïES APLICADAS
// ====================================
const styles = {
  // Container Principal
  container: {
    display: 'flex',
    flexDirection: 'column',
    height: '100vh',
    backgroundColor: '#f0f2f5',
    fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif'
  },
  
  // Login
  loginContainer: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    minHeight: '100vh'
  },
  
  loginBox: {
    backgroundColor: 'white',
    padding: '40px',
    borderRadius: '20px',
    boxShadow: '0 20px 60px rgba(0,0,0,0.3)',
    width: '450px',
    maxWidth: '90%'
  },
  
  logoContainer: {
    textAlign: 'center',
    marginBottom: '30px'
  },
  
  logoWrapper: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    gap: '15px',
    marginBottom: '20px'
  },
  
  logoIcon: {
    fontSize: '50px'
  },
  
  logoText: {
    display: 'flex',
    alignItems: 'center',
    fontSize: '36px',
    fontWeight: 'bold'
  },
  
  logoP: {
    marginRight: '2px'
  },
  
  logoRimem: {
    // cor ser√° aplicada dinamicamente
  },
  
  title: {
    margin: '10px 0',
    fontSize: '24px',
    fontWeight: 'bold'
  },
  
  subtitle: {
    fontSize: '14px',
    margin: '5px 0'
  },
  
  formGroup: {
    marginBottom: '20px'
  },
  
  label: {
    display: 'block',
    marginBottom: '8px',
    color: '#555',
    fontWeight: '500',
    fontSize: '14px'
  },
  
  input: {
    width: '100%',
    padding: '12px 15px',
    border: '2px solid #ddd',
    borderRadius: '10px',
    fontSize: '16px',
    transition: 'border-color 0.3s',
    boxSizing: 'border-box'
  },
  
  loginButton: {
    width: '100%',
    padding: '14px',
    color: 'white',
    border: 'none',
    borderRadius: '10px',
    fontSize: '16px',
    fontWeight: 'bold',
    cursor: 'pointer',
    transition: 'all 0.3s',
    marginTop: '10px'
  },
  
  loginFooter: {
    textAlign: 'center',
    marginTop: '20px'
  },
  
  footerText: {
    color: '#999',
    fontSize: '12px',
    display: 'block',
    marginBottom: '5px'
  },
  
  footerBrand: {
    fontSize: '11px',
    display: 'block',
    marginTop: '10px',
    paddingTop: '10px',
    borderTop: '1px solid #eee'
  },
  
  // Header
  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    color: 'white',
    padding: '12px 20px',
    boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
  },
  
  headerLeft: {
    display: 'flex',
    alignItems: 'center',
    gap: '20px'
  },
  
  headerLogo: {
    display: 'flex',
    alignItems: 'center',
    gap: '12px'
  },
  
  headerLogoIcon: {
    fontSize: '32px'
  },
  
  headerTitle: {
    fontSize: '18px',
    fontWeight: 'bold',
    margin: 0,
    letterSpacing: '0.5px'
  },
  
  userInfo: {
    fontSize: '13px',
    opacity: 0.9
  },
  
  headerRight: {
    display: 'flex',
    alignItems: 'center',
    gap: '15px'
  },
  
  statusBadgeConnected: {
    padding: '6px 12px',
    backgroundColor: 'rgba(40, 167, 69, 0.2)',
    color: '#28a745',
    borderRadius: '20px',
    fontSize: '14px',
    fontWeight: '500'
  },
  
  statusBadgeConnecting: {
    padding: '6px 12px',
    backgroundColor: 'rgba(255, 193, 7, 0.2)',
    color: '#ffc107',
    borderRadius: '20px',
    fontSize: '14px',
    fontWeight: '500'
  },
  
  statusBadgeDisconnected: {
    padding: '6px 12px',
    backgroundColor: 'rgba(220, 53, 69, 0.2)',
    color: '#dc3545',
    borderRadius: '20px',
    fontSize: '14px',
    fontWeight: '500'
  },
  
  disconnectBtn: {
    padding: '6px 12px',
    backgroundColor: 'rgba(255,255,255,0.2)',
    color: 'white',
    border: '1px solid rgba(255,255,255,0.3)',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px',
    transition: 'all 0.3s'
  },
  
  themeBtn: {
    padding: '6px 10px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '20px',
    transition: 'transform 0.3s'
  },
  
  logoutBtn: {
    padding: '6px 12px',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: '500',
    transition: 'all 0.3s'
  },
  
  // Layout Principal
  mainContent: {
    display: 'flex',
    flex: 1,
    overflow: 'hidden'
  },
  
  // Sidebar
  sidebar: {
    width: '380px',
    backgroundColor: 'white',
    borderRight: '1px solid #dee2e6',
    display: 'flex',
    flexDirection: 'column'
  },
  
  tabs: {
    display: 'flex',
    borderBottom: '1px solid #dee2e6'
  },
  
  tab: {
    flex: 1,
    padding: '12px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '14px',
    color: '#666',
    transition: 'all 0.3s',
    borderBottom: '2px solid transparent'
  },
  
  tabActive: {
    borderBottom: '2px solid',
    fontWeight: 'bold'
  },
  
  searchBox: {
    padding: '10px',
    borderBottom: '1px solid #dee2e6'
  },
  
  searchInput: {
    width: '100%',
    padding: '10px 15px',
    border: '1px solid #dee2e6',
    borderRadius: '20px',
    fontSize: '14px',
    boxSizing: 'border-box',
    transition: 'all 0.3s'
  },
  
  conversationsList: {
    flex: 1,
    overflowY: 'auto'
  },
  
  conversationItem: {
    display: 'flex',
    alignItems: 'center',
    padding: '12px',
    cursor: 'pointer',
    transition: 'background-color 0.2s',
    position: 'relative',
    borderBottom: '1px solid #dee2e6'
  },
  
  conversationActive: {
    borderLeft: '3px solid'
  },
  
  conversationAvatar: {
    width: '50px',
    height: '50px',
    borderRadius: '50%',
    color: 'white',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontSize: '20px',
    marginRight: '12px',
    flexShrink: 0
  },
  
  avatarImage: {
    width: '100%',
    height: '100%',
    borderRadius: '50%',
    objectFit: 'cover'
  },
  
  conversationInfo: {
    flex: 1,
    minWidth: 0
  },
  
  conversationHeader: {
    display: 'flex',
    justifyContent: 'space-between',
    marginBottom: '4px'
  },
  
  conversationName: {
    fontWeight: '500',
    fontSize: '16px',
    color: '#333'
  },
  
  conversationTime: {
    fontSize: '12px',
    color: '#999'
  },
  
  conversationPreview: {
    fontSize: '14px',
    color: '#666',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  
  unreadBadge: {
    position: 'absolute',
    right: '15px',
    top: '50%',
    transform: 'translateY(-50%)',
    color: 'white',
    borderRadius: '10px',
    padding: '2px 8px',
    fontSize: '12px',
    fontWeight: 'bold'
  },
  
  // √Årea de Chat
  chatArea: {
    flex: 1,
    display: 'flex',
    flexDirection: 'column',
    backgroundColor: '#e5ddd5',
    position: 'relative'
  },
  
  chatHeader: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '10px 20px',
    backgroundColor: 'white',
    borderBottom: '1px solid #dee2e6'
  },
  
  chatHeaderLeft: {
    display: 'flex',
    alignItems: 'center'
  },
  
  chatAvatar: {
    width: '40px',
    height: '40px',
    borderRadius: '50%',
    color: 'white',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: '12px'
  },
  
  chatHeaderInfo: {
    display: 'flex',
    flexDirection: 'column'
  },
  
  chatName: {
    margin: 0,
    fontSize: '16px',
    fontWeight: '500'
  },
  
  chatStatus: {
    fontSize: '13px',
    color: '#666'
  },
  
  chatHeaderActions: {
    display: 'flex',
    gap: '10px',
    alignItems: 'center'
  },
  
  headerActionBtn: {
    padding: '8px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '20px',
    color: '#666',
    transition: 'color 0.2s'
  },

  editNameBtn: {
    padding: '8px 12px',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px',
    transition: 'all 0.2s',
    display: 'flex',
    alignItems: 'center',
    gap: '5px'
  },
  
  blockBtn: {
    padding: '8px 12px',
    backgroundColor: '#dc3545',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    fontSize: '14px',
    transition: 'all 0.2s',
    display: 'flex',
    alignItems: 'center',
    gap: '5px'
  },
  
  // Mensagens
  messagesContainer: {
    flex: 1,
    overflowY: 'auto',
    padding: '20px',
    backgroundImage: 'url("data:image/svg+xml,%3Csvg width="100" height="100" xmlns="http://www.w3.org/2000/svg"%3E%3Cdefs%3E%3Cpattern id="pattern" x="0" y="0" width="100" height="100" patternUnits="userSpaceOnUse"%3E%3Ccircle cx="50" cy="50" r="1" fill="%23ccc" opacity="0.3"/%3E%3C/pattern%3E%3C/defs%3E%3Crect width="100" height="100" fill="url(%23pattern)"/%3E%3C/svg%3E")'
  },
  
  dateDivider: {
    textAlign: 'center',
    margin: '20px 0',
    position: 'relative'
  },
  
  messageWrapper: {
    display: 'flex',
    marginBottom: '10px',
    position: 'relative'
  },
  
  messageBubble: {
    maxWidth: '65%',
    padding: '8px 12px',
    borderRadius: '7px',
    position: 'relative',
    wordWrap: 'break-word'
  },
  
  messageReceived: {
    backgroundColor: 'white',
    borderTopLeftRadius: 0
  },
  
  messageSent: {
    backgroundColor: '#DCF8C6',
    borderTopRightRadius: 0
  },
  
  senderName: {
    fontSize: '14px',
    fontWeight: 'bold',
    marginBottom: '4px',
    padding: '3px 6px',
    borderRadius: '4px',
    display: 'inline-block'
  },
  
  messageText: {
    fontSize: '14px',
    lineHeight: '1.4',
    whiteSpace: 'pre-wrap'
  },
  
  messageFooter: {
    display: 'flex',
    justifyContent: 'flex-end',
    alignItems: 'center',
    gap: '4px',
    marginTop: '4px'
  },
  
  messageTime: {
    fontSize: '11px',
    color: '#999'
  },
  
  messageStatus: {
    fontSize: '14px'
  },
  
  messageActions: {
    position: 'absolute',
    top: '-20px',
    right: '0',
    display: 'none',
    gap: '5px',
    backgroundColor: 'white',
    padding: '2px 5px',
    borderRadius: '5px',
    boxShadow: '0 2px 5px rgba(0,0,0,0.1)'
  },
  
  actionBtn: {
    padding: '2px 6px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '14px',
    borderRadius: '3px',
    transition: 'background-color 0.2s'
  },
  
  replyIndicator: {
    padding: '4px 8px',
    backgroundColor: 'rgba(102, 126, 234, 0.1)',
    borderLeft: '3px solid #667eea',
    marginBottom: '8px',
    fontSize: '12px',
    color: '#667eea'
  },
  
  // ‚úÖ CORRE√á√ÉO v7.1: NOVO ESTILO PARA PREVIEW DE RESPOSTA EM MENSAGEM
  replyPreviewInMessage: {
    padding: '6px 8px',
    backgroundColor: 'rgba(43, 76, 140, 0.1)',
    borderLeft: '3px solid #2B4C8C',
    marginBottom: '8px',
    fontSize: '12px',
    color: '#2B4C8C',
    fontStyle: 'italic'
  },
  
  replyPreview: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '8px',
    backgroundColor: '#DCF8C6',
    borderRadius: '5px',
    marginBottom: '10px',
    fontSize: '14px'
  },
  
  cancelReplyBtn: {
    padding: '4px 8px',
    backgroundColor: '#666',
    color: 'white',
    border: 'none',
    borderRadius: '3px',
    cursor: 'pointer'
  },
  
  // M√≠dia
  mediaContainer: {
    marginTop: '5px'
  },
  
  documentContainer: {
    display: 'flex',
    alignItems: 'center',
    padding: '10px',
    backgroundColor: 'rgba(0,0,0,0.05)',
    borderRadius: '5px',
    marginTop: '5px',
    minWidth: '250px'
  },
  
  documentIcon: {
    fontSize: '30px',
    marginRight: '10px'
  },
  
  documentInfo: {
    flex: 1
  },
  
  documentName: {
    fontSize: '14px',
    fontWeight: '500',
    marginBottom: '6px',
    wordBreak: 'break-word'
  },
  
  documentActions: {
    display: 'flex',
    gap: '10px'
  },
  
  downloadButton: {
    fontSize: '12px',
    color: '#667eea',
    textDecoration: 'none',
    padding: '2px 6px',
    borderRadius: '3px',
    backgroundColor: 'rgba(102, 126, 234, 0.1)',
    display: 'inline-block',
    cursor: 'pointer',
    transition: 'background-color 0.2s'
  },
  
  viewButton: {
    fontSize: '12px',
    color: '#25D366',
    textDecoration: 'none',
    padding: '2px 6px',
    borderRadius: '3px',
    backgroundColor: 'rgba(37, 211, 102, 0.1)',
    display: 'inline-block',
    cursor: 'pointer',
    transition: 'background-color 0.2s'
  },
  
  caption: {
    marginTop: '5px',
    fontSize: '14px'
  },
  
  // Input
  inputContainer: {
    backgroundColor: 'white',
    borderTop: '1px solid #dee2e6',
    padding: '10px',
    position: 'relative'
  },
  
  filePreview: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '8px',
    backgroundColor: '#f0f2f5',
    borderRadius: '5px',
    marginBottom: '10px'
  },
  
  removeFileBtn: {
    padding: '4px 8px',
    backgroundColor: '#ff4757',
    color: 'white',
    border: 'none',
    borderRadius: '3px',
    cursor: 'pointer'
  },
  
  inputRow: {
    display: 'flex',
    alignItems: 'flex-end',
    gap: '10px'
  },
  
  attachBtn: {
    padding: '8px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '24px'
  },
  
  audioBtn: {
    padding: '8px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '24px',
    transition: 'all 0.3s'
  },
  
  emojiBtn: {
    padding: '8px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '24px'
  },
  
  // ‚úÖ CORRE√á√ÉO v7.1: NOVO ESTILO PARA BOT√ÉO DE ASSINATURA NO CHAT
  signatureToggleBtn: {
    padding: '8px 12px',
    border: 'none',
    borderRadius: '20px',
    cursor: 'pointer',
    fontSize: '16px',
    fontWeight: 'bold',
    transition: 'all 0.3s',
    minWidth: '40px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center'
  },
  
  messageTextarea: {
    flex: 1,
    padding: '10px',
    border: '1px solid #dee2e6',
    borderRadius: '20px',
    fontSize: '14px',
    outline: 'none',
    resize: 'none',
    minHeight: '40px',
    maxHeight: '200px',
    lineHeight: '1.4',
    fontFamily: 'inherit'
  },
  
  sendButton: {
    padding: '8px 16px',
    color: 'white',
    border: 'none',
    borderRadius: '20px',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: 'bold',
    minHeight: '40px'
  },
  
  inputHint: {
    textAlign: 'center',
    marginTop: '5px',
    color: '#666'
  },
  
  // Estados Vazios
  emptyState: {
    textAlign: 'center',
    padding: '40px 20px',
    color: '#999'
  },
  
  noChatSelected: {
    flex: 1,
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    color: '#999'
  },
  
  emptyIcon: {
    fontSize: '80px',
    marginBottom: '20px',
    opacity: 0.5
  },
  
  connectPromptBtn: {
    marginTop: '20px',
    padding: '10px 20px',
    color: 'white',
    border: 'none',
    borderRadius: '20px',
    cursor: 'pointer',
    fontSize: '16px'
  },
  
  // Tabs de Conex√£o
  connectionTab: {
    padding: '20px',
    textAlign: 'center'
  },
  
  qrContainer: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    padding: '20px'
  },
  
  qrCode: {
    width: '280px',
    height: '280px',
    padding: '10px',
    backgroundColor: 'white',
    borderRadius: '10px',
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
  },
  
  qrText: {
    marginTop: '20px',
    color: '#666',
    fontSize: '14px'
  },
  
  connectContainer: {
    padding: '40px 20px'
  },
  
  connectButton: {
    padding: '15px 30px',
    color: 'white',
    border: 'none',
    borderRadius: '30px',
    fontSize: '16px',
    fontWeight: 'bold',
    cursor: 'pointer'
  },
  
  connectInfo: {
    marginTop: '15px',
    color: '#666',
    fontSize: '14px'
  },
  
  connectedInfo: {
    padding: '20px',
    textAlign: 'center'
  },
  
  successIcon: {
    fontSize: '60px',
    marginBottom: '20px'
  },
  
  whatsappDetails: {
    textAlign: 'left',
    backgroundColor: '#f0f2f5',
    padding: '15px',
    borderRadius: '10px',
    margin: '20px 0'
  },
  
  disconnectButton: {
    padding: '10px 20px',
    backgroundColor: '#ff4757',
    color: 'white',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    marginTop: '20px'
  },
  
  // Configura√ß√µes
  settingsTab: {
    padding: '0'
  },
  
  settingsSubTabs: {
    display: 'flex',
    borderBottom: '1px solid #dee2e6',
    backgroundColor: '#f8f9fa'
  },
  
  settingsSubTab: {
    flex: 1,
    padding: '12px 8px',
    backgroundColor: 'transparent',
    border: 'none',
    cursor: 'pointer',
    fontSize: '12px',
    color: '#666',
    transition: 'all 0.3s',
    borderBottom: '2px solid transparent'
  },
  
  settingsSubTabActive: {
    borderBottom: '2px solid',
    fontWeight: 'bold',
    backgroundColor: 'white'
  },
  
  settingInfo: {
    padding: '20px',
    backgroundColor: '#f0f2f5',
    margin: '20px',
    borderRadius: '10px',
    fontSize: '14px'
  },

  // ESTILOS PARA ABA DE PERFIL
  profileTab: {
    padding: '20px'
  },
  
  profileInfo: {
    backgroundColor: '#f8f9fa',
    borderRadius: '10px',
    padding: '15px',
    margin: '15px 0'
  },
  
  profileItem: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '8px 0',
    borderBottom: '1px solid #dee2e6'
  },
  
  profileLabel: {
    fontSize: '14px',
    fontWeight: '500',
    color: '#666'
  },
  
  profileValue: {
    fontSize: '14px',
    color: '#333',
    fontWeight: '500'
  },
  
  editProfileBtn: {
    width: '100%',
    padding: '12px',
    color: 'white',
    border: 'none',
    borderRadius: '8px',
    cursor: 'pointer',
    fontSize: '14px',
    fontWeight: 'bold',
    transition: 'all 0.3s'
  },
  
  // ‚úÖ CORRE√á√ÉO v7.1: NOVA √ÅREA DE INFO SOBRE ASSINATURA
  signatureInfo: {
    marginTop: '25px',
    padding: '15px',
    backgroundColor: 'rgba(43, 76, 140, 0.1)',
    borderRadius: '8px',
    border: '1px solid rgba(43, 76, 140, 0.2)'
  },
  
  profileHint: {
    marginTop: '20px',
    padding: '15px',
    backgroundColor: '#e3f2fd',
    borderRadius: '5px',
    fontSize: '12px',
    color: '#1565c0'
  },

  // ESTILOS PARA ABA AVAN√áADA
  advancedTab: {
    padding: '20px'
  },
  
  advancedPreview: {
    marginBottom: '20px',
    padding: '15px',
    backgroundColor: '#f8f9fa',
    borderRadius: '8px'
  },
  
  colorPreviewGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',
    gap: '10px',
    marginTop: '10px'
  },
  
  colorPreviewItem: {
    padding: '15px 10px',
    borderRadius: '8px',
    textAlign: 'center',
    fontSize: '12px',
    fontWeight: 'bold'
  },
  
  advancedConfigBtn: {
    width: '100%',
    padding: '15px',
    color: 'white',
    border: 'none',
    borderRadius: '8px',
    cursor: 'pointer',
    fontSize: '16px',
    fontWeight: 'bold',
    marginBottom: '20px',
    transition: 'all 0.3s'
  },
  
  advancedInfo: {
    padding: '15px',
    backgroundColor: '#f0f2f5',
    borderRadius: '8px',
    fontSize: '14px'
  }
}