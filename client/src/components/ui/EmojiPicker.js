// client/src/components/ui/EmojiPicker.js
import React, { useState, useRef, useEffect } from 'react';

const EmojiPicker = ({ onEmojiSelect, onClose, isVisible }) => {
  // Estados
  const [activeCategory, setActiveCategory] = useState('smileys');
  const [recentEmojis, setRecentEmojis] = useState(() => {
    const saved = localStorage.getItem('primem_recent_emojis');
    return saved ? JSON.parse(saved) : [];
  });

  // Ref para container
  const containerRef = useRef(null);

  // Categorias de emojis
  const emojiCategories = {
    recent: {
      name: 'üïê Recentes',
      emojis: recentEmojis
    },
    smileys: {
      name: 'üòÄ Rostos',
      emojis: [
        'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 'üôÉ',
        'üòâ', 'üòä', 'üòá', 'ü•∞', 'üòç', 'ü§©', 'üòò', 'üòó', '‚ò∫Ô∏è', 'üòö',
        'üòô', 'ü•≤', 'üòã', 'üòõ', 'üòú', 'ü§™', 'üòù', 'ü§ë', 'ü§ó', 'ü§≠',
        'ü§´', 'ü§î', 'ü§ê', 'ü§®', 'üòê', 'üòë', 'üò∂', 'üòè', 'üòí', 'üôÑ',
        'üò¨', 'ü§•', 'üòî', 'üò™', 'ü§§', 'üò¥', 'üò∑', 'ü§í', 'ü§ï', 'ü§¢',
        'ü§Æ', 'ü§ß', 'ü•µ', 'ü•∂', 'ü•¥', 'üòµ', 'ü§Ø', 'ü§†', 'ü•≥', 'ü•∏'
      ]
    },
    people: {
      name: 'üë• Pessoas',
      emojis: [
        'üë∂', 'üßí', 'üë¶', 'üëß', 'üßë', 'üë®', 'üë©', 'üßì', 'üë¥', 'üëµ',
        'üë±', 'üë®‚Äçü¶∞', 'üë©‚Äçü¶∞', 'üë®‚Äçü¶±', 'üë©‚Äçü¶±', 'üë®‚Äçü¶≤', 'üë©‚Äçü¶≤', 'üë®‚Äçü¶≥', 'üë©‚Äçü¶≥', 'üßî',
        'üë≤', 'üë≥', 'üëÆ', 'üë∑', 'üíÇ', 'üïµÔ∏è', 'üë©‚Äç‚öïÔ∏è', 'üë®‚Äç‚öïÔ∏è', 'üë©‚Äçüåæ', 'üë®‚Äçüåæ',
        'üë©‚Äçüç≥', 'üë®‚Äçüç≥', 'üë©‚Äçüéì', 'üë®‚Äçüéì', 'üë©‚Äçüé§', 'üë®‚Äçüé§', 'üë©‚Äçüè´', 'üë®‚Äçüè´', 'üë©‚Äçüè≠', 'üë®‚Äçüè≠',
        'üë©‚Äçüíª', 'üë®‚Äçüíª', 'üë©‚Äçüíº', 'üë®‚Äçüíº', 'üë©‚Äçüîß', 'üë®‚Äçüîß', 'üë©‚Äçüî¨', 'üë®‚Äçüî¨', 'üë©‚Äçüé®', 'üë®‚Äçüé®'
      ]
    },
    nature: {
      name: 'üå± Natureza',
      emojis: [
        'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ',
        'ü¶Å', 'üêÆ', 'üê∑', 'üêΩ', 'üê∏', 'üêµ', 'üôà', 'üôâ', 'üôä', 'üêí',
        'üêî', 'üêß', 'üê¶', 'üê§', 'üê£', 'üê•', 'ü¶Ü', 'ü¶Ö', 'ü¶â', 'ü¶á',
        'üê∫', 'üêó', 'üê¥', 'ü¶Ñ', 'üêù', 'üêõ', 'ü¶ã', 'üêå', 'üêû', 'üêú',
        'ü¶ü', 'ü¶ó', 'üï∑Ô∏è', 'üï∏Ô∏è', 'ü¶Ç', 'üê¢', 'üêç', 'ü¶é', 'ü¶ñ', 'ü¶ï'
      ]
    },
    food: {
      name: 'üçï Comida',
      emojis: [
        'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'ü´ê', 'üçà',
        'üçí', 'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù', 'üçÖ', 'üçÜ', 'ü•ë', 'ü•¶',
        'ü•¨', 'ü•í', 'üå∂Ô∏è', 'ü´ë', 'üåΩ', 'ü•ï', 'ü´í', 'üßÑ', 'üßÖ', 'ü•î',
        'üç†', 'ü•ê', 'ü•ñ', 'üçû', 'ü•®', 'ü•Ø', 'üßÄ', 'ü•ö', 'üç≥', 'üßà',
        'ü•û', 'üßá', 'ü•ì', 'ü•©', 'üçó', 'üçñ', 'ü¶¥', 'üå≠', 'üçî', 'üçü',
        'üçï', 'ü•™', 'ü•ô', 'üßÜ', 'üåÆ', 'üåØ', 'ü´î', 'ü•ó', 'ü•ò', 'ü´ï'
      ]
    },
    activities: {
      name: '‚öΩ Atividades',
      emojis: [
        '‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±',
        'ü™Ä', 'üèì', 'üè∏', 'üèí', 'üèë', 'ü•ç', 'üèè', '‚õ≥', 'ü™Å', 'üèπ',
        'üé£', 'ü§ø', 'ü•ä', 'ü•ã', 'üéΩ', 'üõπ', 'üõ∑', '‚õ∏Ô∏è', 'ü•å', 'üéø',
        '‚õ∑Ô∏è', 'üèÇ', 'ü™Ç', 'üèãÔ∏è', 'ü§º', 'ü§∏', '‚õπÔ∏è', 'ü§∫', 'ü§æ', 'üèåÔ∏è',
        'üèá', 'üßò', 'üèÑ', 'üèä', 'ü§Ω', 'üö£', 'üßó', 'üöµ', 'üö¥', 'üèÜ'
      ]
    },
    travel: {
      name: 'üöó Viagem',
      emojis: [
        'üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèéÔ∏è', 'üöì', 'üöë', 'üöí', 'üöê',
        'üõª', 'üöö', 'üöõ', 'üöú', 'ü¶Ø', 'ü¶Ω', 'ü¶º', 'üõ¥', 'üö≤', 'üõµ',
        'üèçÔ∏è', 'üõ∫', 'üö®', 'üöî', 'üöç', 'üöò', 'üöñ', 'üö°', 'üö†', 'üöü',
        'üöÉ', 'üöã', 'üöû', 'üöù', 'üöÑ', 'üöÖ', 'üöà', 'üöÇ', 'üöÜ', 'üöá',
        'üöä', 'üöâ', '‚úàÔ∏è', 'üõ´', 'üõ¨', 'üõ©Ô∏è', 'üí∫', 'üõ∞Ô∏è', 'üöÄ', 'üõ∏'
      ]
    },
    objects: {
      name: 'üì± Objetos',
      emojis: [
        '‚åö', 'üì±', 'üì≤', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ®Ô∏è', 'üñ±Ô∏è', 'üñ≤Ô∏è', 'üïπÔ∏è',
        'üóúÔ∏è', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 'üìº', 'üì∑', 'üì∏', 'üìπ', 'üé•',
        'üìΩÔ∏è', 'üéûÔ∏è', 'üìû', '‚òéÔ∏è', 'üìü', 'üì†', 'üì∫', 'üìª', 'üéôÔ∏è', 'üéöÔ∏è',
        'üéõÔ∏è', 'üß≠', '‚è±Ô∏è', '‚è≤Ô∏è', '‚è∞', 'üï∞Ô∏è', '‚åõ', '‚è≥', 'üì°', 'üîã',
        'üîå', 'üí°', 'üî¶', 'üïØÔ∏è', 'ü™î', 'üßØ', 'üõ¢Ô∏è', 'üí∏', 'üíµ', 'üí¥'
      ]
    },
    symbols: {
      name: 'üíñ S√≠mbolos',
      emojis: [
        '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî',
        '‚ù£Ô∏è', 'üíï', 'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', 'üíü', '‚òÆÔ∏è',
        '‚úùÔ∏è', '‚ò™Ô∏è', 'üïâÔ∏è', '‚ò∏Ô∏è', '‚ú°Ô∏è', 'üîØ', 'üïé', '‚òØÔ∏è', '‚ò¶Ô∏è', 'üõê',
        '‚õé', '‚ôà', '‚ôâ', '‚ôä', '‚ôã', '‚ôå', '‚ôç', '‚ôé', '‚ôè', '‚ôê',
        '‚ôë', '‚ôí', '‚ôì', 'üÜî', '‚öõÔ∏è', 'üâë', '‚ò¢Ô∏è', '‚ò£Ô∏è', 'üì¥', 'üì≥'
      ]
    },
    flags: {
      name: 'üèÅ Bandeiras',
      emojis: [
        'üèÅ', 'üö©', 'üéå', 'üè¥', 'üè≥Ô∏è', 'üè≥Ô∏è‚Äçüåà', 'üè≥Ô∏è‚Äç‚ößÔ∏è', 'üè¥‚Äç‚ò†Ô∏è', 'üá¶üá´', 'üá¶üá±',
        'üá©üáø', 'üá¶üá∏', 'üá¶üá©', 'üá¶üá¥', 'üá¶üáÆ', 'üá¶üá∂', 'üá¶üá¨', 'üá¶üá∑', 'üá¶üá≤', 'üá¶üáº',
        'üá¶üá∫', 'üá¶üáπ', 'üá¶üáø', 'üáßüá∏', 'üáßüá≠', 'üáßüá©', 'üáßüáß', 'üáßüáæ', 'üáßüá™', 'üáßüáø',
        'üáßüáØ', 'üáßüá≤', 'üáßüáπ', 'üáßüá¥', 'üáßüá¶', 'üáßüáº', 'üáßüá∑', 'üáÆüá¥', 'üáªüá¨', 'üáßüá≥'
      ]
    }
  };

  // Fechar ao clicar fora
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (containerRef.current && !containerRef.current.contains(event.target)) {
        onClose();
      }
    };

    if (isVisible) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isVisible, onClose]);

  // Salvar emojis recentes
  useEffect(() => {
    localStorage.setItem('primem_recent_emojis', JSON.stringify(recentEmojis));
  }, [recentEmojis]);

  // Selecionar emoji
  const handleEmojiSelect = (emoji) => {
    // Adicionar aos recentes (m√°ximo 20)
    setRecentEmojis(prev => {
      const filtered = prev.filter(e => e !== emoji);
      return [emoji, ...filtered].slice(0, 20);
    });

    // Callback para o componente pai
    if (onEmojiSelect) {
      onEmojiSelect(emoji);
    }
  };

  // N√£o renderizar se n√£o vis√≠vel
  if (!isVisible) return null;

  return (
    <div style={styles.overlay}>
      <div ref={containerRef} style={styles.container}>
        {/* Header */}
        <div style={styles.header}>
          <span style={styles.title}>üòÄ Escolher Emoji</span>
          <button style={styles.closeButton} onClick={onClose}>
            ‚úñÔ∏è
          </button>
        </div>

        {/* Categorias */}
        <div style={styles.categories}>
          {Object.entries(emojiCategories).map(([key, category]) => (
            <button
              key={key}
              style={{
                ...styles.categoryButton,
                ...(activeCategory === key ? styles.activeCategoryButton : {})
              }}
              onClick={() => setActiveCategory(key)}
              title={category.name}
            >
              {category.name.split(' ')[0]}
            </button>
          ))}
        </div>

        {/* Grid de emojis */}
        <div style={styles.emojiGrid}>
          {emojiCategories[activeCategory]?.emojis.map((emoji, index) => (
            <button
              key={`${emoji}-${index}`}
              style={styles.emojiButton}
              onClick={() => handleEmojiSelect(emoji)}
              title={emoji}
            >
              {emoji}
            </button>
          ))}
          
          {/* Mensagem para categoria vazia */}
          {emojiCategories[activeCategory]?.emojis.length === 0 && (
            <div style={styles.emptyCategory}>
              <span>üì≠ Nenhum emoji recente</span>
              <small>Use emojis para v√™-los aqui</small>
            </div>
          )}
        </div>

        {/* Footer */}
        <div style={styles.footer}>
          <small>üí° Clique no emoji para inserir</small>
        </div>
      </div>
    </div>
  );
};

// Estilos do componente
const styles = {
  overlay: {
    position: 'fixed',
    bottom: '80px',
    right: '20px',
    zIndex: 1000
  },

  container: {
    width: '320px',
    height: '400px',
    backgroundColor: 'white',
    borderRadius: '12px',
    boxShadow: '0 8px 32px rgba(0,0,0,0.15)',
    border: '1px solid #e1e5e9',
    display: 'flex',
    flexDirection: 'column',
    overflow: 'hidden'
  },

  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '12px 16px',
    borderBottom: '1px solid #e1e5e9',
    backgroundColor: '#f8f9fa',
    flexShrink: 0
  },

  title: {
    fontSize: '16px',
    fontWeight: '600',
    color: '#2c3e50'
  },

  closeButton: {
    background: 'none',
    border: 'none',
    fontSize: '14px',
    cursor: 'pointer',
    padding: '4px',
    borderRadius: '4px',
    transition: 'background-color 0.2s'
  },

  categories: {
    display: 'flex',
    padding: '8px',
    gap: '4px',
    borderBottom: '1px solid #e1e5e9',
    backgroundColor: '#fafbfc',
    flexShrink: 0,
    overflowX: 'auto',
    scrollbarWidth: 'none'
  },

  categoryButton: {
    padding: '8px 12px',
    background: 'none',
    border: 'none',
    borderRadius: '6px',
    cursor: 'pointer',
    fontSize: '18px',
    transition: 'all 0.2s',
    flexShrink: 0,
    minWidth: '40px'
  },

  activeCategoryButton: {
    backgroundColor: '#667eea',
    transform: 'scale(1.1)'
  },

  emojiGrid: {
    display: 'grid',
    gridTemplateColumns: 'repeat(8, 1fr)',
    gap: '4px',
    padding: '12px',
    overflowY: 'auto',
    flex: 1,
    scrollbarWidth: 'thin'
  },

  emojiButton: {
    width: '32px',
    height: '32px',
    background: 'none',
    border: 'none',
    borderRadius: '6px',
    cursor: 'pointer',
    fontSize: '20px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    transition: 'all 0.2s'
  },

  emptyCategory: {
    gridColumn: '1 / -1',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    gap: '8px',
    padding: '20px',
    color: '#7f8c8d',
    textAlign: 'center'
  },

  footer: {
    padding: '8px 16px',
    borderTop: '1px solid #e1e5e9',
    backgroundColor: '#f8f9fa',
    textAlign: 'center',
    color: '#7f8c8d',
    flexShrink: 0
  }
};

// CSS adicional para scrollbar e hover
const styleSheet = document.createElement('style');
styleSheet.textContent = `
  /* Scrollbar customizada */
  .emoji-grid::-webkit-scrollbar {
    width: 6px;
  }
  
  .emoji-grid::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
  }
  
  .emoji-grid::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 3px;
  }
  
  .emoji-grid::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
  }

  /* Hover effects */
  .emoji-button:hover {
    background-color: #f0f2f5 !important;
    transform: scale(1.2);
  }
  
  .category-button:hover {
    background-color: #e9ecef !important;
  }
  
  .close-button:hover {
    background-color: #e9ecef !important;
  }
`;
document.head.appendChild(styleSheet);

// PropTypes
EmojiPicker.defaultProps = {
  onEmojiSelect: () => {},
  onClose: () => {},
  isVisible: false
};

export default EmojiPicker;